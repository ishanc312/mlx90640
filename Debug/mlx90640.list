
mlx90640.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  0800aff8  0800aff8  0000bff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b428  0800b428  0000d1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b428  0800b428  0000c428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b430  0800b430  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b430  0800b430  0000c430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b434  0800b434  0000c434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800b438  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dec  200001e8  0800b620  0000d1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002fd4  0800b620  0000dfd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011074  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000291f  00000000  00000000  0001e28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  00020bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b55  00000000  00000000  00021a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f72  00000000  00000000  000225c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013903  00000000  00000000  00044537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5386  00000000  00000000  00057e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d1c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f64  00000000  00000000  0011d204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00122168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800afdc 	.word	0x0800afdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800afdc 	.word	0x0800afdc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <MLX90640_DumpEE>:
static int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
static int ValidateFrameData(uint16_t *frameData);
static int ValidateAuxData(uint16_t *auxData);

int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
     return MLX90640_I2CRead(slaveAddr, MLX90640_EEPROM_START_ADDRESS, MLX90640_EEPROM_DUMP_NUM, eeData);
 8000f84:	79f8      	ldrb	r0, [r7, #7]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8000f8c:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 8000f90:	f002 ff3c 	bl	8003e0c <MLX90640_I2CRead>
 8000f94:	4603      	mov	r3, r0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <MLX90640_GetFrameData>:

    return MLX90640_NO_ERROR;
}

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b0a6      	sub	sp, #152	@ 0x98
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	6039      	str	r1, [r7, #0]
 8000fa8:	71fb      	strb	r3, [r7, #7]
    uint16_t dataReady = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    uint16_t data[64];
    uint8_t cnt = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95

    while(dataReady == 0)
 8000fbc:	e016      	b.n	8000fec <MLX90640_GetFrameData+0x4e>
    {
        error = MLX90640_I2CRead(slaveAddr, MLX90640_STATUS_REG, 1, &statusRegister);
 8000fbe:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000fc2:	79f8      	ldrb	r0, [r7, #7]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fca:	f002 ff1f 	bl	8003e0c <MLX90640_I2CRead>
 8000fce:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
        if(error != MLX90640_NO_ERROR)
 8000fd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d002      	beq.n	8000fe0 <MLX90640_GetFrameData+0x42>
        {
            return error;
 8000fda:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000fde:	e093      	b.n	8001108 <MLX90640_GetFrameData+0x16a>
        }
        //dataReady = statusRegister & 0x0008;
        dataReady = MLX90640_GET_DATA_READY(statusRegister);
 8000fe0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    while(dataReady == 0)
 8000fec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0e4      	beq.n	8000fbe <MLX90640_GetFrameData+0x20>
    }

    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2230      	movs	r2, #48	@ 0x30
 8000ff8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f002 ff51 	bl	8003ea4 <MLX90640_I2CWrite>
 8001002:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error == -MLX90640_I2C_NACK_ERROR)
 8001006:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800100a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800100e:	d102      	bne.n	8001016 <MLX90640_GetFrameData+0x78>
    {
        return error;
 8001010:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001014:	e078      	b.n	8001108 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_PIXEL_DATA_START_ADDRESS, MLX90640_PIXEL_NUM, frameData);
 8001016:	79f8      	ldrb	r0, [r7, #7]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800101e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001022:	f002 fef3 	bl	8003e0c <MLX90640_I2CRead>
 8001026:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error != MLX90640_NO_ERROR)
 800102a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <MLX90640_GetFrameData+0x9a>
    {
        return error;
 8001032:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001036:	e067      	b.n	8001108 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_AUX_DATA_START_ADDRESS, MLX90640_AUX_NUM, data);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	79f8      	ldrb	r0, [r7, #7]
 800103e:	2240      	movs	r2, #64	@ 0x40
 8001040:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8001044:	f002 fee2 	bl	8003e0c <MLX90640_I2CRead>
 8001048:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error != MLX90640_NO_ERROR)
 800104c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <MLX90640_GetFrameData+0xbc>
    {
        return error;
 8001054:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001058:	e056      	b.n	8001108 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 800105a:	f107 038e 	add.w	r3, r7, #142	@ 0x8e
 800105e:	79f8      	ldrb	r0, [r7, #7]
 8001060:	2201      	movs	r2, #1
 8001062:	f248 010d 	movw	r1, #32781	@ 0x800d
 8001066:	f002 fed1 	bl	8003e0c <MLX90640_I2CRead>
 800106a:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    frameData[832] = controlRegister1;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8001074:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8001078:	801a      	strh	r2, [r3, #0]
    //frameData[833] = statusRegister & 0x0001;
    frameData[833] = MLX90640_GET_FRAME(statusRegister);
 800107a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f203 6382 	addw	r3, r3, #1666	@ 0x682
 8001084:	f002 0201 	and.w	r2, r2, #1
 8001088:	b292      	uxth	r2, r2
 800108a:	801a      	strh	r2, [r3, #0]

    if(error != MLX90640_NO_ERROR)
 800108c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <MLX90640_GetFrameData+0xfc>
    {
        return error;
 8001094:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001098:	e036      	b.n	8001108 <MLX90640_GetFrameData+0x16a>
    }

    error = ValidateAuxData(data);
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f867 	bl	8001172 <ValidateAuxData>
 80010a4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error == MLX90640_NO_ERROR)
 80010a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d11b      	bne.n	80010e8 <MLX90640_GetFrameData+0x14a>
    {
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80010b6:	e013      	b.n	80010e0 <MLX90640_GetFrameData+0x142>
        {
            frameData[cnt+MLX90640_PIXEL_NUM] = data[cnt];
 80010b8:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80010bc:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
 80010c0:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80010c4:	0052      	lsls	r2, r2, #1
 80010c6:	6839      	ldr	r1, [r7, #0]
 80010c8:	440a      	add	r2, r1
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	3398      	adds	r3, #152	@ 0x98
 80010ce:	443b      	add	r3, r7
 80010d0:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 80010d4:	8013      	strh	r3, [r2, #0]
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 80010d6:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80010da:	3301      	adds	r3, #1
 80010dc:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80010e0:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80010e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80010e6:	d9e7      	bls.n	80010b8 <MLX90640_GetFrameData+0x11a>
        }
    }

    error = ValidateFrameData(frameData);
 80010e8:	6838      	ldr	r0, [r7, #0]
 80010ea:	f000 f811 	bl	8001110 <ValidateFrameData>
 80010ee:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if (error != MLX90640_NO_ERROR)
 80010f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d002      	beq.n	8001100 <MLX90640_GetFrameData+0x162>
    {
        return error;
 80010fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80010fe:	e003      	b.n	8001108 <MLX90640_GetFrameData+0x16a>
    }

    return frameData[833];
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f203 6382 	addw	r3, r3, #1666	@ 0x682
 8001106:	881b      	ldrh	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3798      	adds	r7, #152	@ 0x98
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <ValidateFrameData>:

static int ValidateFrameData(uint16_t *frameData)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    uint8_t line = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	73fb      	strb	r3, [r7, #15]

    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	e01c      	b.n	800115c <ValidateFrameData+0x4c>
    {
        if((frameData[i] == 0x7FFF) && (line%2 == frameData[833])) return -MLX90640_FRAME_DATA_ERROR;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001130:	4293      	cmp	r3, r2
 8001132:	d10d      	bne.n	8001150 <ValidateFrameData+0x40>
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	b29b      	uxth	r3, r3
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	b29a      	uxth	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f203 6382 	addw	r3, r3, #1666	@ 0x682
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d102      	bne.n	8001150 <ValidateFrameData+0x40>
 800114a:	f06f 0307 	mvn.w	r3, #7
 800114e:	e00a      	b.n	8001166 <ValidateFrameData+0x56>
        line = line + 1;
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	3301      	adds	r3, #1
 8001154:	73fb      	strb	r3, [r7, #15]
    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	3320      	adds	r3, #32
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001162:	dbde      	blt.n	8001122 <ValidateFrameData+0x12>
    }

    return MLX90640_NO_ERROR;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <ValidateAuxData>:

static int ValidateAuxData(uint16_t *auxData)
{
 8001172:	b480      	push	{r7}
 8001174:	b089      	sub	sp, #36	@ 0x24
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]

    if(auxData[0] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001182:	4293      	cmp	r3, r2
 8001184:	d102      	bne.n	800118c <ValidateAuxData+0x1a>
 8001186:	f06f 0307 	mvn.w	r3, #7
 800118a:	e07e      	b.n	800128a <ValidateAuxData+0x118>

    for(int i=8; i<19; i++)
 800118c:	2308      	movs	r3, #8
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	e00e      	b.n	80011b0 <ValidateAuxData+0x3e>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d102      	bne.n	80011aa <ValidateAuxData+0x38>
 80011a4:	f06f 0307 	mvn.w	r3, #7
 80011a8:	e06f      	b.n	800128a <ValidateAuxData+0x118>
    for(int i=8; i<19; i++)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3301      	adds	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	2b12      	cmp	r3, #18
 80011b4:	dded      	ble.n	8001192 <ValidateAuxData+0x20>
    }

    for(int i=20; i<23; i++)
 80011b6:	2314      	movs	r3, #20
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	e00e      	b.n	80011da <ValidateAuxData+0x68>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	4413      	add	r3, r2
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d102      	bne.n	80011d4 <ValidateAuxData+0x62>
 80011ce:	f06f 0307 	mvn.w	r3, #7
 80011d2:	e05a      	b.n	800128a <ValidateAuxData+0x118>
    for(int i=20; i<23; i++)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	3301      	adds	r3, #1
 80011d8:	61bb      	str	r3, [r7, #24]
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	2b16      	cmp	r3, #22
 80011de:	dded      	ble.n	80011bc <ValidateAuxData+0x4a>
    }

    for(int i=24; i<33; i++)
 80011e0:	2318      	movs	r3, #24
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	e00e      	b.n	8001204 <ValidateAuxData+0x92>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d102      	bne.n	80011fe <ValidateAuxData+0x8c>
 80011f8:	f06f 0307 	mvn.w	r3, #7
 80011fc:	e045      	b.n	800128a <ValidateAuxData+0x118>
    for(int i=24; i<33; i++)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	3301      	adds	r3, #1
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2b20      	cmp	r3, #32
 8001208:	dded      	ble.n	80011e6 <ValidateAuxData+0x74>
    }

    for(int i=40; i<51; i++)
 800120a:	2328      	movs	r3, #40	@ 0x28
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	e00e      	b.n	800122e <ValidateAuxData+0xbc>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800121e:	4293      	cmp	r3, r2
 8001220:	d102      	bne.n	8001228 <ValidateAuxData+0xb6>
 8001222:	f06f 0307 	mvn.w	r3, #7
 8001226:	e030      	b.n	800128a <ValidateAuxData+0x118>
    for(int i=40; i<51; i++)
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	3301      	adds	r3, #1
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	2b32      	cmp	r3, #50	@ 0x32
 8001232:	dded      	ble.n	8001210 <ValidateAuxData+0x9e>
    }

    for(int i=52; i<55; i++)
 8001234:	2334      	movs	r3, #52	@ 0x34
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	e00e      	b.n	8001258 <ValidateAuxData+0xe6>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001248:	4293      	cmp	r3, r2
 800124a:	d102      	bne.n	8001252 <ValidateAuxData+0xe0>
 800124c:	f06f 0307 	mvn.w	r3, #7
 8001250:	e01b      	b.n	800128a <ValidateAuxData+0x118>
    for(int i=52; i<55; i++)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3301      	adds	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b36      	cmp	r3, #54	@ 0x36
 800125c:	dded      	ble.n	800123a <ValidateAuxData+0xc8>
    }

    for(int i=56; i<64; i++)
 800125e:	2338      	movs	r3, #56	@ 0x38
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	e00e      	b.n	8001282 <ValidateAuxData+0x110>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001272:	4293      	cmp	r3, r2
 8001274:	d102      	bne.n	800127c <ValidateAuxData+0x10a>
 8001276:	f06f 0307 	mvn.w	r3, #7
 800127a:	e006      	b.n	800128a <ValidateAuxData+0x118>
    for(int i=56; i<64; i++)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	3301      	adds	r3, #1
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	2b3f      	cmp	r3, #63	@ 0x3f
 8001286:	dded      	ble.n	8001264 <ValidateAuxData+0xf2>
    }

    return MLX90640_NO_ERROR;
 8001288:	2300      	movs	r3, #0

}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	@ 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <MLX90640_ExtractParameters>:

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	6039      	str	r1, [r7, #0]
    int error = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]

    ExtractVDDParameters(eeData, mlx90640);
 80012a4:	6839      	ldr	r1, [r7, #0]
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 feb2 	bl	8002010 <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 80012ac:	6839      	ldr	r1, [r7, #0]
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 feda 	bl	8002068 <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 80012b4:	6839      	ldr	r1, [r7, #0]
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 ff62 	bl	8002180 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 80012bc:	6839      	ldr	r1, [r7, #0]
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 ff70 	bl	80021a4 <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 80012c4:	6839      	ldr	r1, [r7, #0]
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 ff88 	bl	80021dc <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 80012cc:	6839      	ldr	r1, [r7, #0]
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 ff9c 	bl	800220c <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 80012d4:	6839      	ldr	r1, [r7, #0]
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 ffb6 	bl	8002248 <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 80012dc:	6839      	ldr	r1, [r7, #0]
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f002 fa82 	bl	80037e8 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 80012e4:	6839      	ldr	r1, [r7, #0]
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f001 f86a 	bl	80023c0 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f001 fbee 	bl	8002ad0 <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 80012f4:	6839      	ldr	r1, [r7, #0]
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f001 fe26 	bl	8002f48 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 80012fc:	6839      	ldr	r1, [r7, #0]
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f002 f86a 	bl	80033d8 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 8001304:	6839      	ldr	r1, [r7, #0]
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f002 fbaa 	bl	8003a60 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f002 fc46 	bl	8003ba0 <ExtractDeviatingPixels>
 8001314:	60f8      	str	r0, [r7, #12]

    return error;
 8001316:	68fb      	ldr	r3, [r7, #12]

}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	460a      	mov	r2, r1
 800132a:	71fb      	strb	r3, [r7, #7]
 800132c:	4613      	mov	r3, r2
 800132e:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    uint16_t value;
    int error;

    //value = (refreshRate & 0x07)<<7;
    value = ((uint16_t)refreshRate << MLX90640_CTRL_REFRESH_SHIFT);
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	b29b      	uxth	r3, r3
 8001334:	01db      	lsls	r3, r3, #7
 8001336:	817b      	strh	r3, [r7, #10]
    value &= ~MLX90640_CTRL_REFRESH_MASK;
 8001338:	897b      	ldrh	r3, [r7, #10]
 800133a:	f403 7360 	and.w	r3, r3, #896	@ 0x380
 800133e:	817b      	strh	r3, [r7, #10]

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 8001340:	f107 0308 	add.w	r3, r7, #8
 8001344:	79f8      	ldrb	r0, [r7, #7]
 8001346:	2201      	movs	r2, #1
 8001348:	f248 010d 	movw	r1, #32781	@ 0x800d
 800134c:	f002 fd5e 	bl	8003e0c <MLX90640_I2CRead>
 8001350:	60f8      	str	r0, [r7, #12]
    if(error == MLX90640_NO_ERROR)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10e      	bne.n	8001376 <MLX90640_SetRefreshRate+0x56>
    {
        value = (controlRegister1 & MLX90640_CTRL_REFRESH_MASK) | value;
 8001358:	893b      	ldrh	r3, [r7, #8]
 800135a:	f423 7360 	bic.w	r3, r3, #896	@ 0x380
 800135e:	b29a      	uxth	r2, r3
 8001360:	897b      	ldrh	r3, [r7, #10]
 8001362:	4313      	orrs	r3, r2
 8001364:	817b      	strh	r3, [r7, #10]
        error = MLX90640_I2CWrite(slaveAddr, MLX90640_CTRL_REG, value);
 8001366:	897a      	ldrh	r2, [r7, #10]
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f248 010d 	movw	r1, #32781	@ 0x800d
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fd98 	bl	8003ea4 <MLX90640_I2CWrite>
 8001374:	60f8      	str	r0, [r7, #12]
    }

    return error;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    uint16_t value;
    int error;

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	79f8      	ldrb	r0, [r7, #7]
 8001390:	2201      	movs	r2, #1
 8001392:	f248 010d 	movw	r1, #32781	@ 0x800d
 8001396:	f002 fd39 	bl	8003e0c <MLX90640_I2CRead>
 800139a:	60f8      	str	r0, [r7, #12]

    if(error == 0)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10b      	bne.n	80013ba <MLX90640_SetChessMode+0x3a>
    {
        value = (controlRegister1 | MLX90640_CTRL_MEAS_MODE_MASK);
 80013a2:	893b      	ldrh	r3, [r7, #8]
 80013a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013a8:	817b      	strh	r3, [r7, #10]
        error = MLX90640_I2CWrite(slaveAddr, MLX90640_CTRL_REG, value);
 80013aa:	897a      	ldrh	r2, [r7, #10]
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f248 010d 	movw	r1, #32781	@ 0x800d
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 fd76 	bl	8003ea4 <MLX90640_I2CWrite>
 80013b8:	60f8      	str	r0, [r7, #12]
    }

    return error;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	0000      	movs	r0, r0
	...

080013c8 <MLX90640_CalculateTo>:
}

//------------------------------------------------------------------------------

void MLX90640_CalculateTo(uint16_t *frameData, const paramsMLX90640 *params, float emissivity, float tr, float *result)
{
 80013c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013cc:	b0a0      	sub	sp, #128	@ 0x80
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6178      	str	r0, [r7, #20]
 80013d2:	6139      	str	r1, [r7, #16]
 80013d4:	ed87 0a03 	vstr	s0, [r7, #12]
 80013d8:	edc7 0a02 	vstr	s1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
    float kvScale;
    float alphaScale;
    float kta;
    float kv;

    subPage = frameData[833];
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	@ 0x682
 80013e4:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    vdd = MLX90640_GetVdd(frameData, params);
 80013e8:	6939      	ldr	r1, [r7, #16]
 80013ea:	6978      	ldr	r0, [r7, #20]
 80013ec:	f000 fd04 	bl	8001df8 <MLX90640_GetVdd>
 80013f0:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
    ta = MLX90640_GetTa(frameData, params);
 80013f4:	6939      	ldr	r1, [r7, #16]
 80013f6:	6978      	ldr	r0, [r7, #20]
 80013f8:	f000 fd76 	bl	8001ee8 <MLX90640_GetTa>
 80013fc:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68

    ta4 = (ta + 273.15);
 8001400:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001402:	f7ff f8a1 	bl	8000548 <__aeabi_f2d>
 8001406:	a3e6      	add	r3, pc, #920	@ (adr r3, 80017a0 <MLX90640_CalculateTo+0x3d8>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7fe ff3e 	bl	800028c <__adddf3>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fbe6 	bl	8000be8 <__aeabi_d2f>
 800141c:	4603      	mov	r3, r0
 800141e:	667b      	str	r3, [r7, #100]	@ 0x64
    ta4 = ta4 * ta4;
 8001420:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001424:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001428:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    ta4 = ta4 * ta4;
 800142c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001430:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001434:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    tr4 = (tr + 273.15);
 8001438:	68b8      	ldr	r0, [r7, #8]
 800143a:	f7ff f885 	bl	8000548 <__aeabi_f2d>
 800143e:	a3d8      	add	r3, pc, #864	@ (adr r3, 80017a0 <MLX90640_CalculateTo+0x3d8>)
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	f7fe ff22 	bl	800028c <__adddf3>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	f7ff fbca 	bl	8000be8 <__aeabi_d2f>
 8001454:	4603      	mov	r3, r0
 8001456:	663b      	str	r3, [r7, #96]	@ 0x60
    tr4 = tr4 * tr4;
 8001458:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800145c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001460:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    tr4 = tr4 * tr4;
 8001464:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001468:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800146c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    taTr = tr4 - (tr4-ta4)/emissivity;
 8001470:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001474:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001478:	ee77 6a67 	vsub.f32	s13, s14, s15
 800147c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001480:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001484:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    ktaScale = POW2(params->ktaScale);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	@ 0xf4c
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f834 	bl	8000504 <__aeabi_ui2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	ec43 2b11 	vmov	d1, r2, r3
 80014a4:	ed9f 0bb8 	vldr	d0, [pc, #736]	@ 8001788 <MLX90640_CalculateTo+0x3c0>
 80014a8:	f008 fe10 	bl	800a0cc <pow>
 80014ac:	ec53 2b10 	vmov	r2, r3, d0
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff fb98 	bl	8000be8 <__aeabi_d2f>
 80014b8:	4603      	mov	r3, r0
 80014ba:	65bb      	str	r3, [r7, #88]	@ 0x58
    kvScale = POW2(params->kvScale);
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014c2:	f893 324d 	ldrb.w	r3, [r3, #589]	@ 0x24d
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f81c 	bl	8000504 <__aeabi_ui2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	ec43 2b11 	vmov	d1, r2, r3
 80014d4:	ed9f 0bac 	vldr	d0, [pc, #688]	@ 8001788 <MLX90640_CalculateTo+0x3c0>
 80014d8:	f008 fdf8 	bl	800a0cc <pow>
 80014dc:	ec53 2b10 	vmov	r2, r3, d0
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff fb80 	bl	8000be8 <__aeabi_d2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	657b      	str	r3, [r7, #84]	@ 0x54
    alphaScale = POW2(params->alphaScale);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	f893 364a 	ldrb.w	r3, [r3, #1610]	@ 0x64a
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f806 	bl	8000504 <__aeabi_ui2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	ec43 2b11 	vmov	d1, r2, r3
 8001500:	ed9f 0ba1 	vldr	d0, [pc, #644]	@ 8001788 <MLX90640_CalculateTo+0x3c0>
 8001504:	f008 fde2 	bl	800a0cc <pow>
 8001508:	ec53 2b10 	vmov	r2, r3, d0
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fb6a 	bl	8000be8 <__aeabi_d2f>
 8001514:	4603      	mov	r3, r0
 8001516:	653b      	str	r3, [r7, #80]	@ 0x50

    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800151e:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8001798 <MLX90640_CalculateTo+0x3d0>
 8001522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001526:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800152a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800152e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001536:	edc7 7a07 	vstr	s15, [r7, #28]
    alphaCorrR[1] = 1 ;
 800153a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800153e:	623b      	str	r3, [r7, #32]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800154c:	ee07 3a90 	vmov	s15, r3
 8001550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001558:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800155c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001560:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 8001564:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001574:	461a      	mov	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800158e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001596:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

//------------------------- Gain calculation -----------------------------------

    gain = (float)params->gainEE / (int16_t)frameData[778];
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80015a0:	ee07 3a90 	vmov	s15, r3
 80015a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	ee07 3a90 	vmov	s15, r3
 80015b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015be:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

//------------------------- To calculation -------------------------------------
    mode = (frameData[832] & MLX90640_CTRL_MEAS_MODE_MASK) >> 5;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80015d2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    irDataCP[0] = (int16_t)frameData[776] * gain;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	b21b      	sxth	r3, r3
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015e8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80015ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    irDataCP[1] = (int16_t)frameData[808] * gain;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001606:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800160a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 8001612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff97 	bl	8000548 <__aeabi_f2d>
 800161a:	4604      	mov	r4, r0
 800161c:	460d      	mov	r5, r1
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001624:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	@ 0x258
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	edd3 6a08 	vldr	s13, [r3, #32]
 8001636:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800163a:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 800163e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800164a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800164e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001652:	ee17 0a90 	vmov	r0, s15
 8001656:	f7fe ff77 	bl	8000548 <__aeabi_f2d>
 800165a:	4680      	mov	r8, r0
 800165c:	4689      	mov	r9, r1
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff70 	bl	8000548 <__aeabi_f2d>
 8001668:	4682      	mov	sl, r0
 800166a:	468b      	mov	fp, r1
 800166c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800166e:	f7fe ff6b 	bl	8000548 <__aeabi_f2d>
 8001672:	a347      	add	r3, pc, #284	@ (adr r3, 8001790 <MLX90640_CalculateTo+0x3c8>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe fe06 	bl	8000288 <__aeabi_dsub>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4650      	mov	r0, sl
 8001682:	4659      	mov	r1, fp
 8001684:	f7fe ffb8 	bl	80005f8 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	4b41      	ldr	r3, [pc, #260]	@ (800179c <MLX90640_CalculateTo+0x3d4>)
 8001696:	f7fe fdf9 	bl	800028c <__adddf3>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4640      	mov	r0, r8
 80016a0:	4649      	mov	r1, r9
 80016a2:	f7fe ffa9 	bl	80005f8 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4620      	mov	r0, r4
 80016ac:	4629      	mov	r1, r5
 80016ae:	f7fe fdeb 	bl	8000288 <__aeabi_dsub>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff fa95 	bl	8000be8 <__aeabi_d2f>
 80016be:	4603      	mov	r3, r0
 80016c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if( mode ==  params->calibrationModeEE)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016c8:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d16b      	bne.n	80017a8 <MLX90640_CalculateTo+0x3e0>
    {
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 80016d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff38 	bl	8000548 <__aeabi_f2d>
 80016d8:	4604      	mov	r4, r0
 80016da:	460d      	mov	r5, r1
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016e2:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	@ 0x25a
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	edd3 6a08 	vldr	s13, [r3, #32]
 80016f4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80016f8:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 80016fc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001704:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800170c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001710:	ee17 0a90 	vmov	r0, s15
 8001714:	f7fe ff18 	bl	8000548 <__aeabi_f2d>
 8001718:	4680      	mov	r8, r0
 800171a:	4689      	mov	r9, r1
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff11 	bl	8000548 <__aeabi_f2d>
 8001726:	4682      	mov	sl, r0
 8001728:	468b      	mov	fp, r1
 800172a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800172c:	f7fe ff0c 	bl	8000548 <__aeabi_f2d>
 8001730:	a317      	add	r3, pc, #92	@ (adr r3, 8001790 <MLX90640_CalculateTo+0x3c8>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	f7fe fda7 	bl	8000288 <__aeabi_dsub>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4650      	mov	r0, sl
 8001740:	4659      	mov	r1, fp
 8001742:	f7fe ff59 	bl	80005f8 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	4b12      	ldr	r3, [pc, #72]	@ (800179c <MLX90640_CalculateTo+0x3d4>)
 8001754:	f7fe fd9a 	bl	800028c <__adddf3>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4640      	mov	r0, r8
 800175e:	4649      	mov	r1, r9
 8001760:	f7fe ff4a 	bl	80005f8 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4620      	mov	r0, r4
 800176a:	4629      	mov	r1, r5
 800176c:	f7fe fd8c 	bl	8000288 <__aeabi_dsub>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f7ff fa36 	bl	8000be8 <__aeabi_d2f>
 800177c:	4603      	mov	r3, r0
 800177e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001780:	e071      	b.n	8001866 <MLX90640_CalculateTo+0x49e>
 8001782:	bf00      	nop
 8001784:	f3af 8000 	nop.w
 8001788:	00000000 	.word	0x00000000
 800178c:	40000000 	.word	0x40000000
 8001790:	66666666 	.word	0x66666666
 8001794:	400a6666 	.word	0x400a6666
 8001798:	42200000 	.word	0x42200000
 800179c:	3ff00000 	.word	0x3ff00000
 80017a0:	66666666 	.word	0x66666666
 80017a4:	40711266 	.word	0x40711266
    }
    else
    {
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 80017a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fecc 	bl	8000548 <__aeabi_f2d>
 80017b0:	4604      	mov	r4, r0
 80017b2:	460d      	mov	r5, r1
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ba:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	@ 0x25a
 80017be:	ee07 3a90 	vmov	s15, r3
 80017c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017cc:	edd3 7a97 	vldr	s15, [r3, #604]	@ 0x25c
 80017d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	edd3 6a08 	vldr	s13, [r3, #32]
 80017da:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80017de:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 80017e2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80017e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f6:	ee17 0a90 	vmov	r0, s15
 80017fa:	f7fe fea5 	bl	8000548 <__aeabi_f2d>
 80017fe:	4680      	mov	r8, r0
 8001800:	4689      	mov	r9, r1
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fe9e 	bl	8000548 <__aeabi_f2d>
 800180c:	4682      	mov	sl, r0
 800180e:	468b      	mov	fp, r1
 8001810:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001812:	f7fe fe99 	bl	8000548 <__aeabi_f2d>
 8001816:	a33e      	add	r3, pc, #248	@ (adr r3, 8001910 <MLX90640_CalculateTo+0x548>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe fd34 	bl	8000288 <__aeabi_dsub>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4650      	mov	r0, sl
 8001826:	4659      	mov	r1, fp
 8001828:	f7fe fee6 	bl	80005f8 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	4b37      	ldr	r3, [pc, #220]	@ (8001918 <MLX90640_CalculateTo+0x550>)
 800183a:	f7fe fd27 	bl	800028c <__adddf3>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4640      	mov	r0, r8
 8001844:	4649      	mov	r1, r9
 8001846:	f7fe fed7 	bl	80005f8 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4620      	mov	r0, r4
 8001850:	4629      	mov	r1, r5
 8001852:	f7fe fd19 	bl	8000288 <__aeabi_dsub>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f9c3 	bl	8000be8 <__aeabi_d2f>
 8001862:	4603      	mov	r3, r0
 8001864:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8001866:	2300      	movs	r3, #0
 8001868:	677b      	str	r3, [r7, #116]	@ 0x74
 800186a:	e2b5      	b.n	8001dd8 <MLX90640_CalculateTo+0xa10>
    {
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2;
 800186c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800186e:	2b00      	cmp	r3, #0
 8001870:	da00      	bge.n	8001874 <MLX90640_CalculateTo+0x4ac>
 8001872:	331f      	adds	r3, #31
 8001874:	115b      	asrs	r3, r3, #5
 8001876:	b2da      	uxtb	r2, r3
 8001878:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800187a:	2b00      	cmp	r3, #0
 800187c:	da00      	bge.n	8001880 <MLX90640_CalculateTo+0x4b8>
 800187e:	333f      	adds	r3, #63	@ 0x3f
 8001880:	119b      	asrs	r3, r3, #6
 8001882:	b2db      	uxtb	r3, r3
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	b2db      	uxtb	r3, r3
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2);
 8001890:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001892:	2b00      	cmp	r3, #0
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	bfb8      	it	lt
 800189a:	425b      	neglt	r3, r3
 800189c:	b25a      	sxtb	r2, r3
 800189e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80018a2:	4053      	eors	r3, r2
 80018a4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 80018a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018aa:	3302      	adds	r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da00      	bge.n	80018b2 <MLX90640_CalculateTo+0x4ea>
 80018b0:	3303      	adds	r3, #3
 80018b2:	109b      	asrs	r3, r3, #2
 80018b4:	461a      	mov	r2, r3
 80018b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018b8:	3303      	adds	r3, #3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	da00      	bge.n	80018c0 <MLX90640_CalculateTo+0x4f8>
 80018be:	3303      	adds	r3, #3
 80018c0:	109b      	asrs	r3, r3, #2
 80018c2:	425b      	negs	r3, r3
 80018c4:	441a      	add	r2, r3
 80018c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018c8:	3301      	adds	r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da00      	bge.n	80018d0 <MLX90640_CalculateTo+0x508>
 80018ce:	3303      	adds	r3, #3
 80018d0:	109b      	asrs	r3, r3, #2
 80018d2:	441a      	add	r2, r3
 80018d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	da00      	bge.n	80018dc <MLX90640_CalculateTo+0x514>
 80018da:	3303      	adds	r3, #3
 80018dc:	109b      	asrs	r3, r3, #2
 80018de:	425b      	negs	r3, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	f1c3 0301 	rsb	r3, r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	fb12 f303 	smulbb	r3, r2, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

        if(mode == 0)
 80018fa:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10c      	bne.n	800191c <MLX90640_CalculateTo+0x554>
        {
          pattern = ilPattern;
 8001902:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001906:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800190a:	e00b      	b.n	8001924 <MLX90640_CalculateTo+0x55c>
 800190c:	f3af 8000 	nop.w
 8001910:	66666666 	.word	0x66666666
 8001914:	400a6666 	.word	0x400a6666
 8001918:	3ff00000 	.word	0x3ff00000
        }
        else
        {
          pattern = chessPattern;
 800191c:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001920:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        }

        if(pattern == frameData[833])
 8001924:	f997 307b 	ldrsb.w	r3, [r7, #123]	@ 0x7b
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	f202 6282 	addw	r2, r2, #1666	@ 0x682
 800192e:	8812      	ldrh	r2, [r2, #0]
 8001930:	4293      	cmp	r3, r2
 8001932:	f040 824e 	bne.w	8001dd2 <MLX90640_CalculateTo+0xa0a>
        {
            irData = (int16_t)frameData[pixelNumber] * gain;
 8001936:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4413      	add	r3, r2
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b21b      	sxth	r3, r3
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800194e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001952:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

            kta = params->kta[pixelNumber]/ktaScale;
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800195a:	4413      	add	r3, r2
 800195c:	f603 434c 	addw	r3, r3, #3148	@ 0xc4c
 8001960:	f993 3000 	ldrsb.w	r3, [r3]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800196c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001974:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            kv = params->kv[pixelNumber]/kvScale;
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800197c:	4413      	add	r3, r2
 800197e:	f603 734d 	addw	r3, r3, #3917	@ 0xf4d
 8001982:	f993 3000 	ldrsb.w	r3, [r3]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800198e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001996:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
 800199a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800199c:	f7fe fdd4 	bl	8000548 <__aeabi_f2d>
 80019a0:	4604      	mov	r4, r0
 80019a2:	460d      	mov	r5, r1
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019a8:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019bc:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80019c0:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 80019c4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80019c8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80019cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019dc:	ee17 0a90 	vmov	r0, s15
 80019e0:	f7fe fdb2 	bl	8000548 <__aeabi_f2d>
 80019e4:	4680      	mov	r8, r0
 80019e6:	4689      	mov	r9, r1
 80019e8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80019ea:	f7fe fdad 	bl	8000548 <__aeabi_f2d>
 80019ee:	4682      	mov	sl, r0
 80019f0:	468b      	mov	fp, r1
 80019f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80019f4:	f7fe fda8 	bl	8000548 <__aeabi_f2d>
 80019f8:	a3c4      	add	r3, pc, #784	@ (adr r3, 8001d0c <MLX90640_CalculateTo+0x944>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fc43 	bl	8000288 <__aeabi_dsub>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4650      	mov	r0, sl
 8001a08:	4659      	mov	r1, fp
 8001a0a:	f7fe fdf5 	bl	80005f8 <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	4bbb      	ldr	r3, [pc, #748]	@ (8001d08 <MLX90640_CalculateTo+0x940>)
 8001a1c:	f7fe fc36 	bl	800028c <__adddf3>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4640      	mov	r0, r8
 8001a26:	4649      	mov	r1, r9
 8001a28:	f7fe fde6 	bl	80005f8 <__aeabi_dmul>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4620      	mov	r0, r4
 8001a32:	4629      	mov	r1, r5
 8001a34:	f7fe fc28 	bl	8000288 <__aeabi_dsub>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f8d2 	bl	8000be8 <__aeabi_d2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if(mode !=  params->calibrationModeEE)
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a4e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d023      	beq.n	8001a9e <MLX90640_CalculateTo+0x6d6>
            {
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern;
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a5c:	ed93 7a99 	vldr	s14, [r3, #612]	@ 0x264
 8001a60:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	3b01      	subs	r3, #1
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a74:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001a78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a82:	edd3 6a98 	vldr	s13, [r3, #608]	@ 0x260
 8001a86:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a9a:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
            }

            irData = irData - params->tgc * irDataCP[subPage];
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	ed93 7a06 	vldr	s14, [r3, #24]
 8001aa4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	3380      	adds	r3, #128	@ 0x80
 8001aac:	443b      	add	r3, r7
 8001aae:	3b54      	subs	r3, #84	@ 0x54
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab8:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ac0:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
            irData = irData / emissivity;
 8001ac4:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8001ac8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ad0:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 8001ad4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001ad6:	f7fe fd37 	bl	8000548 <__aeabi_f2d>
 8001ada:	a387      	add	r3, pc, #540	@ (adr r3, 8001cf8 <MLX90640_CalculateTo+0x930>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe fd8a 	bl	80005f8 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4614      	mov	r4, r2
 8001aea:	461d      	mov	r5, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001af0:	3324      	adds	r3, #36	@ 0x24
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	885b      	ldrh	r3, [r3, #2]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd13 	bl	8000524 <__aeabi_i2d>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4620      	mov	r0, r4
 8001b04:	4629      	mov	r1, r5
 8001b06:	f7fe fea1 	bl	800084c <__aeabi_ddiv>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7ff f869 	bl	8000be8 <__aeabi_d2f>
 8001b16:	4603      	mov	r3, r0
 8001b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001b20:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001b24:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 8001b28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b38:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b40:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8001b44:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001b48:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b4c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b54:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001b58:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001b5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b60:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];
 8001b70:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001b72:	f7fe fce9 	bl	8000548 <__aeabi_f2d>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	ec43 2b10 	vmov	d0, r2, r3
 8001b7e:	f008 fb15 	bl	800a1ac <sqrt>
 8001b82:	eeb0 7a40 	vmov.f32	s14, s0
 8001b86:	eef0 7a60 	vmov.f32	s15, s1
 8001b8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b8e:	eef0 0a67 	vmov.f32	s1, s15
 8001b92:	f008 fb0b 	bl	800a1ac <sqrt>
 8001b96:	ec55 4b10 	vmov	r4, r5, d0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fcd2 	bl	8000548 <__aeabi_f2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4620      	mov	r0, r4
 8001baa:	4629      	mov	r1, r5
 8001bac:	f7fe fd24 	bl	80005f8 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7ff f816 	bl	8000be8 <__aeabi_d2f>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	63bb      	str	r3, [r7, #56]	@ 0x38

            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;
 8001bc0:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001bc2:	f7fe fcc1 	bl	8000548 <__aeabi_f2d>
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	460d      	mov	r5, r1
 8001bca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001bcc:	f7fe fcbc 	bl	8000548 <__aeabi_f2d>
 8001bd0:	4680      	mov	r8, r0
 8001bd2:	4689      	mov	r9, r1
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fcb5 	bl	8000548 <__aeabi_f2d>
 8001bde:	a348      	add	r3, pc, #288	@ (adr r3, 8001d00 <MLX90640_CalculateTo+0x938>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	f7fe fd08 	bl	80005f8 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	f04f 0000 	mov.w	r0, #0
 8001bf0:	4945      	ldr	r1, [pc, #276]	@ (8001d08 <MLX90640_CalculateTo+0x940>)
 8001bf2:	f7fe fb49 	bl	8000288 <__aeabi_dsub>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4640      	mov	r0, r8
 8001bfc:	4649      	mov	r1, r9
 8001bfe:	f7fe fcfb 	bl	80005f8 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4690      	mov	r8, r2
 8001c08:	4699      	mov	r9, r3
 8001c0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001c0c:	f7fe fc9c 	bl	8000548 <__aeabi_f2d>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4640      	mov	r0, r8
 8001c16:	4649      	mov	r1, r9
 8001c18:	f7fe fb38 	bl	800028c <__adddf3>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4620      	mov	r0, r4
 8001c22:	4629      	mov	r1, r5
 8001c24:	f7fe fe12 	bl	800084c <__aeabi_ddiv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4614      	mov	r4, r2
 8001c2e:	461d      	mov	r5, r3
 8001c30:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001c32:	f7fe fc89 	bl	8000548 <__aeabi_f2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	f7fe fb25 	bl	800028c <__adddf3>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	ec43 2b17 	vmov	d7, r2, r3
 8001c4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c4e:	eef0 0a67 	vmov.f32	s1, s15
 8001c52:	f008 faab 	bl	800a1ac <sqrt>
 8001c56:	eeb0 7a40 	vmov.f32	s14, s0
 8001c5a:	eef0 7a60 	vmov.f32	s15, s1
 8001c5e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c62:	eef0 0a67 	vmov.f32	s1, s15
 8001c66:	f008 faa1 	bl	800a1ac <sqrt>
 8001c6a:	ec51 0b10 	vmov	r0, r1, d0
 8001c6e:	a324      	add	r3, pc, #144	@ (adr r3, 8001d00 <MLX90640_CalculateTo+0x938>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe fb08 	bl	8000288 <__aeabi_dsub>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f7fe ffb2 	bl	8000be8 <__aeabi_d2f>
 8001c84:	4603      	mov	r3, r0
 8001c86:	637b      	str	r3, [r7, #52]	@ 0x34

            if(To < params->ct[1])
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c96:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001c9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca2:	d503      	bpl.n	8001cac <MLX90640_CalculateTo+0x8e4>
            {
                range = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8001caa:	e036      	b.n	8001d1a <MLX90640_CalculateTo+0x952>
            }
            else if(To < params->ct[2])
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cba:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	d503      	bpl.n	8001cd0 <MLX90640_CalculateTo+0x908>
            {
                range = 1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8001cce:	e024      	b.n	8001d1a <MLX90640_CalculateTo+0x952>
            }
            else if(To < params->ct[3])
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001cd6:	ee07 3a90 	vmov	s15, r3
 8001cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cde:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001ce2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	d513      	bpl.n	8001d14 <MLX90640_CalculateTo+0x94c>
            {
                range = 2;
 8001cec:	2302      	movs	r3, #2
 8001cee:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8001cf2:	e012      	b.n	8001d1a <MLX90640_CalculateTo+0x952>
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	a0b5ed8d 	.word	0xa0b5ed8d
 8001cfc:	3eb0c6f7 	.word	0x3eb0c6f7
 8001d00:	66666666 	.word	0x66666666
 8001d04:	40711266 	.word	0x40711266
 8001d08:	3ff00000 	.word	0x3ff00000
 8001d0c:	66666666 	.word	0x66666666
 8001d10:	400a6666 	.word	0x400a6666
            }
            else
            {
                range = 3;
 8001d14:	2303      	movs	r3, #3
 8001d16:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
            }

            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15;
 8001d1a:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	3380      	adds	r3, #128	@ 0x80
 8001d22:	443b      	add	r3, r7
 8001d24:	3b64      	subs	r3, #100	@ 0x64
 8001d26:	ed93 7a00 	vldr	s14, [r3]
 8001d2a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001d2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d32:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	330a      	adds	r3, #10
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3304      	adds	r3, #4
 8001d40:	edd3 6a00 	vldr	s13, [r3]
 8001d44:	f997 207a 	ldrsb.w	r2, [r7, #122]	@ 0x7a
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	3220      	adds	r2, #32
 8001d4c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d58:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
 8001d5c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d70:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8001d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d78:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d80:	ee17 0a90 	vmov	r0, s15
 8001d84:	f7fe fbe0 	bl	8000548 <__aeabi_f2d>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	ec43 2b10 	vmov	d0, r2, r3
 8001d90:	f008 fa0c 	bl	800a1ac <sqrt>
 8001d94:	eeb0 7a40 	vmov.f32	s14, s0
 8001d98:	eef0 7a60 	vmov.f32	s15, s1
 8001d9c:	eeb0 0a47 	vmov.f32	s0, s14
 8001da0:	eef0 0a67 	vmov.f32	s1, s15
 8001da4:	f008 fa02 	bl	800a1ac <sqrt>
 8001da8:	ec51 0b10 	vmov	r0, r1, d0
 8001dac:	a310      	add	r3, pc, #64	@ (adr r3, 8001df0 <MLX90640_CalculateTo+0xa28>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	f7fe fa69 	bl	8000288 <__aeabi_dsub>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7fe ff13 	bl	8000be8 <__aeabi_d2f>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	637b      	str	r3, [r7, #52]	@ 0x34

            result[pixelNumber] = To;
 8001dc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dd0:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8001dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	677b      	str	r3, [r7, #116]	@ 0x74
 8001dd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001dda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001dde:	f6ff ad45 	blt.w	800186c <MLX90640_CalculateTo+0x4a4>
        }
    }
}
 8001de2:	bf00      	nop
 8001de4:	bf00      	nop
 8001de6:	3780      	adds	r7, #128	@ 0x80
 8001de8:	46bd      	mov	sp, r7
 8001dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dee:	bf00      	nop
 8001df0:	66666666 	.word	0x66666666
 8001df4:	40711266 	.word	0x40711266

08001df8 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    uint16_t resolutionRAM;

    resolutionRAM = (frameData[832] & ~MLX90640_CTRL_RESOLUTION_MASK) >> MLX90640_CTRL_RESOLUTION_SHIFT;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	0a9b      	lsrs	r3, r3, #10
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	82fb      	strh	r3, [r7, #22]
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fb72 	bl	8000504 <__aeabi_ui2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	ec43 2b11 	vmov	d1, r2, r3
 8001e28:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8001ed8 <MLX90640_GetVdd+0xe0>
 8001e2c:	f008 f94e 	bl	800a0cc <pow>
 8001e30:	ec55 4b10 	vmov	r4, r5, d0
 8001e34:	8afb      	ldrh	r3, [r7, #22]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb64 	bl	8000504 <__aeabi_ui2d>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	ec43 2b11 	vmov	d1, r2, r3
 8001e44:	ed9f 0b24 	vldr	d0, [pc, #144]	@ 8001ed8 <MLX90640_GetVdd+0xe0>
 8001e48:	f008 f940 	bl	800a0cc <pow>
 8001e4c:	ec53 2b10 	vmov	r2, r3, d0
 8001e50:	4620      	mov	r0, r4
 8001e52:	4629      	mov	r1, r5
 8001e54:	f7fe fcfa 	bl	800084c <__aeabi_ddiv>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f7fe fec2 	bl	8000be8 <__aeabi_d2f>
 8001e64:	4603      	mov	r3, r0
 8001e66:	613b      	str	r3, [r7, #16]
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f203 6354 	addw	r3, r3, #1620	@ 0x654
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ea6:	ee16 0a90 	vmov	r0, s13
 8001eaa:	f7fe fb4d 	bl	8000548 <__aeabi_f2d>
 8001eae:	a30c      	add	r3, pc, #48	@ (adr r3, 8001ee0 <MLX90640_GetVdd+0xe8>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe f9ea 	bl	800028c <__adddf3>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7fe fe92 	bl	8000be8 <__aeabi_d2f>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60fb      	str	r3, [r7, #12]

    return vdd;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	ee07 3a90 	vmov	s15, r3
}
 8001ece:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed8:	00000000 	.word	0x00000000
 8001edc:	40000000 	.word	0x40000000
 8001ee0:	66666666 	.word	0x66666666
 8001ee4:	400a6666 	.word	0x400a6666

08001ee8 <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 8001ee8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
    int16_t ptat;
    float ptatArt;
    float vdd;
    float ta;

    vdd = MLX90640_GetVdd(frameData, params);
 8001ef4:	6839      	ldr	r1, [r7, #0]
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ff7e 	bl	8001df8 <MLX90640_GetVdd>
 8001efc:	ed87 0a05 	vstr	s0, [r7, #20]

    ptat = (int16_t)frameData[800];
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	827b      	strh	r3, [r7, #18]

    ptatArt = (ptat / (ptat * params->alphaPTAT + (int16_t)frameData[768])) * POW2(18);
 8001f0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b21b      	sxth	r3, r3
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f46:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002008 <MLX90640_GetTa+0x120>
 8001f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f4e:	edc7 7a03 	vstr	s15, [r7, #12]

    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3)) - params->vPTAT25);
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f7fe faf8 	bl	8000548 <__aeabi_f2d>
 8001f58:	4604      	mov	r4, r0
 8001f5a:	460d      	mov	r5, r1
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe faf1 	bl	8000548 <__aeabi_f2d>
 8001f66:	4680      	mov	r8, r0
 8001f68:	4689      	mov	r9, r1
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7fe faec 	bl	8000548 <__aeabi_f2d>
 8001f70:	a323      	add	r3, pc, #140	@ (adr r3, 8002000 <MLX90640_GetTa+0x118>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe f987 	bl	8000288 <__aeabi_dsub>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4640      	mov	r0, r8
 8001f80:	4649      	mov	r1, r9
 8001f82:	f7fe fb39 	bl	80005f8 <__aeabi_dmul>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	4b1e      	ldr	r3, [pc, #120]	@ (800200c <MLX90640_GetTa+0x124>)
 8001f94:	f7fe f97a 	bl	800028c <__adddf3>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	f7fe fc54 	bl	800084c <__aeabi_ddiv>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4614      	mov	r4, r2
 8001faa:	461d      	mov	r5, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	899b      	ldrh	r3, [r3, #12]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fab7 	bl	8000524 <__aeabi_i2d>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4620      	mov	r0, r4
 8001fbc:	4629      	mov	r1, r5
 8001fbe:	f7fe f963 	bl	8000288 <__aeabi_dsub>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f7fe fe0d 	bl	8000be8 <__aeabi_d2f>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	60bb      	str	r3, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fd8:	edd7 6a02 	vldr	s13, [r7, #8]
 8001fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001fe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fe8:	edc7 7a02 	vstr	s15, [r7, #8]

    return ta;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	ee07 3a90 	vmov	s15, r3
}
 8001ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ffe:	bf00      	nop
 8002000:	66666666 	.word	0x66666666
 8002004:	400a6666 	.word	0x400a6666
 8002008:	48800000 	.word	0x48800000
 800200c:	3ff00000 	.word	0x3ff00000

08002010 <ExtractVDDParameters>:
}

//------------------------------------------------------------------------------

static void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
    int8_t kVdd;
    int16_t vdd25;

    kVdd = MLX90640_MS_BYTE(eeData[51]);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3366      	adds	r3, #102	@ 0x66
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	b29b      	uxth	r3, r3
 8002024:	73fb      	strb	r3, [r7, #15]

    vdd25 = MLX90640_LS_BYTE(eeData[51]);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3366      	adds	r3, #102	@ 0x66
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b21b      	sxth	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8002032:	89bb      	ldrh	r3, [r7, #12]
 8002034:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002038:	b29b      	uxth	r3, r3
 800203a:	015b      	lsls	r3, r3, #5
 800203c:	b29b      	uxth	r3, r3
 800203e:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8002042:	b29b      	uxth	r3, r3
 8002044:	81bb      	strh	r3, [r7, #12]

    mlx90640->kVdd = 32 * kVdd;
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	b29b      	uxth	r3, r3
 800204c:	015b      	lsls	r3, r3, #5
 800204e:	b29b      	uxth	r3, r3
 8002050:	b21a      	sxth	r2, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	89ba      	ldrh	r2, [r7, #12]
 800205a:	805a      	strh	r2, [r3, #2]
}
 800205c:	bf00      	nop
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

static void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;

    KvPTAT = (eeData[50] & MLX90640_MSBITS_6_MASK) >> 10;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3364      	adds	r3, #100	@ 0x64
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	0a9b      	lsrs	r3, r3, #10
 800207a:	b29b      	uxth	r3, r3
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002084:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 8002088:	edd7 7a05 	vldr	s15, [r7, #20]
 800208c:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8002090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002098:	dd07      	ble.n	80020aa <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 800209a:	edd7 7a05 	vldr	s15, [r7, #20]
 800209e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002168 <ExtractPTATParameters+0x100>
 80020a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020a6:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 80020aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80020ae:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 800216c <ExtractPTATParameters+0x104>
 80020b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020b6:	edc7 7a05 	vstr	s15, [r7, #20]

    KtPTAT = eeData[50] & MLX90640_LSBITS_10_MASK;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3364      	adds	r3, #100	@ 0x64
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020c4:	ee07 3a90 	vmov	s15, r3
 80020c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020cc:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 80020d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80020d4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002170 <ExtractPTATParameters+0x108>
 80020d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e0:	dd07      	ble.n	80020f2 <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 80020e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80020e6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002174 <ExtractPTATParameters+0x10c>
 80020ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020ee:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 80020f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80020f6:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80020fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020fe:	edc7 7a04 	vstr	s15, [r7, #16]

    vPTAT25 = eeData[49];
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3362      	adds	r3, #98	@ 0x62
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	81fb      	strh	r3, [r7, #14]

    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3320      	adds	r3, #32
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fa05 	bl	8000524 <__aeabi_i2d>
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <ExtractPTATParameters+0x110>)
 8002120:	f7fe fb94 	bl	800084c <__aeabi_ddiv>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <ExtractPTATParameters+0x114>)
 8002132:	f7fe f8ab 	bl	800028c <__adddf3>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f7fe fd53 	bl	8000be8 <__aeabi_d2f>
 8002142:	4603      	mov	r3, r0
 8002144:	60bb      	str	r3, [r7, #8]

    mlx90640->KvPTAT = KvPTAT;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 8002152:	89fa      	ldrh	r2, [r7, #14]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	611a      	str	r2, [r3, #16]
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	42800000 	.word	0x42800000
 800216c:	45800000 	.word	0x45800000
 8002170:	43ff8000 	.word	0x43ff8000
 8002174:	44800000 	.word	0x44800000
 8002178:	40d00000 	.word	0x40d00000
 800217c:	40200000 	.word	0x40200000

08002180 <ExtractGainParameters>:

//------------------------------------------------------------------------------

static void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
    mlx90640->gainEE = (int16_t)eeData[48];;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3360      	adds	r3, #96	@ 0x60
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	b21a      	sxth	r2, r3
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	829a      	strh	r2, [r3, #20]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <ExtractTgcParameters>:

//------------------------------------------------------------------------------

static void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
    mlx90640->tgc = (int8_t)MLX90640_LS_BYTE(eeData[60]) / 32.0f;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3378      	adds	r3, #120	@ 0x78
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	b25b      	sxtb	r3, r3
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021be:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80021d8 <ExtractTgcParameters+0x34>
 80021c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	42000000 	.word	0x42000000

080021dc <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

static void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3370      	adds	r3, #112	@ 0x70
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	131b      	asrs	r3, r3, #12
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	73fb      	strb	r3, [r7, #15]

    mlx90640->resolutionEE = resolutionEE;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

static void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
    mlx90640->KsTa = (int8_t)MLX90640_MS_BYTE(eeData[60]) / 8192.0f;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3378      	adds	r3, #120	@ 0x78
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	b29b      	uxth	r3, r3
 8002220:	b25b      	sxtb	r3, r3
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800222a:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002244 <ExtractKsTaParameters+0x38>
 800222e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	46000000 	.word	0x46000000

08002248 <ExtractKsToParameters>:

//------------------------------------------------------------------------------

static void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
    int32_t KsToScale;
    int8_t step;

    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	337e      	adds	r3, #126	@ 0x7e
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	131b      	asrs	r3, r3, #12
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	0092      	lsls	r2, r2, #2
 8002266:	4413      	add	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	b2db      	uxtb	r3, r3
 800226c:	73fb      	strb	r3, [r7, #15]

    mlx90640->ct[0] = -40;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f64f 72d8 	movw	r2, #65496	@ 0xffd8
 8002274:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    mlx90640->ct[1] = 0;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    mlx90640->ct[2] = MLX90640_NIBBLE2(eeData[63]);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	337e      	adds	r3, #126	@ 0x7e
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	111b      	asrs	r3, r3, #4
 8002288:	b21b      	sxth	r3, r3
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	b21a      	sxth	r2, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mlx90640->ct[3] = MLX90640_NIBBLE3(eeData[63]);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	337e      	adds	r3, #126	@ 0x7e
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	121b      	asrs	r3, r3, #8
 800229e:	b21b      	sxth	r3, r3
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	b21a      	sxth	r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

    mlx90640->ct[2] = mlx90640->ct[2]*step;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	fb12 f303 	smulbb	r3, r2, r3
 80022be:	b29b      	uxth	r3, r3
 80022c0:	b21a      	sxth	r2, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 80022d6:	b299      	uxth	r1, r3
 80022d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	fb11 f303 	smulbb	r3, r1, r3
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	b21a      	sxth	r2, r3
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    mlx90640->ct[4] = 400;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80022f6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

    KsToScale = MLX90640_NIBBLE1(eeData[63]) + 8;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	337e      	adds	r3, #126	@ 0x7e
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	3308      	adds	r3, #8
 8002306:	60bb      	str	r3, [r7, #8]
    KsToScale = 1UL << KsToScale;
 8002308:	2201      	movs	r2, #1
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	60bb      	str	r3, [r7, #8]

    mlx90640->ksTo[0] = (int8_t)MLX90640_LS_BYTE(eeData[61]) / (float)KsToScale;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	337a      	adds	r3, #122	@ 0x7a
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b25b      	sxtb	r3, r3
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800232c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    mlx90640->ksTo[1] = (int8_t)MLX90640_MS_BYTE(eeData[61]) / (float)KsToScale;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	337a      	adds	r3, #122	@ 0x7a
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	b29b      	uxth	r3, r3
 8002340:	b25b      	sxtb	r3, r3
 8002342:	ee07 3a90 	vmov	s15, r3
 8002346:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    mlx90640->ksTo[2] = (int8_t)MLX90640_LS_BYTE(eeData[62]) / (float)KsToScale;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	337c      	adds	r3, #124	@ 0x7c
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	b25b      	sxtb	r3, r3
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	ee07 3a90 	vmov	s15, r3
 8002374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    mlx90640->ksTo[3] = (int8_t)MLX90640_MS_BYTE(eeData[62]) / (float)KsToScale;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	337c      	adds	r3, #124	@ 0x7c
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	b29b      	uxth	r3, r3
 800238c:	b25b      	sxtb	r3, r3
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    mlx90640->ksTo[4] = -0.0002;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	4a03      	ldr	r2, [pc, #12]	@ (80023bc <ExtractKsToParameters+0x174>)
 80023ae:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	b951b717 	.word	0xb951b717

080023c0 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

static void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80023c0:	b5b0      	push	{r4, r5, r7, lr}
 80023c2:	f5ad 6d52 	sub.w	sp, sp, #3360	@ 0xd20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80023cc:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 80023d0:	6018      	str	r0, [r3, #0]
 80023d2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80023d6:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 80023da:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;


    accRemScale = MLX90640_NIBBLE1(eeData[32]);
 80023e2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80023e6:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3340      	adds	r3, #64	@ 0x40
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	f887 3cf3 	strb.w	r3, [r7, #3315]	@ 0xcf3
    accColumnScale = MLX90640_NIBBLE2(eeData[32]);
 80023fa:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80023fe:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3340      	adds	r3, #64	@ 0x40
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	111b      	asrs	r3, r3, #4
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f003 030f 	and.w	r3, r3, #15
 8002410:	f887 3cf2 	strb.w	r3, [r7, #3314]	@ 0xcf2
    accRowScale = MLX90640_NIBBLE3(eeData[32]);
 8002414:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002418:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3340      	adds	r3, #64	@ 0x40
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	121b      	asrs	r3, r3, #8
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	f887 3cf1 	strb.w	r3, [r7, #3313]	@ 0xcf1
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 30;
 800242e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002432:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	3340      	adds	r3, #64	@ 0x40
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	0b1b      	lsrs	r3, r3, #12
 800243e:	b29b      	uxth	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	331e      	adds	r3, #30
 8002444:	f887 3d1f 	strb.w	r3, [r7, #3359]	@ 0xd1f
    alphaRef = eeData[33];
 8002448:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800244c:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3342      	adds	r3, #66	@ 0x42
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	f8c7 3cec 	str.w	r3, [r7, #3308]	@ 0xcec

    for(int i = 0; i < 6; i++)
 800245a:	2300      	movs	r3, #0
 800245c:	f8c7 3d14 	str.w	r3, [r7, #3348]	@ 0xd14
 8002460:	e062      	b.n	8002528 <ExtractAlphaParameters+0x168>
    {
        p = i * 4;
 8002462:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
        accRow[p + 0] = MLX90640_NIBBLE1(eeData[34 + i]);
 800246c:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 8002470:	3322      	adds	r3, #34	@ 0x22
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8002478:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	4413      	add	r3, r2
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	f003 020f 	and.w	r2, r3, #15
 8002486:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 8002490:	443b      	add	r3, r7
 8002492:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = MLX90640_NIBBLE2(eeData[34 + i]);
 8002496:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 800249a:	3322      	adds	r3, #34	@ 0x22
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80024a2:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	4413      	add	r3, r2
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	111a      	asrs	r2, r3, #4
 80024ae:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80024b2:	3301      	adds	r3, #1
 80024b4:	f002 020f 	and.w	r2, r2, #15
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 80024be:	443b      	add	r3, r7
 80024c0:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = MLX90640_NIBBLE3(eeData[34 + i]);
 80024c4:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 80024c8:	3322      	adds	r3, #34	@ 0x22
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80024d0:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	121a      	asrs	r2, r3, #8
 80024dc:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80024e0:	3302      	adds	r3, #2
 80024e2:	f002 020f 	and.w	r2, r2, #15
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 80024ec:	443b      	add	r3, r7
 80024ee:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = MLX90640_NIBBLE4(eeData[34 + i]);
 80024f2:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 80024f6:	3322      	adds	r3, #34	@ 0x22
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80024fe:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	4413      	add	r3, r2
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	0b1b      	lsrs	r3, r3, #12
 800250a:	b29a      	uxth	r2, r3
 800250c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002510:	3303      	adds	r3, #3
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 8002518:	443b      	add	r3, r7
 800251a:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 800251e:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 8002522:	3301      	adds	r3, #1
 8002524:	f8c7 3d14 	str.w	r3, [r7, #3348]	@ 0xd14
 8002528:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 800252c:	2b05      	cmp	r3, #5
 800252e:	dd98      	ble.n	8002462 <ExtractAlphaParameters+0xa2>
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 3d10 	str.w	r3, [r7, #3344]	@ 0xd10
 8002536:	e020      	b.n	800257a <ExtractAlphaParameters+0x1ba>
    {
        if (accRow[i] > 7)
 8002538:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 8002542:	443b      	add	r3, r7
 8002544:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8002548:	2b07      	cmp	r3, #7
 800254a:	dd11      	ble.n	8002570 <ExtractAlphaParameters+0x1b0>
        {
            accRow[i] = accRow[i] - 16;
 800254c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 8002556:	443b      	add	r3, r7
 8002558:	f853 3c94 	ldr.w	r3, [r3, #-148]
 800255c:	f1a3 0210 	sub.w	r2, r3, #16
 8002560:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 800256a:	443b      	add	r3, r7
 800256c:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002570:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 8002574:	3301      	adds	r3, #1
 8002576:	f8c7 3d10 	str.w	r3, [r7, #3344]	@ 0xd10
 800257a:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 800257e:	2b17      	cmp	r3, #23
 8002580:	ddda      	ble.n	8002538 <ExtractAlphaParameters+0x178>
        }
    }

    for(int i = 0; i < 8; i++)
 8002582:	2300      	movs	r3, #0
 8002584:	f8c7 3d0c 	str.w	r3, [r7, #3340]	@ 0xd0c
 8002588:	e062      	b.n	8002650 <ExtractAlphaParameters+0x290>
    {
        p = i * 4;
 800258a:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
        accColumn[p + 0] = MLX90640_NIBBLE1(eeData[40 + i]);
 8002594:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 8002598:	3328      	adds	r3, #40	@ 0x28
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80025a0:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	f003 010f 	and.w	r1, r3, #15
 80025ae:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80025b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025b6:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 80025ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = MLX90640_NIBBLE2(eeData[40 + i]);
 80025be:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 80025c2:	3328      	adds	r3, #40	@ 0x28
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80025ca:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	4413      	add	r3, r2
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	111b      	asrs	r3, r3, #4
 80025d6:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 80025da:	3201      	adds	r2, #1
 80025dc:	f003 010f 	and.w	r1, r3, #15
 80025e0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80025e4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = MLX90640_NIBBLE3(eeData[40 + i]);
 80025ec:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 80025f0:	3328      	adds	r3, #40	@ 0x28
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80025f8:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80025fc:	6812      	ldr	r2, [r2, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	121b      	asrs	r3, r3, #8
 8002604:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 8002608:	3202      	adds	r2, #2
 800260a:	f003 010f 	and.w	r1, r3, #15
 800260e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002612:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = MLX90640_NIBBLE4(eeData[40 + i]);
 800261a:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 800261e:	3328      	adds	r3, #40	@ 0x28
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8002626:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	4413      	add	r3, r2
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	0b1b      	lsrs	r3, r3, #12
 8002632:	b299      	uxth	r1, r3
 8002634:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002638:	1cda      	adds	r2, r3, #3
 800263a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800263e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8002646:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 800264a:	3301      	adds	r3, #1
 800264c:	f8c7 3d0c 	str.w	r3, [r7, #3340]	@ 0xd0c
 8002650:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 8002654:	2b07      	cmp	r3, #7
 8002656:	dd98      	ble.n	800258a <ExtractAlphaParameters+0x1ca>
    }

    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 3d08 	str.w	r3, [r7, #3336]	@ 0xd08
 800265e:	e020      	b.n	80026a2 <ExtractAlphaParameters+0x2e2>
    {
        if (accColumn[i] > 7)
 8002660:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002664:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002668:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	@ 0xd08
 800266c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002670:	2b07      	cmp	r3, #7
 8002672:	dd11      	ble.n	8002698 <ExtractAlphaParameters+0x2d8>
        {
            accColumn[i] = accColumn[i] - 16;
 8002674:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002678:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800267c:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	@ 0xd08
 8002680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002684:	f1a3 0110 	sub.w	r1, r3, #16
 8002688:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800268c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002690:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	@ 0xd08
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 8002698:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	@ 0xd08
 800269c:	3301      	adds	r3, #1
 800269e:	f8c7 3d08 	str.w	r3, [r7, #3336]	@ 0xd08
 80026a2:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	@ 0xd08
 80026a6:	2b1f      	cmp	r3, #31
 80026a8:	ddda      	ble.n	8002660 <ExtractAlphaParameters+0x2a0>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 3d04 	str.w	r3, [r7, #3332]	@ 0xd04
 80026b0:	e13e      	b.n	8002930 <ExtractAlphaParameters+0x570>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8c7 3d00 	str.w	r3, [r7, #3328]	@ 0xd00
 80026b8:	e130      	b.n	800291c <ExtractAlphaParameters+0x55c>
        {
            p = 32 * i +j;
 80026ba:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 80026be:	015b      	lsls	r3, r3, #5
 80026c0:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	@ 0xd00
 80026c4:	4413      	add	r3, r2
 80026c6:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 80026ca:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80026ce:	3340      	adds	r3, #64	@ 0x40
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80026d6:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	111b      	asrs	r3, r3, #4
 80026e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ee:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80026f2:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80026f6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 8002702:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002706:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 800270a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 800271a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002722:	dd17      	ble.n	8002754 <ExtractAlphaParameters+0x394>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 8002724:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002728:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 800272c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	ed9f 7ae3 	vldr	s14, [pc, #908]	@ 8002ac8 <ExtractAlphaParameters+0x708>
 800273c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002740:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002744:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002748:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8002754:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002758:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 800275c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	ed93 7a00 	vldr	s14, [r3]
 8002768:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	@ 0xcf3
 800276c:	2201      	movs	r2, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800277a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002782:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002786:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8002792:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 800279c:	443b      	add	r3, r7
 800279e:	f853 2c94 	ldr.w	r2, [r3, #-148]
 80027a2:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	@ 0xcf1
 80027a6:	409a      	lsls	r2, r3
 80027a8:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	@ 0xcec
 80027ac:	441a      	add	r2, r3
 80027ae:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80027b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027b6:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	@ 0xd00
 80027ba:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80027be:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	@ 0xcf2
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	ee07 3a90 	vmov	s15, r3
 80027cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027d0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80027d4:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80027d8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	edd3 7a00 	vldr	s15, [r3]
 80027e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80027ec:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80027f0:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
 80027fc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002800:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002804:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd fe9a 	bl	8000548 <__aeabi_f2d>
 8002814:	4604      	mov	r4, r0
 8002816:	460d      	mov	r5, r1
 8002818:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	@ 0xd1f
 800281c:	4618      	mov	r0, r3
 800281e:	f7fd fe71 	bl	8000504 <__aeabi_ui2d>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	ec43 2b11 	vmov	d1, r2, r3
 800282a:	ed9f 0ba1 	vldr	d0, [pc, #644]	@ 8002ab0 <ExtractAlphaParameters+0x6f0>
 800282e:	f007 fc4d 	bl	800a0cc <pow>
 8002832:	ec53 2b10 	vmov	r2, r3, d0
 8002836:	4620      	mov	r0, r4
 8002838:	4629      	mov	r1, r5
 800283a:	f7fe f807 	bl	800084c <__aeabi_ddiv>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	f7fe f9cf 	bl	8000be8 <__aeabi_d2f>
 800284a:	4601      	mov	r1, r0
 800284c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002850:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002854:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	6019      	str	r1, [r3, #0]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 800285e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002862:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002866:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	ed93 7a00 	vldr	s14, [r3]
 8002872:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002876:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	edd3 6a06 	vldr	s13, [r3, #24]
 8002880:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002884:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800288e:	ed93 6a94 	vldr	s12, [r3, #592]	@ 0x250
 8002892:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002896:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a0:	edd3 7a95 	vldr	s15, [r3, #596]	@ 0x254
 80028a4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80028a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028ac:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80028b0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80028bc:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80028c0:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 80028cc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80028d0:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80028d4:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fd fe32 	bl	8000548 <__aeabi_f2d>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	a173      	add	r1, pc, #460	@ (adr r1, 8002ab8 <ExtractAlphaParameters+0x6f8>)
 80028ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028ee:	f7fd ffad 	bl	800084c <__aeabi_ddiv>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	f7fe f975 	bl	8000be8 <__aeabi_d2f>
 80028fe:	4601      	mov	r1, r0
 8002900:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002904:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002908:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8002912:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	@ 0xd00
 8002916:	3301      	adds	r3, #1
 8002918:	f8c7 3d00 	str.w	r3, [r7, #3328]	@ 0xd00
 800291c:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	@ 0xd00
 8002920:	2b1f      	cmp	r3, #31
 8002922:	f77f aeca 	ble.w	80026ba <ExtractAlphaParameters+0x2fa>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002926:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 800292a:	3301      	adds	r3, #1
 800292c:	f8c7 3d04 	str.w	r3, [r7, #3332]	@ 0xd04
 8002930:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 8002934:	2b17      	cmp	r3, #23
 8002936:	f77f aebc 	ble.w	80026b2 <ExtractAlphaParameters+0x2f2>
        }
    }

    temp = alphaTemp[0];
 800293a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800293e:	f6a3 5314 	subw	r3, r3, #3348	@ 0xd14
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f607 5218 	addw	r2, r7, #3352	@ 0xd18
 8002948:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 800294a:	2301      	movs	r3, #1
 800294c:	f8c7 3cfc 	str.w	r3, [r7, #3324]	@ 0xcfc
 8002950:	e023      	b.n	800299a <ExtractAlphaParameters+0x5da>
    {
        if (alphaTemp[i] > temp)
 8002952:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002956:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 800295a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 800296a:	ed93 7a00 	vldr	s14, [r3]
 800296e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002976:	d50b      	bpl.n	8002990 <ExtractAlphaParameters+0x5d0>
        {
            temp = alphaTemp[i];
 8002978:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800297c:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002980:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f607 5218 	addw	r2, r7, #3352	@ 0xd18
 800298e:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8002990:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 8002994:	3301      	adds	r3, #1
 8002996:	f8c7 3cfc 	str.w	r3, [r7, #3324]	@ 0xcfc
 800299a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 800299e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029a2:	dbd6      	blt.n	8002952 <ExtractAlphaParameters+0x592>
        }
    }

    alphaScale = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 3d1f 	strb.w	r3, [r7, #3359]	@ 0xd1f
    while(temp < 32767.4)
 80029aa:	e00e      	b.n	80029ca <ExtractAlphaParameters+0x60a>
    {
        temp = temp*2;
 80029ac:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029b8:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 80029bc:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 80029c0:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	@ 0xd1f
 80029c4:	3301      	adds	r3, #1
 80029c6:	f887 3d1f 	strb.w	r3, [r7, #3359]	@ 0xd1f
    while(temp < 32767.4)
 80029ca:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	f7fd fdba 	bl	8000548 <__aeabi_f2d>
 80029d4:	a33a      	add	r3, pc, #232	@ (adr r3, 8002ac0 <ExtractAlphaParameters+0x700>)
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	f7fe f87f 	bl	8000adc <__aeabi_dcmplt>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e3      	bne.n	80029ac <ExtractAlphaParameters+0x5ec>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 3cf8 	str.w	r3, [r7, #3320]	@ 0xcf8
 80029ea:	e04d      	b.n	8002a88 <ExtractAlphaParameters+0x6c8>
    {
        temp = alphaTemp[i] * POW2(alphaScale);
 80029ec:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80029f0:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80029f4:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fd fda2 	bl	8000548 <__aeabi_f2d>
 8002a04:	4604      	mov	r4, r0
 8002a06:	460d      	mov	r5, r1
 8002a08:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	@ 0xd1f
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fd79 	bl	8000504 <__aeabi_ui2d>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	ec43 2b11 	vmov	d1, r2, r3
 8002a1a:	ed9f 0b25 	vldr	d0, [pc, #148]	@ 8002ab0 <ExtractAlphaParameters+0x6f0>
 8002a1e:	f007 fb55 	bl	800a0cc <pow>
 8002a22:	ec53 2b10 	vmov	r2, r3, d0
 8002a26:	4620      	mov	r0, r4
 8002a28:	4629      	mov	r1, r5
 8002a2a:	f7fd fde5 	bl	80005f8 <__aeabi_dmul>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7fe f8d7 	bl	8000be8 <__aeabi_d2f>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f607 5218 	addw	r2, r7, #3352	@ 0xd18
 8002a40:	6013      	str	r3, [r2, #0]
        mlx90640->alpha[i] = (temp + 0.5);
 8002a42:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	f7fd fd7e 	bl	8000548 <__aeabi_f2d>
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	4b1e      	ldr	r3, [pc, #120]	@ (8002acc <ExtractAlphaParameters+0x70c>)
 8002a52:	f7fd fc1b 	bl	800028c <__adddf3>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f7fe f8a3 	bl	8000ba8 <__aeabi_d2uiz>
 8002a62:	4603      	mov	r3, r0
 8002a64:	b299      	uxth	r1, r3
 8002a66:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002a6a:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8002a74:	3324      	adds	r3, #36	@ 0x24
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	460a      	mov	r2, r1
 8002a7c:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8002a7e:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8002a82:	3301      	adds	r3, #1
 8002a84:	f8c7 3cf8 	str.w	r3, [r7, #3320]	@ 0xcf8
 8002a88:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8002a8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a90:	dbac      	blt.n	80029ec <ExtractAlphaParameters+0x62c>

    }

    mlx90640->alphaScale = alphaScale;
 8002a92:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002a96:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	@ 0xd1f
 8002aa0:	f883 264a 	strb.w	r2, [r3, #1610]	@ 0x64a

}
 8002aa4:	bf00      	nop
 8002aa6:	f507 6752 	add.w	r7, r7, #3360	@ 0xd20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bdb0      	pop	{r4, r5, r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	00000000 	.word	0x00000000
 8002ab4:	40000000 	.word	0x40000000
 8002ab8:	a0b5ed8d 	.word	0xa0b5ed8d
 8002abc:	3eb0c6f7 	.word	0x3eb0c6f7
 8002ac0:	9999999a 	.word	0x9999999a
 8002ac4:	40dfffd9 	.word	0x40dfffd9
 8002ac8:	42800000 	.word	0x42800000
 8002acc:	3fe00000 	.word	0x3fe00000

08002ad0 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

static void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b0c5      	sub	sp, #276	@ 0x114
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ada:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ade:	6018      	str	r0, [r3, #0]
 8002ae0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ae4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ae8:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;


    occRemScale = MLX90640_NIBBLE1(eeData[16]);
 8002af0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002af4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3320      	adds	r3, #32
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3
    occColumnScale = MLX90640_NIBBLE2(eeData[16]);
 8002b08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3320      	adds	r3, #32
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	111b      	asrs	r3, r3, #4
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	f887 30f2 	strb.w	r3, [r7, #242]	@ 0xf2
    occRowScale = MLX90640_NIBBLE3(eeData[16]);
 8002b22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3320      	adds	r3, #32
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	121b      	asrs	r3, r3, #8
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	f887 30f1 	strb.w	r3, [r7, #241]	@ 0xf1
    offsetRef = (int16_t)eeData[17];
 8002b3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b40:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3322      	adds	r3, #34	@ 0x22
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee

    for(int i = 0; i < 6; i++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b54:	e062      	b.n	8002c1c <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 8002b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        occRow[p + 0] = MLX90640_NIBBLE1(eeData[18 + i]);
 8002b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b64:	3312      	adds	r3, #18
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002b6c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	f003 020f 	and.w	r2, r3, #15
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002b84:	443b      	add	r3, r7
 8002b86:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = MLX90640_NIBBLE2(eeData[18 + i]);
 8002b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b8e:	3312      	adds	r3, #18
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002b96:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	111a      	asrs	r2, r3, #4
 8002ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f002 020f 	and.w	r2, r2, #15
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002bb2:	443b      	add	r3, r7
 8002bb4:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = MLX90640_NIBBLE3(eeData[18 + i]);
 8002bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bbc:	3312      	adds	r3, #18
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002bc4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	121a      	asrs	r2, r3, #8
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	f002 020f 	and.w	r2, r2, #15
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002be0:	443b      	add	r3, r7
 8002be2:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = MLX90640_NIBBLE4(eeData[18 + i]);
 8002be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bea:	3312      	adds	r3, #18
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002bf2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	0b1b      	lsrs	r3, r3, #12
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c04:	3303      	adds	r3, #3
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002c0c:	443b      	add	r3, r7
 8002c0e:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 8002c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c16:	3301      	adds	r3, #1
 8002c18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	dd98      	ble.n	8002b56 <ExtractOffsetParameters+0x86>
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002c2a:	e020      	b.n	8002c6e <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 8002c2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002c36:	443b      	add	r3, r7
 8002c38:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002c3c:	2b07      	cmp	r3, #7
 8002c3e:	dd11      	ble.n	8002c64 <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 8002c40:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002c4a:	443b      	add	r3, r7
 8002c4c:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002c50:	f1a3 0210 	sub.w	r2, r3, #16
 8002c54:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002c5e:	443b      	add	r3, r7
 8002c60:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002c64:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c68:	3301      	adds	r3, #1
 8002c6a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002c6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c72:	2b17      	cmp	r3, #23
 8002c74:	ddda      	ble.n	8002c2c <ExtractOffsetParameters+0x15c>
        }
    }

    for(int i = 0; i < 8; i++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c7c:	e062      	b.n	8002d44 <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 8002c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        occColumn[p + 0] = MLX90640_NIBBLE1(eeData[24 + i]);
 8002c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c8c:	3318      	adds	r3, #24
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002c94:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	f003 010f 	and.w	r1, r3, #15
 8002ca2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ca6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002caa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = MLX90640_NIBBLE2(eeData[24 + i]);
 8002cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cb6:	3318      	adds	r3, #24
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002cbe:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	111b      	asrs	r3, r3, #4
 8002cca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002cce:	3201      	adds	r2, #1
 8002cd0:	f003 010f 	and.w	r1, r3, #15
 8002cd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002cd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = MLX90640_NIBBLE3(eeData[24 + i]);
 8002ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ce4:	3318      	adds	r3, #24
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002cec:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	121b      	asrs	r3, r3, #8
 8002cf8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002cfc:	3202      	adds	r2, #2
 8002cfe:	f003 010f 	and.w	r1, r3, #15
 8002d02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = MLX90640_NIBBLE4(eeData[24 + i]);
 8002d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d12:	3318      	adds	r3, #24
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002d1a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	4413      	add	r3, r2
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	0b1b      	lsrs	r3, r3, #12
 8002d26:	b299      	uxth	r1, r3
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d2c:	1cda      	adds	r2, r3, #3
 8002d2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8002d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d48:	2b07      	cmp	r3, #7
 8002d4a:	dd98      	ble.n	8002c7e <ExtractOffsetParameters+0x1ae>
    }

    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002d52:	e020      	b.n	8002d96 <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 8002d54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d5c:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d64:	2b07      	cmp	r3, #7
 8002d66:	dd11      	ble.n	8002d8c <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 8002d68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d70:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d78:	f1a3 0110 	sub.w	r1, r3, #16
 8002d7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002d80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d84:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 8002d8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002d90:	3301      	adds	r3, #1
 8002d92:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002d96:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002d9a:	2b1f      	cmp	r3, #31
 8002d9c:	ddda      	ble.n	8002d54 <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002da4:	e0c0      	b.n	8002f28 <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002dac:	e0b2      	b.n	8002f14 <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 8002dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002db2:	015b      	lsls	r3, r3, #5
 8002db4:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8002db8:	4413      	add	r3, r2
 8002dba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & MLX90640_MSBITS_6_MASK) >> 10;
 8002dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc2:	3340      	adds	r3, #64	@ 0x40
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002dca:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	0a9b      	lsrs	r3, r3, #10
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	b219      	sxth	r1, r3
 8002dda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002dde:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de8:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	460a      	mov	r2, r1
 8002df2:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 8002df4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002df8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e02:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e0e:	2b1f      	cmp	r3, #31
 8002e10:	dd1d      	ble.n	8002e4e <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 8002e12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e16:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e20:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b40      	subs	r3, #64	@ 0x40
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	b219      	sxth	r1, r3
 8002e34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e42:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	460a      	mov	r2, r1
 8002e4c:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 8002e4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e52:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e5c:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	b219      	sxth	r1, r3
 8002e74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e82:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	460a      	mov	r2, r1
 8002e8c:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 8002e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002e98:	443b      	add	r3, r7
 8002e9a:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8002e9e:	f897 30f1 	ldrb.w	r3, [r7, #241]	@ 0xf1
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8002eac:	4413      	add	r3, r2
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002eb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002eb8:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8002ebc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002ec0:	f897 30f2 	ldrb.w	r3, [r7, #242]	@ 0xf2
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ed2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ed6:	6819      	ldr	r1, [r3, #0]
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002edc:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	b219      	sxth	r1, r3
 8002ef0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ef4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efe:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	460a      	mov	r2, r1
 8002f08:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8002f0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002f14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f18:	2b1f      	cmp	r3, #31
 8002f1a:	f77f af48 	ble.w	8002dae <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f22:	3301      	adds	r3, #1
 8002f24:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f2c:	2b17      	cmp	r3, #23
 8002f2e:	f77f af3a 	ble.w	8002da6 <ExtractOffsetParameters+0x2d6>
        }
    }
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	0000      	movs	r0, r0
 8002f44:	0000      	movs	r0, r0
	...

08002f48 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

static void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002f48:	b5b0      	push	{r4, r5, r7, lr}
 8002f4a:	f5ad 6d43 	sub.w	sp, sp, #3120	@ 0xc30
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002f54:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002f58:	6018      	str	r0, [r3, #0]
 8002f5a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002f5e:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 8002f62:	6019      	str	r1, [r3, #0]
    int p = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;

    KtaRC[0] = (int8_t)MLX90640_MS_BYTE(eeData[54]);;
 8002f6a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002f6e:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	336c      	adds	r3, #108	@ 0x6c
 8002f76:	881b      	ldrh	r3, [r3, #0]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	b25b      	sxtb	r3, r3
 8002f7e:	f887 3c0c 	strb.w	r3, [r7, #3084]	@ 0xc0c
    KtaRC[2] = (int8_t)MLX90640_LS_BYTE(eeData[54]);;
 8002f82:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002f86:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	336c      	adds	r3, #108	@ 0x6c
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b25b      	sxtb	r3, r3
 8002f92:	f887 3c0e 	strb.w	r3, [r7, #3086]	@ 0xc0e
    KtaRC[1] = (int8_t)MLX90640_MS_BYTE(eeData[55]);;
 8002f96:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002f9a:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	336e      	adds	r3, #110	@ 0x6e
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	b25b      	sxtb	r3, r3
 8002faa:	f887 3c0d 	strb.w	r3, [r7, #3085]	@ 0xc0d
    KtaRC[3] = (int8_t)MLX90640_LS_BYTE(eeData[55]);;
 8002fae:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002fb2:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	336e      	adds	r3, #110	@ 0x6e
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	b25b      	sxtb	r3, r3
 8002fbe:	f887 3c0f 	strb.w	r3, [r7, #3087]	@ 0xc0f

    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
 8002fc2:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002fc6:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3370      	adds	r3, #112	@ 0x70
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	111b      	asrs	r3, r3, #4
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	3308      	adds	r3, #8
 8002fdc:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    ktaScale2 = MLX90640_NIBBLE1(eeData[56]);
 8002fe0:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002fe4:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3370      	adds	r3, #112	@ 0x70
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	f887 3c13 	strb.w	r3, [r7, #3091]	@ 0xc13

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f8c7 3c24 	str.w	r3, [r7, #3108]	@ 0xc24
 8002ffe:	e0ed      	b.n	80031dc <ExtractKtaPixelParameters+0x294>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003000:	2300      	movs	r3, #0
 8003002:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 8003006:	e0df      	b.n	80031c8 <ExtractKtaPixelParameters+0x280>
        {
            p = 32 * i +j;
 8003008:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	@ 0xc24
 800300c:	015b      	lsls	r3, r3, #5
 800300e:	f8d7 2c20 	ldr.w	r2, [r7, #3104]	@ 0xc20
 8003012:	4413      	add	r3, r2
 8003014:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
            split = 2*(p/32 - (p/64)*2) + p%2;
 8003018:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 800301c:	2b00      	cmp	r3, #0
 800301e:	da00      	bge.n	8003022 <ExtractKtaPixelParameters+0xda>
 8003020:	331f      	adds	r3, #31
 8003022:	115b      	asrs	r3, r3, #5
 8003024:	461a      	mov	r2, r3
 8003026:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 800302a:	2b00      	cmp	r3, #0
 800302c:	da00      	bge.n	8003030 <ExtractKtaPixelParameters+0xe8>
 800302e:	333f      	adds	r3, #63	@ 0x3f
 8003030:	119b      	asrs	r3, r3, #6
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	b2da      	uxtb	r2, r3
 800303c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003040:	2b00      	cmp	r3, #0
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	bfb8      	it	lt
 8003048:	425b      	neglt	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	4413      	add	r3, r2
 800304e:	f887 3c12 	strb.w	r3, [r7, #3090]	@ 0xc12
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 8003052:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003056:	3340      	adds	r3, #64	@ 0x40
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	f507 6243 	add.w	r2, r7, #3120	@ 0xc30
 800305e:	f6a2 422c 	subw	r2, r2, #3116	@ 0xc2c
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	4413      	add	r3, r2
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	105b      	asrs	r3, r3, #1
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003076:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800307a:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 800307e:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 800308a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800308e:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003092:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80030a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030aa:	dd17      	ble.n	80030dc <ExtractKtaPixelParameters+0x194>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 80030ac:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80030b0:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 80030b4:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	edd3 7a00 	vldr	s15, [r3]
 80030c0:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80030c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030c8:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80030cc:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 80030d0:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 80030dc:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80030e0:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 80030e4:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	ed93 7a00 	vldr	s14, [r3]
 80030f0:	f897 3c13 	ldrb.w	r3, [r7, #3091]	@ 0xc13
 80030f4:	2201      	movs	r2, #1
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	ee07 3a90 	vmov	s15, r3
 80030fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003106:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800310a:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 800310e:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 800311a:	f897 3c12 	ldrb.w	r3, [r7, #3090]	@ 0xc12
 800311e:	f503 6343 	add.w	r3, r3, #3120	@ 0xc30
 8003122:	443b      	add	r3, r7
 8003124:	f913 3c24 	ldrsb.w	r3, [r3, #-36]
 8003128:	ee07 3a90 	vmov	s15, r3
 800312c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003130:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003134:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003138:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	edd3 7a00 	vldr	s15, [r3]
 8003144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003148:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800314c:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003150:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / POW2(ktaScale1);
 800315c:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003160:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003164:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd f9ea 	bl	8000548 <__aeabi_f2d>
 8003174:	4604      	mov	r4, r0
 8003176:	460d      	mov	r5, r1
 8003178:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd f9c1 	bl	8000504 <__aeabi_ui2d>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	ec43 2b11 	vmov	d1, r2, r3
 800318a:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 80033c0 <ExtractKtaPixelParameters+0x478>
 800318e:	f006 ff9d 	bl	800a0cc <pow>
 8003192:	ec53 2b10 	vmov	r2, r3, d0
 8003196:	4620      	mov	r0, r4
 8003198:	4629      	mov	r1, r5
 800319a:	f7fd fb57 	bl	800084c <__aeabi_ddiv>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4610      	mov	r0, r2
 80031a4:	4619      	mov	r1, r3
 80031a6:	f7fd fd1f 	bl	8000be8 <__aeabi_d2f>
 80031aa:	4601      	mov	r1, r0
 80031ac:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80031b0:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 80031b4:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80031be:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 80031c2:	3301      	adds	r3, #1
 80031c4:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 80031c8:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 80031cc:	2b1f      	cmp	r3, #31
 80031ce:	f77f af1b 	ble.w	8003008 <ExtractKtaPixelParameters+0xc0>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80031d2:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	@ 0xc24
 80031d6:	3301      	adds	r3, #1
 80031d8:	f8c7 3c24 	str.w	r3, [r7, #3108]	@ 0xc24
 80031dc:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	@ 0xc24
 80031e0:	2b17      	cmp	r3, #23
 80031e2:	f77f af0d 	ble.w	8003000 <ExtractKtaPixelParameters+0xb8>

        }
    }

    temp = fabs(ktaTemp[0]);
 80031e6:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80031ea:	f6a3 4324 	subw	r3, r3, #3108	@ 0xc24
 80031ee:	edd3 7a00 	vldr	s15, [r3]
 80031f2:	eef0 7ae7 	vabs.f32	s15, s15
 80031f6:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 80031fa:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 80031fe:	2301      	movs	r3, #1
 8003200:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 8003204:	e029      	b.n	800325a <ExtractKtaPixelParameters+0x312>
    {
        if (fabs(ktaTemp[i]) > temp)
 8003206:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800320a:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 800320e:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	eef0 7ae7 	vabs.f32	s15, s15
 800321e:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8003222:	ed93 7a00 	vldr	s14, [r3]
 8003226:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800322a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322e:	d50f      	bpl.n	8003250 <ExtractKtaPixelParameters+0x308>
        {
            temp = fabs(ktaTemp[i]);
 8003230:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003234:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8003238:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	edd3 7a00 	vldr	s15, [r3]
 8003244:	eef0 7ae7 	vabs.f32	s15, s15
 8003248:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 800324c:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003250:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8003254:	3301      	adds	r3, #1
 8003256:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 800325a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 800325e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003262:	dbd0      	blt.n	8003206 <ExtractKtaPixelParameters+0x2be>
        }
    }

    ktaScale1 = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    while(temp < 63.4)
 800326a:	e00e      	b.n	800328a <ExtractKtaPixelParameters+0x342>
    {
        temp = temp*2;
 800326c:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8003270:	edd3 7a00 	vldr	s15, [r3]
 8003274:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003278:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 800327c:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 8003280:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 8003284:	3301      	adds	r3, #1
 8003286:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    while(temp < 63.4)
 800328a:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 800328e:	6818      	ldr	r0, [r3, #0]
 8003290:	f7fd f95a 	bl	8000548 <__aeabi_f2d>
 8003294:	a34d      	add	r3, pc, #308	@ (adr r3, 80033cc <ExtractKtaPixelParameters+0x484>)
 8003296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329a:	f7fd fc1f 	bl	8000adc <__aeabi_dcmplt>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e3      	bne.n	800326c <ExtractKtaPixelParameters+0x324>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 80032aa:	e075      	b.n	8003398 <ExtractKtaPixelParameters+0x450>
    {
        temp = ktaTemp[i] * POW2(ktaScale1);
 80032ac:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80032b0:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 80032b4:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd f942 	bl	8000548 <__aeabi_f2d>
 80032c4:	4604      	mov	r4, r0
 80032c6:	460d      	mov	r5, r1
 80032c8:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd f919 	bl	8000504 <__aeabi_ui2d>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	ec43 2b11 	vmov	d1, r2, r3
 80032da:	ed9f 0b39 	vldr	d0, [pc, #228]	@ 80033c0 <ExtractKtaPixelParameters+0x478>
 80032de:	f006 fef5 	bl	800a0cc <pow>
 80032e2:	ec53 2b10 	vmov	r2, r3, d0
 80032e6:	4620      	mov	r0, r4
 80032e8:	4629      	mov	r1, r5
 80032ea:	f7fd f985 	bl	80005f8 <__aeabi_dmul>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	f7fd fc77 	bl	8000be8 <__aeabi_d2f>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f607 4228 	addw	r2, r7, #3112	@ 0xc28
 8003300:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 8003302:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800330e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003312:	d51e      	bpl.n	8003352 <ExtractKtaPixelParameters+0x40a>
        {
            mlx90640->kta[i] = (temp - 0.5);
 8003314:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	f7fd f915 	bl	8000548 <__aeabi_f2d>
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	4b29      	ldr	r3, [pc, #164]	@ (80033c8 <ExtractKtaPixelParameters+0x480>)
 8003324:	f7fc ffb0 	bl	8000288 <__aeabi_dsub>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4610      	mov	r0, r2
 800332e:	4619      	mov	r1, r3
 8003330:	f7fd fc12 	bl	8000b58 <__aeabi_d2iz>
 8003334:	4603      	mov	r3, r0
 8003336:	b259      	sxtb	r1, r3
 8003338:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800333c:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8003346:	4413      	add	r3, r2
 8003348:	f603 434c 	addw	r3, r3, #3148	@ 0xc4c
 800334c:	460a      	mov	r2, r1
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e01d      	b.n	800338e <ExtractKtaPixelParameters+0x446>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5);
 8003352:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	f7fd f8f6 	bl	8000548 <__aeabi_f2d>
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	4b19      	ldr	r3, [pc, #100]	@ (80033c8 <ExtractKtaPixelParameters+0x480>)
 8003362:	f7fc ff93 	bl	800028c <__adddf3>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4610      	mov	r0, r2
 800336c:	4619      	mov	r1, r3
 800336e:	f7fd fbf3 	bl	8000b58 <__aeabi_d2iz>
 8003372:	4603      	mov	r3, r0
 8003374:	b259      	sxtb	r1, r3
 8003376:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800337a:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8003384:	4413      	add	r3, r2
 8003386:	f603 434c 	addw	r3, r3, #3148	@ 0xc4c
 800338a:	460a      	mov	r2, r1
 800338c:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 800338e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8003392:	3301      	adds	r3, #1
 8003394:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 8003398:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 800339c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033a0:	db84      	blt.n	80032ac <ExtractKtaPixelParameters+0x364>
        }

    }

    mlx90640->ktaScale = ktaScale1;
 80033a2:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80033a6:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f897 2c2f 	ldrb.w	r2, [r7, #3119]	@ 0xc2f
 80033b0:	f883 2f4c 	strb.w	r2, [r3, #3916]	@ 0xf4c
}
 80033b4:	bf00      	nop
 80033b6:	f507 6743 	add.w	r7, r7, #3120	@ 0xc30
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bdb0      	pop	{r4, r5, r7, pc}
 80033be:	bf00      	nop
 80033c0:	00000000 	.word	0x00000000
 80033c4:	40000000 	.word	0x40000000
 80033c8:	3fe00000 	.word	0x3fe00000
 80033cc:	33333333 	.word	0x33333333
 80033d0:	404fb333 	.word	0x404fb333
 80033d4:	00000000 	.word	0x00000000

080033d8 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

static void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80033d8:	b5b0      	push	{r4, r5, r7, lr}
 80033da:	f5ad 6d43 	sub.w	sp, sp, #3120	@ 0xc30
 80033de:	af00      	add	r7, sp, #0
 80033e0:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80033e4:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 80033e8:	6018      	str	r0, [r3, #0]
 80033ea:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80033ee:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 80033f2:	6019      	str	r1, [r3, #0]
    int p = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 3c10 	str.w	r3, [r7, #3088]	@ 0xc10
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = MLX90640_NIBBLE4(eeData[52]);
 80033fa:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80033fe:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3368      	adds	r3, #104	@ 0x68
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	0b1b      	lsrs	r3, r3, #12
 800340a:	b29b      	uxth	r3, r3
 800340c:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    if (KvRoCo > 7)
 8003410:	f997 3c2f 	ldrsb.w	r3, [r7, #3119]	@ 0xc2f
 8003414:	2b07      	cmp	r3, #7
 8003416:	dd05      	ble.n	8003424 <ExtractKvPixelParameters+0x4c>
    {
        KvRoCo = KvRoCo - 16;
 8003418:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 800341c:	3b10      	subs	r3, #16
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    }
    KvT[0] = KvRoCo;
 8003424:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 8003428:	f887 3c08 	strb.w	r3, [r7, #3080]	@ 0xc08

    KvReCo = MLX90640_NIBBLE3(eeData[52]);
 800342c:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003430:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3368      	adds	r3, #104	@ 0x68
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	121b      	asrs	r3, r3, #8
 800343c:	b25b      	sxtb	r3, r3
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	f887 3c2d 	strb.w	r3, [r7, #3117]	@ 0xc2d
    if (KvReCo > 7)
 8003446:	f997 3c2d 	ldrsb.w	r3, [r7, #3117]	@ 0xc2d
 800344a:	2b07      	cmp	r3, #7
 800344c:	dd05      	ble.n	800345a <ExtractKvPixelParameters+0x82>
    {
        KvReCo = KvReCo - 16;
 800344e:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	@ 0xc2d
 8003452:	3b10      	subs	r3, #16
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f887 3c2d 	strb.w	r3, [r7, #3117]	@ 0xc2d
    }
    KvT[2] = KvReCo;
 800345a:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	@ 0xc2d
 800345e:	f887 3c0a 	strb.w	r3, [r7, #3082]	@ 0xc0a

    KvRoCe = MLX90640_NIBBLE2(eeData[52]);
 8003462:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003466:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3368      	adds	r3, #104	@ 0x68
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	111b      	asrs	r3, r3, #4
 8003472:	b25b      	sxtb	r3, r3
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	f887 3c2e 	strb.w	r3, [r7, #3118]	@ 0xc2e
    if (KvRoCe > 7)
 800347c:	f997 3c2e 	ldrsb.w	r3, [r7, #3118]	@ 0xc2e
 8003480:	2b07      	cmp	r3, #7
 8003482:	dd05      	ble.n	8003490 <ExtractKvPixelParameters+0xb8>
    {
        KvRoCe = KvRoCe - 16;
 8003484:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	@ 0xc2e
 8003488:	3b10      	subs	r3, #16
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f887 3c2e 	strb.w	r3, [r7, #3118]	@ 0xc2e
    }
    KvT[1] = KvRoCe;
 8003490:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	@ 0xc2e
 8003494:	f887 3c09 	strb.w	r3, [r7, #3081]	@ 0xc09

    KvReCe = MLX90640_NIBBLE1(eeData[52]);
 8003498:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800349c:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3368      	adds	r3, #104	@ 0x68
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	b25b      	sxtb	r3, r3
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	f887 3c2c 	strb.w	r3, [r7, #3116]	@ 0xc2c
    if (KvReCe > 7)
 80034b0:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	@ 0xc2c
 80034b4:	2b07      	cmp	r3, #7
 80034b6:	dd05      	ble.n	80034c4 <ExtractKvPixelParameters+0xec>
    {
        KvReCe = KvReCe - 16;
 80034b8:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	@ 0xc2c
 80034bc:	3b10      	subs	r3, #16
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f887 3c2c 	strb.w	r3, [r7, #3116]	@ 0xc2c
    }
    KvT[3] = KvReCe;
 80034c4:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	@ 0xc2c
 80034c8:	f887 3c0b 	strb.w	r3, [r7, #3083]	@ 0xc0b

    kvScale = MLX90640_NIBBLE3(eeData[56]);
 80034cc:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80034d0:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3370      	adds	r3, #112	@ 0x70
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	121b      	asrs	r3, r3, #8
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	f887 3c2b 	strb.w	r3, [r7, #3115]	@ 0xc2b


    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 80034ec:	e07c      	b.n	80035e8 <ExtractKvPixelParameters+0x210>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80034ee:	2300      	movs	r3, #0
 80034f0:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 80034f4:	e06f      	b.n	80035d6 <ExtractKvPixelParameters+0x1fe>
        {
            p = 32 * i +j;
 80034f6:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 80034fa:	015b      	lsls	r3, r3, #5
 80034fc:	f8d7 2c1c 	ldr.w	r2, [r7, #3100]	@ 0xc1c
 8003500:	4413      	add	r3, r2
 8003502:	f8c7 3c10 	str.w	r3, [r7, #3088]	@ 0xc10
            split = 2*(p/32 - (p/64)*2) + p%2;
 8003506:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 800350a:	2b00      	cmp	r3, #0
 800350c:	da00      	bge.n	8003510 <ExtractKvPixelParameters+0x138>
 800350e:	331f      	adds	r3, #31
 8003510:	115b      	asrs	r3, r3, #5
 8003512:	461a      	mov	r2, r3
 8003514:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8003518:	2b00      	cmp	r3, #0
 800351a:	da00      	bge.n	800351e <ExtractKvPixelParameters+0x146>
 800351c:	333f      	adds	r3, #63	@ 0x3f
 800351e:	119b      	asrs	r3, r3, #6
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	b2db      	uxtb	r3, r3
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	b2da      	uxtb	r2, r3
 800352a:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 800352e:	2b00      	cmp	r3, #0
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	bfb8      	it	lt
 8003536:	425b      	neglt	r3, r3
 8003538:	b2db      	uxtb	r3, r3
 800353a:	4413      	add	r3, r2
 800353c:	f887 3c0f 	strb.w	r3, [r7, #3087]	@ 0xc0f
            kvTemp[p] = KvT[split];
 8003540:	f897 3c0f 	ldrb.w	r3, [r7, #3087]	@ 0xc0f
 8003544:	f503 6343 	add.w	r3, r3, #3120	@ 0xc30
 8003548:	443b      	add	r3, r7
 800354a:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003556:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800355a:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 800355e:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / POW2(kvScale);
 800356a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800356e:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 8003572:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fc ffe3 	bl	8000548 <__aeabi_f2d>
 8003582:	4604      	mov	r4, r0
 8003584:	460d      	mov	r5, r1
 8003586:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 800358a:	4618      	mov	r0, r3
 800358c:	f7fc ffba 	bl	8000504 <__aeabi_ui2d>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	ec43 2b11 	vmov	d1, r2, r3
 8003598:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 80037d0 <ExtractKvPixelParameters+0x3f8>
 800359c:	f006 fd96 	bl	800a0cc <pow>
 80035a0:	ec53 2b10 	vmov	r2, r3, d0
 80035a4:	4620      	mov	r0, r4
 80035a6:	4629      	mov	r1, r5
 80035a8:	f7fd f950 	bl	800084c <__aeabi_ddiv>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	f7fd fb18 	bl	8000be8 <__aeabi_d2f>
 80035b8:	4601      	mov	r1, r0
 80035ba:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80035be:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 80035c2:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80035cc:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 80035d0:	3301      	adds	r3, #1
 80035d2:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 80035d6:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 80035da:	2b1f      	cmp	r3, #31
 80035dc:	dd8b      	ble.n	80034f6 <ExtractKvPixelParameters+0x11e>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80035de:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 80035e2:	3301      	adds	r3, #1
 80035e4:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 80035e8:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 80035ec:	2b17      	cmp	r3, #23
 80035ee:	f77f af7e 	ble.w	80034ee <ExtractKvPixelParameters+0x116>
        }
    }

    temp = fabs(kvTemp[0]);
 80035f2:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80035f6:	f6a3 4328 	subw	r3, r3, #3112	@ 0xc28
 80035fa:	edd3 7a00 	vldr	s15, [r3]
 80035fe:	eef0 7ae7 	vabs.f32	s15, s15
 8003602:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8003606:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 800360a:	2301      	movs	r3, #1
 800360c:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 8003610:	e029      	b.n	8003666 <ExtractKvPixelParameters+0x28e>
    {
        if (fabs(kvTemp[i]) > temp)
 8003612:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003616:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 800361a:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	edd3 7a00 	vldr	s15, [r3]
 8003626:	eef0 7ae7 	vabs.f32	s15, s15
 800362a:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 800362e:	ed93 7a00 	vldr	s14, [r3]
 8003632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363a:	d50f      	bpl.n	800365c <ExtractKvPixelParameters+0x284>
        {
            temp = fabs(kvTemp[i]);
 800363c:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003640:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 8003644:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	edd3 7a00 	vldr	s15, [r3]
 8003650:	eef0 7ae7 	vabs.f32	s15, s15
 8003654:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8003658:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 800365c:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8003660:	3301      	adds	r3, #1
 8003662:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 8003666:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 800366a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800366e:	dbd0      	blt.n	8003612 <ExtractKvPixelParameters+0x23a>
        }
    }

    kvScale = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	f887 3c2b 	strb.w	r3, [r7, #3115]	@ 0xc2b
    while(temp < 63.4)
 8003676:	e00e      	b.n	8003696 <ExtractKvPixelParameters+0x2be>
    {
        temp = temp*2;
 8003678:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 800367c:	edd3 7a00 	vldr	s15, [r3]
 8003680:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003684:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8003688:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 800368c:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 8003690:	3301      	adds	r3, #1
 8003692:	f887 3c2b 	strb.w	r3, [r7, #3115]	@ 0xc2b
    while(temp < 63.4)
 8003696:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	f7fc ff54 	bl	8000548 <__aeabi_f2d>
 80036a0:	a34e      	add	r3, pc, #312	@ (adr r3, 80037dc <ExtractKvPixelParameters+0x404>)
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	f7fd fa19 	bl	8000adc <__aeabi_dcmplt>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e3      	bne.n	8003678 <ExtractKvPixelParameters+0x2a0>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
 80036b6:	e075      	b.n	80037a4 <ExtractKvPixelParameters+0x3cc>
    {
        temp = kvTemp[i] * POW2(kvScale);
 80036b8:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80036bc:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 80036c0:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fc ff3c 	bl	8000548 <__aeabi_f2d>
 80036d0:	4604      	mov	r4, r0
 80036d2:	460d      	mov	r5, r1
 80036d4:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fc ff13 	bl	8000504 <__aeabi_ui2d>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	ec43 2b11 	vmov	d1, r2, r3
 80036e6:	ed9f 0b3a 	vldr	d0, [pc, #232]	@ 80037d0 <ExtractKvPixelParameters+0x3f8>
 80036ea:	f006 fcef 	bl	800a0cc <pow>
 80036ee:	ec53 2b10 	vmov	r2, r3, d0
 80036f2:	4620      	mov	r0, r4
 80036f4:	4629      	mov	r1, r5
 80036f6:	f7fc ff7f 	bl	80005f8 <__aeabi_dmul>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4610      	mov	r0, r2
 8003700:	4619      	mov	r1, r3
 8003702:	f7fd fa71 	bl	8000be8 <__aeabi_d2f>
 8003706:	4603      	mov	r3, r0
 8003708:	f607 4224 	addw	r2, r7, #3108	@ 0xc24
 800370c:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 800370e:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8003712:	edd3 7a00 	vldr	s15, [r3]
 8003716:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800371a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371e:	d51e      	bpl.n	800375e <ExtractKvPixelParameters+0x386>
        {
            mlx90640->kv[i] = (temp - 0.5);
 8003720:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	f7fc ff0f 	bl	8000548 <__aeabi_f2d>
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	4b2a      	ldr	r3, [pc, #168]	@ (80037d8 <ExtractKvPixelParameters+0x400>)
 8003730:	f7fc fdaa 	bl	8000288 <__aeabi_dsub>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4610      	mov	r0, r2
 800373a:	4619      	mov	r1, r3
 800373c:	f7fd fa0c 	bl	8000b58 <__aeabi_d2iz>
 8003740:	4603      	mov	r3, r0
 8003742:	b259      	sxtb	r1, r3
 8003744:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003748:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003752:	4413      	add	r3, r2
 8003754:	f603 734d 	addw	r3, r3, #3917	@ 0xf4d
 8003758:	460a      	mov	r2, r1
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	e01d      	b.n	800379a <ExtractKvPixelParameters+0x3c2>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5);
 800375e:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	f7fc fef0 	bl	8000548 <__aeabi_f2d>
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	4b1a      	ldr	r3, [pc, #104]	@ (80037d8 <ExtractKvPixelParameters+0x400>)
 800376e:	f7fc fd8d 	bl	800028c <__adddf3>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4610      	mov	r0, r2
 8003778:	4619      	mov	r1, r3
 800377a:	f7fd f9ed 	bl	8000b58 <__aeabi_d2iz>
 800377e:	4603      	mov	r3, r0
 8003780:	b259      	sxtb	r1, r3
 8003782:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003786:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003790:	4413      	add	r3, r2
 8003792:	f603 734d 	addw	r3, r3, #3917	@ 0xf4d
 8003796:	460a      	mov	r2, r1
 8003798:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 800379a:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 800379e:	3301      	adds	r3, #1
 80037a0:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
 80037a4:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 80037a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037ac:	db84      	blt.n	80036b8 <ExtractKvPixelParameters+0x2e0>
        }

    }

    mlx90640->kvScale = kvScale;
 80037ae:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80037b2:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037bc:	461a      	mov	r2, r3
 80037be:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 80037c2:	f882 324d 	strb.w	r3, [r2, #589]	@ 0x24d
}
 80037c6:	bf00      	nop
 80037c8:	f507 6743 	add.w	r7, r7, #3120	@ 0xc30
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bdb0      	pop	{r4, r5, r7, pc}
 80037d0:	00000000 	.word	0x00000000
 80037d4:	40000000 	.word	0x40000000
 80037d8:	3fe00000 	.word	0x3fe00000
 80037dc:	33333333 	.word	0x33333333
 80037e0:	404fb333 	.word	0x404fb333
 80037e4:	00000000 	.word	0x00000000

080037e8 <ExtractCPParameters>:

//------------------------------------------------------------------------------

static void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80037e8:	b5b0      	push	{r4, r5, r7, lr}
 80037ea:	b08a      	sub	sp, #40	@ 0x28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 27;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3340      	adds	r3, #64	@ 0x40
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	0b1b      	lsrs	r3, r3, #12
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	331b      	adds	r3, #27
 8003800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    offsetSP[0] = (eeData[58] & MLX90640_LSBITS_10_MASK);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3374      	adds	r3, #116	@ 0x74
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	b21b      	sxth	r3, r3
 800380c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003810:	b21b      	sxth	r3, r3
 8003812:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 8003814:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800381c:	db07      	blt.n	800382e <ExtractCPParameters+0x46>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 800381e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003822:	b29b      	uxth	r3, r3
 8003824:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003828:	b29b      	uxth	r3, r3
 800382a:	b21b      	sxth	r3, r3
 800382c:	813b      	strh	r3, [r7, #8]
    }

    offsetSP[1] = (eeData[58] & MLX90640_MSBITS_6_MASK) >> 10;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3374      	adds	r3, #116	@ 0x74
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	0a9b      	lsrs	r3, r3, #10
 8003836:	b29b      	uxth	r3, r3
 8003838:	b21b      	sxth	r3, r3
 800383a:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 800383c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003840:	2b1f      	cmp	r3, #31
 8003842:	dd06      	ble.n	8003852 <ExtractCPParameters+0x6a>
    {
        offsetSP[1] = offsetSP[1] - 64;
 8003844:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b40      	subs	r3, #64	@ 0x40
 800384c:	b29b      	uxth	r3, r3
 800384e:	b21b      	sxth	r3, r3
 8003850:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0];
 8003852:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003856:	b29a      	uxth	r2, r3
 8003858:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800385c:	b29b      	uxth	r3, r3
 800385e:	4413      	add	r3, r2
 8003860:	b29b      	uxth	r3, r3
 8003862:	b21b      	sxth	r3, r3
 8003864:	817b      	strh	r3, [r7, #10]

    alphaSP[0] = (eeData[57] & MLX90640_LSBITS_10_MASK);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3372      	adds	r3, #114	@ 0x72
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003870:	ee07 3a90 	vmov	s15, r3
 8003874:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003878:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 800387c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003880:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8003a50 <ExtractCPParameters+0x268>
 8003884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800388c:	dd07      	ble.n	800389e <ExtractCPParameters+0xb6>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 800388e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003892:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8003a54 <ExtractCPParameters+0x26c>
 8003896:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800389a:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  POW2(alphaScale);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fc fe51 	bl	8000548 <__aeabi_f2d>
 80038a6:	4604      	mov	r4, r0
 80038a8:	460d      	mov	r5, r1
 80038aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fc fe28 	bl	8000504 <__aeabi_ui2d>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	ec43 2b11 	vmov	d1, r2, r3
 80038bc:	ed9f 0b62 	vldr	d0, [pc, #392]	@ 8003a48 <ExtractCPParameters+0x260>
 80038c0:	f006 fc04 	bl	800a0cc <pow>
 80038c4:	ec53 2b10 	vmov	r2, r3, d0
 80038c8:	4620      	mov	r0, r4
 80038ca:	4629      	mov	r1, r5
 80038cc:	f7fc ffbe 	bl	800084c <__aeabi_ddiv>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4610      	mov	r0, r2
 80038d6:	4619      	mov	r1, r3
 80038d8:	f7fd f986 	bl	8000be8 <__aeabi_d2f>
 80038dc:	4603      	mov	r3, r0
 80038de:	60fb      	str	r3, [r7, #12]

    alphaSP[1] = (eeData[57] & MLX90640_MSBITS_6_MASK) >> 10;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3372      	adds	r3, #114	@ 0x72
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	0a9b      	lsrs	r3, r3, #10
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038f2:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 80038f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80038fa:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 80038fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003906:	dd07      	ble.n	8003918 <ExtractCPParameters+0x130>
    {
        alphaSP[1] = alphaSP[1] - 64;
 8003908:	edd7 7a04 	vldr	s15, [r7, #16]
 800390c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8003a58 <ExtractCPParameters+0x270>
 8003910:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003914:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 8003918:	ed97 7a04 	vldr	s14, [r7, #16]
 800391c:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003a5c <ExtractCPParameters+0x274>
 8003920:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003924:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003928:	ee37 7a87 	vadd.f32	s14, s15, s14
 800392c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003934:	edc7 7a04 	vstr	s15, [r7, #16]

    cpKta = (int8_t)MLX90640_LS_BYTE(eeData[59]);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3376      	adds	r3, #118	@ 0x76
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	b25b      	sxtb	r3, r3
 8003940:	ee07 3a90 	vmov	s15, r3
 8003944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003948:	edc7 7a08 	vstr	s15, [r7, #32]

    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3370      	adds	r3, #112	@ 0x70
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	111b      	asrs	r3, r3, #4
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	b2db      	uxtb	r3, r3
 800395c:	3308      	adds	r3, #8
 800395e:	77fb      	strb	r3, [r7, #31]
    mlx90640->cpKta = cpKta / POW2(ktaScale1);
 8003960:	6a38      	ldr	r0, [r7, #32]
 8003962:	f7fc fdf1 	bl	8000548 <__aeabi_f2d>
 8003966:	4604      	mov	r4, r0
 8003968:	460d      	mov	r5, r1
 800396a:	7ffb      	ldrb	r3, [r7, #31]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fdc9 	bl	8000504 <__aeabi_ui2d>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	ec43 2b11 	vmov	d1, r2, r3
 800397a:	ed9f 0b33 	vldr	d0, [pc, #204]	@ 8003a48 <ExtractCPParameters+0x260>
 800397e:	f006 fba5 	bl	800a0cc <pow>
 8003982:	ec53 2b10 	vmov	r2, r3, d0
 8003986:	4620      	mov	r0, r4
 8003988:	4629      	mov	r1, r5
 800398a:	f7fc ff5f 	bl	800084c <__aeabi_ddiv>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4610      	mov	r0, r2
 8003994:	4619      	mov	r1, r3
 8003996:	f7fd f927 	bl	8000be8 <__aeabi_d2f>
 800399a:	4602      	mov	r2, r0
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	621a      	str	r2, [r3, #32]

    cpKv = (int8_t)MLX90640_MS_BYTE(eeData[59]);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3376      	adds	r3, #118	@ 0x76
 80039a4:	881b      	ldrh	r3, [r3, #0]
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	b25b      	sxtb	r3, r3
 80039ac:	ee07 3a90 	vmov	s15, r3
 80039b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039b4:	edc7 7a06 	vstr	s15, [r7, #24]

    kvScale = MLX90640_NIBBLE3(eeData[56]);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3370      	adds	r3, #112	@ 0x70
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	121b      	asrs	r3, r3, #8
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	75fb      	strb	r3, [r7, #23]
    mlx90640->cpKv = cpKv / POW2(kvScale);
 80039c8:	69b8      	ldr	r0, [r7, #24]
 80039ca:	f7fc fdbd 	bl	8000548 <__aeabi_f2d>
 80039ce:	4604      	mov	r4, r0
 80039d0:	460d      	mov	r5, r1
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fc fd95 	bl	8000504 <__aeabi_ui2d>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	ec43 2b11 	vmov	d1, r2, r3
 80039e2:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 8003a48 <ExtractCPParameters+0x260>
 80039e6:	f006 fb71 	bl	800a0cc <pow>
 80039ea:	ec53 2b10 	vmov	r2, r3, d0
 80039ee:	4620      	mov	r0, r4
 80039f0:	4629      	mov	r1, r5
 80039f2:	f7fc ff2b 	bl	800084c <__aeabi_ddiv>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4610      	mov	r0, r2
 80039fc:	4619      	mov	r1, r3
 80039fe:	f7fd f8f3 	bl	8000be8 <__aeabi_d2f>
 8003a02:	4602      	mov	r2, r0
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	61da      	str	r2, [r3, #28]

    mlx90640->cpAlpha[0] = alphaSP[0];
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a10:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a1c:	f8c2 3254 	str.w	r3, [r2, #596]	@ 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8003a20:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a2a:	f8a3 2258 	strh.w	r2, [r3, #600]	@ 0x258
    mlx90640->cpOffset[1] = offsetSP[1];
 8003a2e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a38:	f8a3 225a 	strh.w	r2, [r3, #602]	@ 0x25a
}
 8003a3c:	bf00      	nop
 8003a3e:	3728      	adds	r7, #40	@ 0x28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bdb0      	pop	{r4, r5, r7, pc}
 8003a44:	f3af 8000 	nop.w
 8003a48:	00000000 	.word	0x00000000
 8003a4c:	40000000 	.word	0x40000000
 8003a50:	43ff8000 	.word	0x43ff8000
 8003a54:	44800000 	.word	0x44800000
 8003a58:	42800000 	.word	0x42800000
 8003a5c:	43000000 	.word	0x43000000

08003a60 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

static void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;

    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3314      	adds	r3, #20
 8003a6e:	881b      	ldrh	r3, [r3, #0]
 8003a70:	111b      	asrs	r3, r3, #4
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003a78:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
 8003a7c:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8003a80:	43db      	mvns	r3, r3
 8003a82:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	336a      	adds	r3, #106	@ 0x6a
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a96:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 8003a9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a9e:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8003aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aaa:	dd07      	ble.n	8003abc <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 8003aac:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ab0:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8003b98 <ExtractCILCParameters+0x138>
 8003ab4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ab8:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 8003abc:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ac0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003ac4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ac8:	edc7 7a02 	vstr	s15, [r7, #8]

    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	336a      	adds	r3, #106	@ 0x6a
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	119b      	asrs	r3, r3, #6
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	ee07 3a90 	vmov	s15, r3
 8003adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ae0:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 8003ae4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ae8:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8003aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af4:	dd07      	ble.n	8003b06 <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 8003af6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003afa:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8003b9c <ExtractCILCParameters+0x13c>
 8003afe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b02:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 8003b06:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b0a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b12:	edc7 7a03 	vstr	s15, [r7, #12]

    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	336a      	adds	r3, #106	@ 0x6a
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	0adb      	lsrs	r3, r3, #11
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	ee07 3a90 	vmov	s15, r3
 8003b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b28:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 8003b2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b30:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8003b34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3c:	dd07      	ble.n	8003b4e <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 8003b3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b42:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003b9c <ExtractCILCParameters+0x13c>
 8003b46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b4a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 8003b4e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b52:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8003b56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b5a:	edc7 7a04 	vstr	s15, [r7, #16]

    mlx90640->calibrationModeEE = calibrationModeEE;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	7dfa      	ldrb	r2, [r7, #23]
 8003b62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b6e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b7a:	f8c2 3260 	str.w	r3, [r2, #608]	@ 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b86:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264
}
 8003b8a:	bf00      	nop
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	42800000 	.word	0x42800000
 8003b9c:	42000000 	.word	0x42000000

08003ba0 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

static int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
    int i;

    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	82fb      	strh	r3, [r7, #22]
 8003bbe:	e013      	b.n	8003be8 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8003bc0:	8afa      	ldrh	r2, [r7, #22]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003bc8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003bcc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8003bd0:	8afb      	ldrh	r3, [r7, #22]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	4413      	add	r3, r2
 8003bdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003be0:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8003be2:	8afb      	ldrh	r3, [r7, #22]
 8003be4:	3301      	adds	r3, #1
 8003be6:	82fb      	strh	r3, [r7, #22]
 8003be8:	8afb      	ldrh	r3, [r7, #22]
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d9e8      	bls.n	8003bc0 <ExtractDeviatingPixels+0x20>
    }

    pixCnt = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 8003bf2:	e02a      	b.n	8003c4a <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 8003bf4:	8afb      	ldrh	r3, [r7, #22]
 8003bf6:	3340      	adds	r3, #64	@ 0x40
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 8003c04:	8aba      	ldrh	r2, [r7, #20]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003c0c:	8af9      	ldrh	r1, [r7, #22]
 8003c0e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 8003c12:	8abb      	ldrh	r3, [r7, #20]
 8003c14:	3301      	adds	r3, #1
 8003c16:	82bb      	strh	r3, [r7, #20]
 8003c18:	e014      	b.n	8003c44 <ExtractDeviatingPixels+0xa4>
        }
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 8003c1a:	8afb      	ldrh	r3, [r7, #22]
 8003c1c:	3340      	adds	r3, #64	@ 0x40
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	4413      	add	r3, r2
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8003c2e:	8a7b      	ldrh	r3, [r7, #18]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	4413      	add	r3, r2
 8003c3a:	8afa      	ldrh	r2, [r7, #22]
 8003c3c:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 8003c3e:	8a7b      	ldrh	r3, [r7, #18]
 8003c40:	3301      	adds	r3, #1
 8003c42:	827b      	strh	r3, [r7, #18]
        }

        pixCnt = pixCnt + 1;
 8003c44:	8afb      	ldrh	r3, [r7, #22]
 8003c46:	3301      	adds	r3, #1
 8003c48:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 8003c4a:	8afb      	ldrh	r3, [r7, #22]
 8003c4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c50:	d205      	bcs.n	8003c5e <ExtractDeviatingPixels+0xbe>
 8003c52:	8abb      	ldrh	r3, [r7, #20]
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d802      	bhi.n	8003c5e <ExtractDeviatingPixels+0xbe>
 8003c58:	8a7b      	ldrh	r3, [r7, #18]
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d9ca      	bls.n	8003bf4 <ExtractDeviatingPixels+0x54>

    }

    if(brokenPixCnt > 4)
 8003c5e:	8abb      	ldrh	r3, [r7, #20]
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d903      	bls.n	8003c6c <ExtractDeviatingPixels+0xcc>
    {
        warn = -MLX90640_BROKEN_PIXELS_NUM_ERROR;
 8003c64:	f06f 0302 	mvn.w	r3, #2
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	e08f      	b.n	8003d8c <ExtractDeviatingPixels+0x1ec>
    }
    else if(outlierPixCnt > 4)
 8003c6c:	8a7b      	ldrh	r3, [r7, #18]
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d903      	bls.n	8003c7a <ExtractDeviatingPixels+0xda>
    {
        warn = -MLX90640_OUTLIER_PIXELS_NUM_ERROR;
 8003c72:	f06f 0303 	mvn.w	r3, #3
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e088      	b.n	8003d8c <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)
 8003c7a:	8aba      	ldrh	r2, [r7, #20]
 8003c7c:	8a7b      	ldrh	r3, [r7, #18]
 8003c7e:	4413      	add	r3, r2
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	dd03      	ble.n	8003c8c <ExtractDeviatingPixels+0xec>
    {
        warn = -MLX90640_BAD_PIXELS_NUM_ERROR;
 8003c84:	f06f 0304 	mvn.w	r3, #4
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	e07f      	b.n	8003d8c <ExtractDeviatingPixels+0x1ec>
    }
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	82fb      	strh	r3, [r7, #22]
 8003c90:	e022      	b.n	8003cd8 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8003c92:	8afb      	ldrh	r3, [r7, #22]
 8003c94:	3301      	adds	r3, #1
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	e017      	b.n	8003cca <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 8003c9a:	8afa      	ldrh	r2, [r7, #22]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003ca2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003cae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	f000 f86f 	bl	8003d96 <CheckAdjacentPixels>
 8003cb8:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	e064      	b.n	8003d8e <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	8abb      	ldrh	r3, [r7, #20]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	dbe3      	blt.n	8003c9a <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003cd2:	8afb      	ldrh	r3, [r7, #22]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	82fb      	strh	r3, [r7, #22]
 8003cd8:	8afa      	ldrh	r2, [r7, #22]
 8003cda:	8abb      	ldrh	r3, [r7, #20]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d3d8      	bcc.n	8003c92 <ExtractDeviatingPixels+0xf2>
                }
            }
        }

        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	82fb      	strh	r3, [r7, #22]
 8003ce4:	e024      	b.n	8003d30 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8003ce6:	8afb      	ldrh	r3, [r7, #22]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	e019      	b.n	8003d22 <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 8003cee:	8afb      	ldrh	r3, [r7, #22]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	8858      	ldrh	r0, [r3, #2]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	4413      	add	r3, r2
 8003d08:	885b      	ldrh	r3, [r3, #2]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	f000 f843 	bl	8003d96 <CheckAdjacentPixels>
 8003d10:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	e038      	b.n	8003d8e <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	8a7b      	ldrh	r3, [r7, #18]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	dbe1      	blt.n	8003cee <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8003d2a:	8afb      	ldrh	r3, [r7, #22]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	82fb      	strh	r3, [r7, #22]
 8003d30:	8afa      	ldrh	r2, [r7, #22]
 8003d32:	8a7b      	ldrh	r3, [r7, #18]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d3d6      	bcc.n	8003ce6 <ExtractDeviatingPixels+0x146>
                }
            }
        }

        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	82fb      	strh	r3, [r7, #22]
 8003d3c:	e022      	b.n	8003d84 <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60bb      	str	r3, [r7, #8]
 8003d42:	e018      	b.n	8003d76 <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 8003d44:	8afa      	ldrh	r2, [r7, #22]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003d4c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	885b      	ldrh	r3, [r3, #2]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f000 f819 	bl	8003d96 <CheckAdjacentPixels>
 8003d64:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	e00e      	b.n	8003d8e <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	3301      	adds	r3, #1
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	8a7b      	ldrh	r3, [r7, #18]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	dbe2      	blt.n	8003d44 <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003d7e:	8afb      	ldrh	r3, [r7, #22]
 8003d80:	3301      	adds	r3, #1
 8003d82:	82fb      	strh	r3, [r7, #22]
 8003d84:	8afa      	ldrh	r2, [r7, #22]
 8003d86:	8abb      	ldrh	r3, [r7, #20]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d3d8      	bcc.n	8003d3e <ExtractDeviatingPixels+0x19e>
        }

    }


    return warn;
 8003d8c:	68fb      	ldr	r3, [r7, #12]

}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 static int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 8003d96:	b480      	push	{r7}
 8003d98:	b087      	sub	sp, #28
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	460a      	mov	r2, r1
 8003da0:	80fb      	strh	r3, [r7, #6]
 8003da2:	4613      	mov	r3, r2
 8003da4:	80bb      	strh	r3, [r7, #4]

     int pixPosDif;
     uint16_t lp1 = pix1 >> 5;
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	82fb      	strh	r3, [r7, #22]
     uint16_t lp2 = pix2 >> 5;
 8003dac:	88bb      	ldrh	r3, [r7, #4]
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	82bb      	strh	r3, [r7, #20]
     uint16_t cp1 = pix1 - (lp1 << 5);
 8003db2:	8afb      	ldrh	r3, [r7, #22]
 8003db4:	015b      	lsls	r3, r3, #5
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	88fa      	ldrh	r2, [r7, #6]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	827b      	strh	r3, [r7, #18]
     uint16_t cp2 = pix2 - (lp2 << 5);
 8003dbe:	8abb      	ldrh	r3, [r7, #20]
 8003dc0:	015b      	lsls	r3, r3, #5
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	88ba      	ldrh	r2, [r7, #4]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	823b      	strh	r3, [r7, #16]

     pixPosDif = lp1 - lp2;
 8003dca:	8afa      	ldrh	r2, [r7, #22]
 8003dcc:	8abb      	ldrh	r3, [r7, #20]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -2 && pixPosDif < 2)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dd8:	db10      	blt.n	8003dfc <CheckAdjacentPixels+0x66>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	dc0d      	bgt.n	8003dfc <CheckAdjacentPixels+0x66>
     {
        pixPosDif = cp1 - cp2;
 8003de0:	8a7a      	ldrh	r2, [r7, #18]
 8003de2:	8a3b      	ldrh	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	60fb      	str	r3, [r7, #12]
        if(pixPosDif > -2 && pixPosDif < 2)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dee:	db05      	blt.n	8003dfc <CheckAdjacentPixels+0x66>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	dc02      	bgt.n	8003dfc <CheckAdjacentPixels+0x66>
        {
            return -6;
 8003df6:	f06f 0305 	mvn.w	r3, #5
 8003dfa:	e000      	b.n	8003dfe <CheckAdjacentPixels+0x68>
        }

     }

     return 0;
 8003dfc:	2300      	movs	r3, #0
 }
 8003dfe:	4618      	mov	r0, r3
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <MLX90640_I2CRead>:
	}
	printf("Scan Complete\r\n");
}

int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress,
		uint16_t nMemAddressRead, uint16_t *data) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b08c      	sub	sp, #48	@ 0x30
 8003e10:	af04      	add	r7, sp, #16
 8003e12:	607b      	str	r3, [r7, #4]
 8003e14:	4603      	mov	r3, r0
 8003e16:	73fb      	strb	r3, [r7, #15]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	81bb      	strh	r3, [r7, #12]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	817b      	strh	r3, [r7, #10]
	uint8_t* pData = (uint8_t*) data;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	61bb      	str	r3, [r7, #24]
	int ack = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr << 1), startAddress,
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	b299      	uxth	r1, r3
 8003e2c:	897b      	ldrh	r3, [r7, #10]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	89ba      	ldrh	r2, [r7, #12]
 8003e34:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e38:	9002      	str	r0, [sp, #8]
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	2302      	movs	r3, #2
 8003e42:	4817      	ldr	r0, [pc, #92]	@ (8003ea0 <MLX90640_I2CRead+0x94>)
 8003e44:	f001 f97c 	bl	8005140 <HAL_I2C_Mem_Read>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	617b      	str	r3, [r7, #20]
	I2C_MEMADD_SIZE_16BIT, pData, 2 * nMemAddressRead, 500);
	if (ack != HAL_OK) {
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <MLX90640_I2CRead+0x4c>
		return -1;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e56:	e01f      	b.n	8003e98 <MLX90640_I2CRead+0x8c>
	}

	// Perform Endian Conversion on the received data
	for (int k = 0; k < nMemAddressRead * 2; k += 2) {
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	e016      	b.n	8003e8c <MLX90640_I2CRead+0x80>
		uint8_t temp = pData[k+1];
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	3301      	adds	r3, #1
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4413      	add	r3, r2
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	74fb      	strb	r3, [r7, #19]
		pData[k+1] = pData[k];
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	441a      	add	r2, r3
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	3301      	adds	r3, #1
 8003e74:	69b9      	ldr	r1, [r7, #24]
 8003e76:	440b      	add	r3, r1
 8003e78:	7812      	ldrb	r2, [r2, #0]
 8003e7a:	701a      	strb	r2, [r3, #0]
		pData[k] = temp;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4413      	add	r3, r2
 8003e82:	7cfa      	ldrb	r2, [r7, #19]
 8003e84:	701a      	strb	r2, [r3, #0]
	for (int k = 0; k < nMemAddressRead * 2; k += 2) {
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3302      	adds	r3, #2
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	897b      	ldrh	r3, [r7, #10]
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	dbe3      	blt.n	8003e5e <MLX90640_I2CRead+0x52>
	}

	return 0;
 8003e96:	2300      	movs	r3, #0

}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3720      	adds	r7, #32
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000204 	.word	0x20000204

08003ea4 <MLX90640_I2CWrite>:

int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data) {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	@ 0x28
 8003ea8:	af04      	add	r7, sp, #16
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	80bb      	strh	r3, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	807b      	strh	r3, [r7, #2]
	uint8_t pData[2];
	pData[0] = (uint8_t)((data >> 8) & 0xFF); // MSB
 8003eb6:	887b      	ldrh	r3, [r7, #2]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	743b      	strb	r3, [r7, #16]
	pData[1] = (uint8_t)(data & 0xFF); // LSB
 8003ec0:	887b      	ldrh	r3, [r7, #2]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	747b      	strb	r3, [r7, #17]
	// Perform Endian Conversion on data to write

	int ack = HAL_I2C_Mem_Write(&hi2c1, (slaveAddr << 1), writeAddress,
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	b299      	uxth	r1, r3
 8003ece:	88ba      	ldrh	r2, [r7, #4]
 8003ed0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003ed4:	9302      	str	r3, [sp, #8]
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	9301      	str	r3, [sp, #4]
 8003eda:	f107 0310 	add.w	r3, r7, #16
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	480f      	ldr	r0, [pc, #60]	@ (8003f20 <MLX90640_I2CWrite+0x7c>)
 8003ee4:	f001 f818 	bl	8004f18 <HAL_I2C_Mem_Write>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	617b      	str	r3, [r7, #20]
	I2C_MEMADD_SIZE_16BIT, pData, sizeof(pData), 500);

	if (ack != HAL_OK) {
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <MLX90640_I2CWrite+0x54>
		return -1;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ef6:	e00e      	b.n	8003f16 <MLX90640_I2CWrite+0x72>
	}

	uint16_t dataCheck;
	MLX90640_I2CRead(slaveAddr, writeAddress, 2, &dataCheck);
 8003ef8:	f107 030e 	add.w	r3, r7, #14
 8003efc:	88b9      	ldrh	r1, [r7, #4]
 8003efe:	79f8      	ldrb	r0, [r7, #7]
 8003f00:	2202      	movs	r2, #2
 8003f02:	f7ff ff83 	bl	8003e0c <MLX90640_I2CRead>
	if (dataCheck != data) return -2;
 8003f06:	89fb      	ldrh	r3, [r7, #14]
 8003f08:	887a      	ldrh	r2, [r7, #2]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d002      	beq.n	8003f14 <MLX90640_I2CWrite+0x70>
 8003f0e:	f06f 0301 	mvn.w	r3, #1
 8003f12:	e000      	b.n	8003f16 <MLX90640_I2CWrite+0x72>

	return 0;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000204 	.word	0x20000204

08003f24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2a:	f107 030c 	add.w	r3, r7, #12
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	605a      	str	r2, [r3, #4]
 8003f34:	609a      	str	r2, [r3, #8]
 8003f36:	60da      	str	r2, [r3, #12]
 8003f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb0 <MX_GPIO_Init+0x8c>)
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8003fb0 <MX_GPIO_Init+0x8c>)
 8003f40:	f043 0304 	orr.w	r3, r3, #4
 8003f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f46:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb0 <MX_GPIO_Init+0x8c>)
 8003f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f52:	4b17      	ldr	r3, [pc, #92]	@ (8003fb0 <MX_GPIO_Init+0x8c>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f56:	4a16      	ldr	r2, [pc, #88]	@ (8003fb0 <MX_GPIO_Init+0x8c>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f5e:	4b14      	ldr	r3, [pc, #80]	@ (8003fb0 <MX_GPIO_Init+0x8c>)
 8003f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	607b      	str	r3, [r7, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f6a:	4b11      	ldr	r3, [pc, #68]	@ (8003fb0 <MX_GPIO_Init+0x8c>)
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6e:	4a10      	ldr	r2, [pc, #64]	@ (8003fb0 <MX_GPIO_Init+0x8c>)
 8003f70:	f043 0302 	orr.w	r3, r3, #2
 8003f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f76:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb0 <MX_GPIO_Init+0x8c>)
 8003f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003f82:	2200      	movs	r2, #0
 8003f84:	2108      	movs	r1, #8
 8003f86:	480b      	ldr	r0, [pc, #44]	@ (8003fb4 <MX_GPIO_Init+0x90>)
 8003f88:	f000 ff12 	bl	8004db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003f8c:	2308      	movs	r3, #8
 8003f8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f90:	2301      	movs	r3, #1
 8003f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003f9c:	f107 030c 	add.w	r3, r7, #12
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4804      	ldr	r0, [pc, #16]	@ (8003fb4 <MX_GPIO_Init+0x90>)
 8003fa4:	f000 fd9a 	bl	8004adc <HAL_GPIO_Init>

}
 8003fa8:	bf00      	nop
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	48000400 	.word	0x48000400

08003fb8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800402c <MX_I2C1_Init+0x74>)
 8003fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8004030 <MX_I2C1_Init+0x78>)
 8003fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 8003fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800402c <MX_I2C1_Init+0x74>)
 8003fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8004034 <MX_I2C1_Init+0x7c>)
 8003fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003fc8:	4b18      	ldr	r3, [pc, #96]	@ (800402c <MX_I2C1_Init+0x74>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fce:	4b17      	ldr	r3, [pc, #92]	@ (800402c <MX_I2C1_Init+0x74>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003fd4:	4b15      	ldr	r3, [pc, #84]	@ (800402c <MX_I2C1_Init+0x74>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003fda:	4b14      	ldr	r3, [pc, #80]	@ (800402c <MX_I2C1_Init+0x74>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003fe0:	4b12      	ldr	r3, [pc, #72]	@ (800402c <MX_I2C1_Init+0x74>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003fe6:	4b11      	ldr	r3, [pc, #68]	@ (800402c <MX_I2C1_Init+0x74>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003fec:	4b0f      	ldr	r3, [pc, #60]	@ (800402c <MX_I2C1_Init+0x74>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ff2:	480e      	ldr	r0, [pc, #56]	@ (800402c <MX_I2C1_Init+0x74>)
 8003ff4:	f000 fef4 	bl	8004de0 <HAL_I2C_Init>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003ffe:	f000 fa39 	bl	8004474 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004002:	2100      	movs	r1, #0
 8004004:	4809      	ldr	r0, [pc, #36]	@ (800402c <MX_I2C1_Init+0x74>)
 8004006:	f001 fc77 	bl	80058f8 <HAL_I2CEx_ConfigAnalogFilter>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004010:	f000 fa30 	bl	8004474 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004014:	2100      	movs	r1, #0
 8004016:	4805      	ldr	r0, [pc, #20]	@ (800402c <MX_I2C1_Init+0x74>)
 8004018:	f001 fcb9 	bl	800598e <HAL_I2CEx_ConfigDigitalFilter>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004022:	f000 fa27 	bl	8004474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000204 	.word	0x20000204
 8004030:	40005400 	.word	0x40005400
 8004034:	0060112f 	.word	0x0060112f

08004038 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b09e      	sub	sp, #120	@ 0x78
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004040:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	60da      	str	r2, [r3, #12]
 800404e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004050:	f107 0310 	add.w	r3, r7, #16
 8004054:	2254      	movs	r2, #84	@ 0x54
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f004 f8d3 	bl	8008204 <memset>
  if(i2cHandle->Instance==I2C1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a24      	ldr	r2, [pc, #144]	@ (80040f4 <HAL_I2C_MspInit+0xbc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d141      	bne.n	80040ec <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004068:	2340      	movs	r3, #64	@ 0x40
 800406a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800406c:	2300      	movs	r3, #0
 800406e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004070:	f107 0310 	add.w	r3, r7, #16
 8004074:	4618      	mov	r0, r3
 8004076:	f002 fb83 	bl	8006780 <HAL_RCCEx_PeriphCLKConfig>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004080:	f000 f9f8 	bl	8004474 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004084:	4b1c      	ldr	r3, [pc, #112]	@ (80040f8 <HAL_I2C_MspInit+0xc0>)
 8004086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004088:	4a1b      	ldr	r2, [pc, #108]	@ (80040f8 <HAL_I2C_MspInit+0xc0>)
 800408a:	f043 0302 	orr.w	r3, r3, #2
 800408e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004090:	4b19      	ldr	r3, [pc, #100]	@ (80040f8 <HAL_I2C_MspInit+0xc0>)
 8004092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800409c:	23c0      	movs	r3, #192	@ 0xc0
 800409e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040a0:	2312      	movs	r3, #18
 80040a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040a4:	2301      	movs	r3, #1
 80040a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a8:	2303      	movs	r3, #3
 80040aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040ac:	2304      	movs	r3, #4
 80040ae:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80040b4:	4619      	mov	r1, r3
 80040b6:	4811      	ldr	r0, [pc, #68]	@ (80040fc <HAL_I2C_MspInit+0xc4>)
 80040b8:	f000 fd10 	bl	8004adc <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 80040bc:	4b10      	ldr	r3, [pc, #64]	@ (8004100 <HAL_I2C_MspInit+0xc8>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4a0f      	ldr	r2, [pc, #60]	@ (8004100 <HAL_I2C_MspInit+0xc8>)
 80040c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c6:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 80040c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004100 <HAL_I2C_MspInit+0xc8>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004100 <HAL_I2C_MspInit+0xc8>)
 80040ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040d2:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040d4:	4b08      	ldr	r3, [pc, #32]	@ (80040f8 <HAL_I2C_MspInit+0xc0>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d8:	4a07      	ldr	r2, [pc, #28]	@ (80040f8 <HAL_I2C_MspInit+0xc0>)
 80040da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80040de:	6593      	str	r3, [r2, #88]	@ 0x58
 80040e0:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <HAL_I2C_MspInit+0xc0>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80040ec:	bf00      	nop
 80040ee:	3778      	adds	r7, #120	@ 0x78
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40005400 	.word	0x40005400
 80040f8:	40021000 	.word	0x40021000
 80040fc:	48000400 	.word	0x48000400
 8004100:	40010000 	.word	0x40010000

08004104 <_write>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int _write(int file, char *data, int len) {
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
	// Transmit via UART using HAL function
	HAL_UART_Transmit(&huart2, (uint8_t*) data, len, HAL_MAX_DELAY);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	b29a      	uxth	r2, r3
 8004114:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4804      	ldr	r0, [pc, #16]	@ (800412c <_write+0x28>)
 800411c:	f002 fe76 	bl	8006e0c <HAL_UART_Transmit>
	return len;
 8004120:	687b      	ldr	r3, [r7, #4]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20002dfc 	.word	0x20002dfc

08004130 <computeMLXAverage>:

void computeMLXAverage() {
 8004130:	b5b0      	push	{r4, r5, r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
	uint16_t left, middle, right = 0;
 8004136:	2300      	movs	r3, #0
 8004138:	827b      	strh	r3, [r7, #18]
	for (size_t row = 0; row < 24; row++) {
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	e08a      	b.n	8004256 <computeMLXAverage+0x126>
		for (size_t col = 0; col < 32; col++) {
 8004140:	2300      	movs	r3, #0
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	e080      	b.n	8004248 <computeMLXAverage+0x118>
			uint16_t index = row * 32 + col;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	b29b      	uxth	r3, r3
 800414a:	015b      	lsls	r3, r3, #5
 800414c:	b29a      	uxth	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	b29b      	uxth	r3, r3
 8004152:	4413      	add	r3, r2
 8004154:	80fb      	strh	r3, [r7, #6]
			// We only count "valid" temp values; i.e. non-zero, NOT NaN
			// Account for how many valid values are in each region for the average
			if (MLX_to[index] != 0 && MLX_to[index] == MLX_to[index]) {
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	4a62      	ldr	r2, [pc, #392]	@ (80042e4 <computeMLXAverage+0x1b4>)
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	edd3 7a00 	vldr	s15, [r3]
 8004162:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416a:	d06a      	beq.n	8004242 <computeMLXAverage+0x112>
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	4a5d      	ldr	r2, [pc, #372]	@ (80042e4 <computeMLXAverage+0x1b4>)
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	ed93 7a00 	vldr	s14, [r3]
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	4a5a      	ldr	r2, [pc, #360]	@ (80042e4 <computeMLXAverage+0x1b4>)
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	edd3 7a00 	vldr	s15, [r3]
 8004184:	eeb4 7a67 	vcmp.f32	s14, s15
 8004188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418c:	d159      	bne.n	8004242 <computeMLXAverage+0x112>
				if (col >= 0 && col < 10) {
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b09      	cmp	r3, #9
 8004192:	d818      	bhi.n	80041c6 <computeMLXAverage+0x96>
					MLX_average[0] += MLX_to[index];
 8004194:	4b54      	ldr	r3, [pc, #336]	@ (80042e8 <computeMLXAverage+0x1b8>)
 8004196:	e9d3 4500 	ldrd	r4, r5, [r3]
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	4a51      	ldr	r2, [pc, #324]	@ (80042e4 <computeMLXAverage+0x1b4>)
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fc f9cf 	bl	8000548 <__aeabi_f2d>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4620      	mov	r0, r4
 80041b0:	4629      	mov	r1, r5
 80041b2:	f7fc f86b 	bl	800028c <__adddf3>
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	494b      	ldr	r1, [pc, #300]	@ (80042e8 <computeMLXAverage+0x1b8>)
 80041bc:	e9c1 2300 	strd	r2, r3, [r1]
					left++;
 80041c0:	8afb      	ldrh	r3, [r7, #22]
 80041c2:	3301      	adds	r3, #1
 80041c4:	82fb      	strh	r3, [r7, #22]
				}
				if (col >= 10 && col < 22) {
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	d91b      	bls.n	8004204 <computeMLXAverage+0xd4>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b15      	cmp	r3, #21
 80041d0:	d818      	bhi.n	8004204 <computeMLXAverage+0xd4>
					MLX_average[1] += MLX_to[index];
 80041d2:	4b45      	ldr	r3, [pc, #276]	@ (80042e8 <computeMLXAverage+0x1b8>)
 80041d4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80041d8:	88fb      	ldrh	r3, [r7, #6]
 80041da:	4a42      	ldr	r2, [pc, #264]	@ (80042e4 <computeMLXAverage+0x1b4>)
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fc f9b0 	bl	8000548 <__aeabi_f2d>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4620      	mov	r0, r4
 80041ee:	4629      	mov	r1, r5
 80041f0:	f7fc f84c 	bl	800028c <__adddf3>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	493b      	ldr	r1, [pc, #236]	@ (80042e8 <computeMLXAverage+0x1b8>)
 80041fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
					middle++;
 80041fe:	8abb      	ldrh	r3, [r7, #20]
 8004200:	3301      	adds	r3, #1
 8004202:	82bb      	strh	r3, [r7, #20]
				}
				if (col >= 22 && col < 32) {
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b15      	cmp	r3, #21
 8004208:	d91b      	bls.n	8004242 <computeMLXAverage+0x112>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b1f      	cmp	r3, #31
 800420e:	d818      	bhi.n	8004242 <computeMLXAverage+0x112>
					MLX_average[2] += MLX_to[index];
 8004210:	4b35      	ldr	r3, [pc, #212]	@ (80042e8 <computeMLXAverage+0x1b8>)
 8004212:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	4a32      	ldr	r2, [pc, #200]	@ (80042e4 <computeMLXAverage+0x1b4>)
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f7fc f991 	bl	8000548 <__aeabi_f2d>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4620      	mov	r0, r4
 800422c:	4629      	mov	r1, r5
 800422e:	f7fc f82d 	bl	800028c <__adddf3>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	492c      	ldr	r1, [pc, #176]	@ (80042e8 <computeMLXAverage+0x1b8>)
 8004238:	e9c1 2304 	strd	r2, r3, [r1, #16]
					right++;
 800423c:	8a7b      	ldrh	r3, [r7, #18]
 800423e:	3301      	adds	r3, #1
 8004240:	827b      	strh	r3, [r7, #18]
		for (size_t col = 0; col < 32; col++) {
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	3301      	adds	r3, #1
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b1f      	cmp	r3, #31
 800424c:	f67f af7b 	bls.w	8004146 <computeMLXAverage+0x16>
	for (size_t row = 0; row < 24; row++) {
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3301      	adds	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b17      	cmp	r3, #23
 800425a:	f67f af71 	bls.w	8004140 <computeMLXAverage+0x10>
			}
		}
	}

	// Average only if there is a non-trivial amount of temp values per region
	if (left > 0) MLX_average[0] /= left;
 800425e:	8afb      	ldrh	r3, [r7, #22]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d011      	beq.n	8004288 <computeMLXAverage+0x158>
 8004264:	4b20      	ldr	r3, [pc, #128]	@ (80042e8 <computeMLXAverage+0x1b8>)
 8004266:	e9d3 4500 	ldrd	r4, r5, [r3]
 800426a:	8afb      	ldrh	r3, [r7, #22]
 800426c:	4618      	mov	r0, r3
 800426e:	f7fc f959 	bl	8000524 <__aeabi_i2d>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4620      	mov	r0, r4
 8004278:	4629      	mov	r1, r5
 800427a:	f7fc fae7 	bl	800084c <__aeabi_ddiv>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4919      	ldr	r1, [pc, #100]	@ (80042e8 <computeMLXAverage+0x1b8>)
 8004284:	e9c1 2300 	strd	r2, r3, [r1]
	if (middle > 0) MLX_average[1] /= middle;
 8004288:	8abb      	ldrh	r3, [r7, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d011      	beq.n	80042b2 <computeMLXAverage+0x182>
 800428e:	4b16      	ldr	r3, [pc, #88]	@ (80042e8 <computeMLXAverage+0x1b8>)
 8004290:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004294:	8abb      	ldrh	r3, [r7, #20]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fc f944 	bl	8000524 <__aeabi_i2d>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4620      	mov	r0, r4
 80042a2:	4629      	mov	r1, r5
 80042a4:	f7fc fad2 	bl	800084c <__aeabi_ddiv>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	490e      	ldr	r1, [pc, #56]	@ (80042e8 <computeMLXAverage+0x1b8>)
 80042ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
	if (right > 0) MLX_average[2] /= right;
 80042b2:	8a7b      	ldrh	r3, [r7, #18]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d011      	beq.n	80042dc <computeMLXAverage+0x1ac>
 80042b8:	4b0b      	ldr	r3, [pc, #44]	@ (80042e8 <computeMLXAverage+0x1b8>)
 80042ba:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80042be:	8a7b      	ldrh	r3, [r7, #18]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fc f92f 	bl	8000524 <__aeabi_i2d>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4620      	mov	r0, r4
 80042cc:	4629      	mov	r1, r5
 80042ce:	f7fc fabd 	bl	800084c <__aeabi_ddiv>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4904      	ldr	r1, [pc, #16]	@ (80042e8 <computeMLXAverage+0x1b8>)
 80042d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80042dc:	bf00      	nop
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bdb0      	pop	{r4, r5, r7, pc}
 80042e4:	200021d8 	.word	0x200021d8
 80042e8:	20002de0 	.word	0x20002de0

080042ec <main>:

int main(void) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
	HAL_Init();
 80042f2:	f000 fa98 	bl	8004826 <HAL_Init>

	SystemClock_Config();
 80042f6:	f000 f85b 	bl	80043b0 <SystemClock_Config>

	MX_GPIO_Init();
 80042fa:	f7ff fe13 	bl	8003f24 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80042fe:	f000 f9cf 	bl	80046a0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8004302:	f7ff fe59 	bl	8003fb8 <MX_I2C1_Init>
	MLX90640_SetRefreshRate(MLX_ADDR, REFRESH_RATE);
 8004306:	2102      	movs	r1, #2
 8004308:	2033      	movs	r0, #51	@ 0x33
 800430a:	f7fd f809 	bl	8001320 <MLX90640_SetRefreshRate>
	MLX90640_SetChessMode(MLX_ADDR);
 800430e:	2033      	movs	r0, #51	@ 0x33
 8004310:	f7fd f836 	bl	8001380 <MLX90640_SetChessMode>
	status = MLX90640_DumpEE(MLX_ADDR, MLX_eeData);
 8004314:	491e      	ldr	r1, [pc, #120]	@ (8004390 <main+0xa4>)
 8004316:	2033      	movs	r0, #51	@ 0x33
 8004318:	f7fc fe2e 	bl	8000f78 <MLX90640_DumpEE>
 800431c:	4603      	mov	r3, r0
 800431e:	4a1d      	ldr	r2, [pc, #116]	@ (8004394 <main+0xa8>)
 8004320:	6013      	str	r3, [r2, #0]
	printf("\r\nLOADING EEPROM PARAMETERS:%d\r\n", status);
 8004322:	4b1c      	ldr	r3, [pc, #112]	@ (8004394 <main+0xa8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4619      	mov	r1, r3
 8004328:	481b      	ldr	r0, [pc, #108]	@ (8004398 <main+0xac>)
 800432a:	f003 ff59 	bl	80081e0 <iprintf>
	status = MLX90640_ExtractParameters(MLX_eeData, &MLX_params);
 800432e:	491b      	ldr	r1, [pc, #108]	@ (800439c <main+0xb0>)
 8004330:	4817      	ldr	r0, [pc, #92]	@ (8004390 <main+0xa4>)
 8004332:	f7fc ffb0 	bl	8001296 <MLX90640_ExtractParameters>
 8004336:	4603      	mov	r3, r0
 8004338:	4a16      	ldr	r2, [pc, #88]	@ (8004394 <main+0xa8>)
 800433a:	6013      	str	r3, [r2, #0]
	printf("\r\nEXTRACTING PARAMETERS:%d\r\n", status);
 800433c:	4b15      	ldr	r3, [pc, #84]	@ (8004394 <main+0xa8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4619      	mov	r1, r3
 8004342:	4817      	ldr	r0, [pc, #92]	@ (80043a0 <main+0xb4>)
 8004344:	f003 ff4c 	bl	80081e0 <iprintf>

	while (1) {
		status = MLX90640_GetFrameData(MLX_ADDR, MLX_dataFrame);
 8004348:	4916      	ldr	r1, [pc, #88]	@ (80043a4 <main+0xb8>)
 800434a:	2033      	movs	r0, #51	@ 0x33
 800434c:	f7fc fe27 	bl	8000f9e <MLX90640_GetFrameData>
 8004350:	4603      	mov	r3, r0
 8004352:	4a10      	ldr	r2, [pc, #64]	@ (8004394 <main+0xa8>)
 8004354:	6013      	str	r3, [r2, #0]
		float tr = MLX90640_GetTa(MLX_dataFrame, &MLX_params) - TA_SHIFT; //Reflected temperature based on the sensor ambient temperature
 8004356:	4911      	ldr	r1, [pc, #68]	@ (800439c <main+0xb0>)
 8004358:	4812      	ldr	r0, [pc, #72]	@ (80043a4 <main+0xb8>)
 800435a:	f7fd fdc5 	bl	8001ee8 <MLX90640_GetTa>
 800435e:	eef0 7a40 	vmov.f32	s15, s0
 8004362:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8004366:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800436a:	edc7 7a01 	vstr	s15, [r7, #4]
		MLX90640_CalculateTo(MLX_dataFrame, &MLX_params, emissivity, tr,
 800436e:	4b0e      	ldr	r3, [pc, #56]	@ (80043a8 <main+0xbc>)
 8004370:	edd3 7a00 	vldr	s15, [r3]
 8004374:	4a0d      	ldr	r2, [pc, #52]	@ (80043ac <main+0xc0>)
 8004376:	edd7 0a01 	vldr	s1, [r7, #4]
 800437a:	eeb0 0a67 	vmov.f32	s0, s15
 800437e:	4907      	ldr	r1, [pc, #28]	@ (800439c <main+0xb0>)
 8004380:	4808      	ldr	r0, [pc, #32]	@ (80043a4 <main+0xb8>)
 8004382:	f7fd f821 	bl	80013c8 <MLX90640_CalculateTo>
				MLX_to);
		computeMLXAverage();
 8004386:	f7ff fed3 	bl	8004130 <computeMLXAverage>
	while (1) {
 800438a:	bf00      	nop
 800438c:	e7dc      	b.n	8004348 <main+0x5c>
 800438e:	bf00      	nop
 8004390:	20000258 	.word	0x20000258
 8004394:	20002dd8 	.word	0x20002dd8
 8004398:	0800aff8 	.word	0x0800aff8
 800439c:	200008d8 	.word	0x200008d8
 80043a0:	0800b01c 	.word	0x0800b01c
 80043a4:	20001b54 	.word	0x20001b54
 80043a8:	20000000 	.word	0x20000000
 80043ac:	200021d8 	.word	0x200021d8

080043b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */

void SystemClock_Config(void) {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b096      	sub	sp, #88	@ 0x58
 80043b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80043b6:	f107 0314 	add.w	r3, r7, #20
 80043ba:	2244      	movs	r2, #68	@ 0x44
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f003 ff20 	bl	8008204 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80043c4:	463b      	mov	r3, r7
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	605a      	str	r2, [r3, #4]
 80043cc:	609a      	str	r2, [r3, #8]
 80043ce:	60da      	str	r2, [r3, #12]
 80043d0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80043d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80043d6:	f001 fb45 	bl	8005a64 <HAL_PWREx_ControlVoltageScaling>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80043e0:	f000 f848 	bl	8004474 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80043e4:	f001 fb20 	bl	8005a28 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80043e8:	4b21      	ldr	r3, [pc, #132]	@ (8004470 <SystemClock_Config+0xc0>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ee:	4a20      	ldr	r2, [pc, #128]	@ (8004470 <SystemClock_Config+0xc0>)
 80043f0:	f023 0318 	bic.w	r3, r3, #24
 80043f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80043f8:	2314      	movs	r3, #20
 80043fa:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80043fc:	2301      	movs	r3, #1
 80043fe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004400:	2301      	movs	r3, #1
 8004402:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004408:	2360      	movs	r3, #96	@ 0x60
 800440a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800440c:	2302      	movs	r3, #2
 800440e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004410:	2301      	movs	r3, #1
 8004412:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8004414:	2301      	movs	r3, #1
 8004416:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 8004418:	2310      	movs	r3, #16
 800441a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800441c:	2307      	movs	r3, #7
 800441e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004420:	2302      	movs	r3, #2
 8004422:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004424:	2302      	movs	r3, #2
 8004426:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004428:	f107 0314 	add.w	r3, r7, #20
 800442c:	4618      	mov	r0, r3
 800442e:	f001 fb6f 	bl	8005b10 <HAL_RCC_OscConfig>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <SystemClock_Config+0x8c>
		Error_Handler();
 8004438:	f000 f81c 	bl	8004474 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800443c:	230f      	movs	r3, #15
 800443e:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004440:	2303      	movs	r3, #3
 8004442:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004444:	2300      	movs	r3, #0
 8004446:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8004450:	463b      	mov	r3, r7
 8004452:	2101      	movs	r1, #1
 8004454:	4618      	mov	r0, r3
 8004456:	f001 ff6f 	bl	8006338 <HAL_RCC_ClockConfig>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <SystemClock_Config+0xb4>
		Error_Handler();
 8004460:	f000 f808 	bl	8004474 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8004464:	f002 fb82 	bl	8006b6c <HAL_RCCEx_EnableMSIPLLMode>
}
 8004468:	bf00      	nop
 800446a:	3758      	adds	r7, #88	@ 0x58
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40021000 	.word	0x40021000

08004474 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004478:	b672      	cpsid	i
}
 800447a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <Error_Handler+0x8>

08004480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004486:	4b0f      	ldr	r3, [pc, #60]	@ (80044c4 <HAL_MspInit+0x44>)
 8004488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800448a:	4a0e      	ldr	r2, [pc, #56]	@ (80044c4 <HAL_MspInit+0x44>)
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	6613      	str	r3, [r2, #96]	@ 0x60
 8004492:	4b0c      	ldr	r3, [pc, #48]	@ (80044c4 <HAL_MspInit+0x44>)
 8004494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800449e:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <HAL_MspInit+0x44>)
 80044a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a2:	4a08      	ldr	r2, [pc, #32]	@ (80044c4 <HAL_MspInit+0x44>)
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80044aa:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <HAL_MspInit+0x44>)
 80044ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000

080044c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80044cc:	bf00      	nop
 80044ce:	e7fd      	b.n	80044cc <NMI_Handler+0x4>

080044d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044d4:	bf00      	nop
 80044d6:	e7fd      	b.n	80044d4 <HardFault_Handler+0x4>

080044d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044dc:	bf00      	nop
 80044de:	e7fd      	b.n	80044dc <MemManage_Handler+0x4>

080044e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044e4:	bf00      	nop
 80044e6:	e7fd      	b.n	80044e4 <BusFault_Handler+0x4>

080044e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044ec:	bf00      	nop
 80044ee:	e7fd      	b.n	80044ec <UsageFault_Handler+0x4>

080044f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044fe:	b480      	push	{r7}
 8004500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004502:	bf00      	nop
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004510:	bf00      	nop
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800451e:	f000 f9d7 	bl	80048d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}

08004526 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004526:	b480      	push	{r7}
 8004528:	af00      	add	r7, sp, #0
  return 1;
 800452a:	2301      	movs	r3, #1
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <_kill>:

int _kill(int pid, int sig)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b082      	sub	sp, #8
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004540:	f003 fe6c 	bl	800821c <__errno>
 8004544:	4603      	mov	r3, r0
 8004546:	2216      	movs	r2, #22
 8004548:	601a      	str	r2, [r3, #0]
  return -1;
 800454a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <_exit>:

void _exit (int status)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800455e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7ff ffe7 	bl	8004536 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004568:	bf00      	nop
 800456a:	e7fd      	b.n	8004568 <_exit+0x12>

0800456c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	e00a      	b.n	8004594 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800457e:	f3af 8000 	nop.w
 8004582:	4601      	mov	r1, r0
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	60ba      	str	r2, [r7, #8]
 800458a:	b2ca      	uxtb	r2, r1
 800458c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	3301      	adds	r3, #1
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	429a      	cmp	r2, r3
 800459a:	dbf0      	blt.n	800457e <_read+0x12>
  }

  return len;
 800459c:	687b      	ldr	r3, [r7, #4]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80045ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045ce:	605a      	str	r2, [r3, #4]
  return 0;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <_isatty>:

int _isatty(int file)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80045e6:	2301      	movs	r3, #1
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004618:	4a14      	ldr	r2, [pc, #80]	@ (800466c <_sbrk+0x5c>)
 800461a:	4b15      	ldr	r3, [pc, #84]	@ (8004670 <_sbrk+0x60>)
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004624:	4b13      	ldr	r3, [pc, #76]	@ (8004674 <_sbrk+0x64>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d102      	bne.n	8004632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800462c:	4b11      	ldr	r3, [pc, #68]	@ (8004674 <_sbrk+0x64>)
 800462e:	4a12      	ldr	r2, [pc, #72]	@ (8004678 <_sbrk+0x68>)
 8004630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004632:	4b10      	ldr	r3, [pc, #64]	@ (8004674 <_sbrk+0x64>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4413      	add	r3, r2
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	429a      	cmp	r2, r3
 800463e:	d207      	bcs.n	8004650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004640:	f003 fdec 	bl	800821c <__errno>
 8004644:	4603      	mov	r3, r0
 8004646:	220c      	movs	r2, #12
 8004648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800464a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800464e:	e009      	b.n	8004664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004650:	4b08      	ldr	r3, [pc, #32]	@ (8004674 <_sbrk+0x64>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004656:	4b07      	ldr	r3, [pc, #28]	@ (8004674 <_sbrk+0x64>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4413      	add	r3, r2
 800465e:	4a05      	ldr	r2, [pc, #20]	@ (8004674 <_sbrk+0x64>)
 8004660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004662:	68fb      	ldr	r3, [r7, #12]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20010000 	.word	0x20010000
 8004670:	00000400 	.word	0x00000400
 8004674:	20002df8 	.word	0x20002df8
 8004678:	20002fd8 	.word	0x20002fd8

0800467c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004680:	4b06      	ldr	r3, [pc, #24]	@ (800469c <SystemInit+0x20>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004686:	4a05      	ldr	r2, [pc, #20]	@ (800469c <SystemInit+0x20>)
 8004688:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800468c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004690:	bf00      	nop
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	e000ed00 	.word	0xe000ed00

080046a0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80046a4:	4b14      	ldr	r3, [pc, #80]	@ (80046f8 <MX_USART2_UART_Init+0x58>)
 80046a6:	4a15      	ldr	r2, [pc, #84]	@ (80046fc <MX_USART2_UART_Init+0x5c>)
 80046a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80046aa:	4b13      	ldr	r3, [pc, #76]	@ (80046f8 <MX_USART2_UART_Init+0x58>)
 80046ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80046b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80046b2:	4b11      	ldr	r3, [pc, #68]	@ (80046f8 <MX_USART2_UART_Init+0x58>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80046b8:	4b0f      	ldr	r3, [pc, #60]	@ (80046f8 <MX_USART2_UART_Init+0x58>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80046be:	4b0e      	ldr	r3, [pc, #56]	@ (80046f8 <MX_USART2_UART_Init+0x58>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80046c4:	4b0c      	ldr	r3, [pc, #48]	@ (80046f8 <MX_USART2_UART_Init+0x58>)
 80046c6:	220c      	movs	r2, #12
 80046c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046ca:	4b0b      	ldr	r3, [pc, #44]	@ (80046f8 <MX_USART2_UART_Init+0x58>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80046d0:	4b09      	ldr	r3, [pc, #36]	@ (80046f8 <MX_USART2_UART_Init+0x58>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046d6:	4b08      	ldr	r3, [pc, #32]	@ (80046f8 <MX_USART2_UART_Init+0x58>)
 80046d8:	2200      	movs	r2, #0
 80046da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046dc:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <MX_USART2_UART_Init+0x58>)
 80046de:	2200      	movs	r2, #0
 80046e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80046e2:	4805      	ldr	r0, [pc, #20]	@ (80046f8 <MX_USART2_UART_Init+0x58>)
 80046e4:	f002 fb44 	bl	8006d70 <HAL_UART_Init>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80046ee:	f7ff fec1 	bl	8004474 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80046f2:	bf00      	nop
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20002dfc 	.word	0x20002dfc
 80046fc:	40004400 	.word	0x40004400

08004700 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b09e      	sub	sp, #120	@ 0x78
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004708:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004718:	f107 0310 	add.w	r3, r7, #16
 800471c:	2254      	movs	r2, #84	@ 0x54
 800471e:	2100      	movs	r1, #0
 8004720:	4618      	mov	r0, r3
 8004722:	f003 fd6f 	bl	8008204 <memset>
  if(uartHandle->Instance==USART2)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a28      	ldr	r2, [pc, #160]	@ (80047cc <HAL_UART_MspInit+0xcc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d148      	bne.n	80047c2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004730:	2302      	movs	r3, #2
 8004732:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004734:	2300      	movs	r3, #0
 8004736:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004738:	f107 0310 	add.w	r3, r7, #16
 800473c:	4618      	mov	r0, r3
 800473e:	f002 f81f 	bl	8006780 <HAL_RCCEx_PeriphCLKConfig>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004748:	f7ff fe94 	bl	8004474 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800474c:	4b20      	ldr	r3, [pc, #128]	@ (80047d0 <HAL_UART_MspInit+0xd0>)
 800474e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004750:	4a1f      	ldr	r2, [pc, #124]	@ (80047d0 <HAL_UART_MspInit+0xd0>)
 8004752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004756:	6593      	str	r3, [r2, #88]	@ 0x58
 8004758:	4b1d      	ldr	r3, [pc, #116]	@ (80047d0 <HAL_UART_MspInit+0xd0>)
 800475a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004764:	4b1a      	ldr	r3, [pc, #104]	@ (80047d0 <HAL_UART_MspInit+0xd0>)
 8004766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004768:	4a19      	ldr	r2, [pc, #100]	@ (80047d0 <HAL_UART_MspInit+0xd0>)
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004770:	4b17      	ldr	r3, [pc, #92]	@ (80047d0 <HAL_UART_MspInit+0xd0>)
 8004772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800477c:	2304      	movs	r3, #4
 800477e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004780:	2302      	movs	r3, #2
 8004782:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004784:	2300      	movs	r3, #0
 8004786:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004788:	2303      	movs	r3, #3
 800478a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800478c:	2307      	movs	r3, #7
 800478e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004790:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004794:	4619      	mov	r1, r3
 8004796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800479a:	f000 f99f 	bl	8004adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800479e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047a2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a4:	2302      	movs	r3, #2
 80047a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047ac:	2303      	movs	r3, #3
 80047ae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80047b0:	2303      	movs	r3, #3
 80047b2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80047b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80047b8:	4619      	mov	r1, r3
 80047ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80047be:	f000 f98d 	bl	8004adc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80047c2:	bf00      	nop
 80047c4:	3778      	adds	r7, #120	@ 0x78
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40004400 	.word	0x40004400
 80047d0:	40021000 	.word	0x40021000

080047d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80047d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800480c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80047d8:	f7ff ff50 	bl	800467c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047dc:	480c      	ldr	r0, [pc, #48]	@ (8004810 <LoopForever+0x6>)
  ldr r1, =_edata
 80047de:	490d      	ldr	r1, [pc, #52]	@ (8004814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80047e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004818 <LoopForever+0xe>)
  movs r3, #0
 80047e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047e4:	e002      	b.n	80047ec <LoopCopyDataInit>

080047e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047ea:	3304      	adds	r3, #4

080047ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047f0:	d3f9      	bcc.n	80047e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047f2:	4a0a      	ldr	r2, [pc, #40]	@ (800481c <LoopForever+0x12>)
  ldr r4, =_ebss
 80047f4:	4c0a      	ldr	r4, [pc, #40]	@ (8004820 <LoopForever+0x16>)
  movs r3, #0
 80047f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047f8:	e001      	b.n	80047fe <LoopFillZerobss>

080047fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047fc:	3204      	adds	r2, #4

080047fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004800:	d3fb      	bcc.n	80047fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004802:	f003 fd11 	bl	8008228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004806:	f7ff fd71 	bl	80042ec <main>

0800480a <LoopForever>:

LoopForever:
    b LoopForever
 800480a:	e7fe      	b.n	800480a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800480c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004814:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004818:	0800b438 	.word	0x0800b438
  ldr r2, =_sbss
 800481c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004820:	20002fd4 	.word	0x20002fd4

08004824 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004824:	e7fe      	b.n	8004824 <ADC1_IRQHandler>

08004826 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004830:	2003      	movs	r0, #3
 8004832:	f000 f91f 	bl	8004a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004836:	2000      	movs	r0, #0
 8004838:	f000 f80e 	bl	8004858 <HAL_InitTick>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	71fb      	strb	r3, [r7, #7]
 8004846:	e001      	b.n	800484c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004848:	f7ff fe1a 	bl	8004480 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800484c:	79fb      	ldrb	r3, [r7, #7]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004864:	4b17      	ldr	r3, [pc, #92]	@ (80048c4 <HAL_InitTick+0x6c>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d023      	beq.n	80048b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800486c:	4b16      	ldr	r3, [pc, #88]	@ (80048c8 <HAL_InitTick+0x70>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	4b14      	ldr	r3, [pc, #80]	@ (80048c4 <HAL_InitTick+0x6c>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	4619      	mov	r1, r3
 8004876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800487a:	fbb3 f3f1 	udiv	r3, r3, r1
 800487e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f91d 	bl	8004ac2 <HAL_SYSTICK_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10f      	bne.n	80048ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b0f      	cmp	r3, #15
 8004892:	d809      	bhi.n	80048a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004894:	2200      	movs	r2, #0
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800489c:	f000 f8f5 	bl	8004a8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80048a0:	4a0a      	ldr	r2, [pc, #40]	@ (80048cc <HAL_InitTick+0x74>)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	e007      	b.n	80048b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	73fb      	strb	r3, [r7, #15]
 80048ac:	e004      	b.n	80048b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	73fb      	strb	r3, [r7, #15]
 80048b2:	e001      	b.n	80048b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	2000000c 	.word	0x2000000c
 80048c8:	20000004 	.word	0x20000004
 80048cc:	20000008 	.word	0x20000008

080048d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80048d4:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <HAL_IncTick+0x20>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	4b06      	ldr	r3, [pc, #24]	@ (80048f4 <HAL_IncTick+0x24>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4413      	add	r3, r2
 80048e0:	4a04      	ldr	r2, [pc, #16]	@ (80048f4 <HAL_IncTick+0x24>)
 80048e2:	6013      	str	r3, [r2, #0]
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	2000000c 	.word	0x2000000c
 80048f4:	20002e84 	.word	0x20002e84

080048f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  return uwTick;
 80048fc:	4b03      	ldr	r3, [pc, #12]	@ (800490c <HAL_GetTick+0x14>)
 80048fe:	681b      	ldr	r3, [r3, #0]
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20002e84 	.word	0x20002e84

08004910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004920:	4b0c      	ldr	r3, [pc, #48]	@ (8004954 <__NVIC_SetPriorityGrouping+0x44>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800492c:	4013      	ands	r3, r2
 800492e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800493c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004942:	4a04      	ldr	r2, [pc, #16]	@ (8004954 <__NVIC_SetPriorityGrouping+0x44>)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	60d3      	str	r3, [r2, #12]
}
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	e000ed00 	.word	0xe000ed00

08004958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800495c:	4b04      	ldr	r3, [pc, #16]	@ (8004970 <__NVIC_GetPriorityGrouping+0x18>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	0a1b      	lsrs	r3, r3, #8
 8004962:	f003 0307 	and.w	r3, r3, #7
}
 8004966:	4618      	mov	r0, r3
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	e000ed00 	.word	0xe000ed00

08004974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	6039      	str	r1, [r7, #0]
 800497e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004984:	2b00      	cmp	r3, #0
 8004986:	db0a      	blt.n	800499e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	b2da      	uxtb	r2, r3
 800498c:	490c      	ldr	r1, [pc, #48]	@ (80049c0 <__NVIC_SetPriority+0x4c>)
 800498e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004992:	0112      	lsls	r2, r2, #4
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	440b      	add	r3, r1
 8004998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800499c:	e00a      	b.n	80049b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	4908      	ldr	r1, [pc, #32]	@ (80049c4 <__NVIC_SetPriority+0x50>)
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	3b04      	subs	r3, #4
 80049ac:	0112      	lsls	r2, r2, #4
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	440b      	add	r3, r1
 80049b2:	761a      	strb	r2, [r3, #24]
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	e000e100 	.word	0xe000e100
 80049c4:	e000ed00 	.word	0xe000ed00

080049c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b089      	sub	sp, #36	@ 0x24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f1c3 0307 	rsb	r3, r3, #7
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	bf28      	it	cs
 80049e6:	2304      	movcs	r3, #4
 80049e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	3304      	adds	r3, #4
 80049ee:	2b06      	cmp	r3, #6
 80049f0:	d902      	bls.n	80049f8 <NVIC_EncodePriority+0x30>
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	3b03      	subs	r3, #3
 80049f6:	e000      	b.n	80049fa <NVIC_EncodePriority+0x32>
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	43da      	mvns	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	401a      	ands	r2, r3
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1a:	43d9      	mvns	r1, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a20:	4313      	orrs	r3, r2
         );
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3724      	adds	r7, #36	@ 0x24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a40:	d301      	bcc.n	8004a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a42:	2301      	movs	r3, #1
 8004a44:	e00f      	b.n	8004a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a46:	4a0a      	ldr	r2, [pc, #40]	@ (8004a70 <SysTick_Config+0x40>)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a4e:	210f      	movs	r1, #15
 8004a50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a54:	f7ff ff8e 	bl	8004974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a58:	4b05      	ldr	r3, [pc, #20]	@ (8004a70 <SysTick_Config+0x40>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a5e:	4b04      	ldr	r3, [pc, #16]	@ (8004a70 <SysTick_Config+0x40>)
 8004a60:	2207      	movs	r2, #7
 8004a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	e000e010 	.word	0xe000e010

08004a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7ff ff47 	bl	8004910 <__NVIC_SetPriorityGrouping>
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	4603      	mov	r3, r0
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a9c:	f7ff ff5c 	bl	8004958 <__NVIC_GetPriorityGrouping>
 8004aa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	6978      	ldr	r0, [r7, #20]
 8004aa8:	f7ff ff8e 	bl	80049c8 <NVIC_EncodePriority>
 8004aac:	4602      	mov	r2, r0
 8004aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff ff5d 	bl	8004974 <__NVIC_SetPriority>
}
 8004aba:	bf00      	nop
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff ffb0 	bl	8004a30 <SysTick_Config>
 8004ad0:	4603      	mov	r3, r0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004aea:	e148      	b.n	8004d7e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	2101      	movs	r1, #1
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	fa01 f303 	lsl.w	r3, r1, r3
 8004af8:	4013      	ands	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 813a 	beq.w	8004d78 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d005      	beq.n	8004b1c <HAL_GPIO_Init+0x40>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 0303 	and.w	r3, r3, #3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d130      	bne.n	8004b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	2203      	movs	r2, #3
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	4013      	ands	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b52:	2201      	movs	r2, #1
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	091b      	lsrs	r3, r3, #4
 8004b68:	f003 0201 	and.w	r2, r3, #1
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d017      	beq.n	8004bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	2203      	movs	r2, #3
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d123      	bne.n	8004c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	08da      	lsrs	r2, r3, #3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3208      	adds	r2, #8
 8004bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	220f      	movs	r2, #15
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4013      	ands	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	08da      	lsrs	r2, r3, #3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3208      	adds	r2, #8
 8004c08:	6939      	ldr	r1, [r7, #16]
 8004c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	2203      	movs	r2, #3
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4013      	ands	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f003 0203 	and.w	r2, r3, #3
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8094 	beq.w	8004d78 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c50:	4b52      	ldr	r3, [pc, #328]	@ (8004d9c <HAL_GPIO_Init+0x2c0>)
 8004c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c54:	4a51      	ldr	r2, [pc, #324]	@ (8004d9c <HAL_GPIO_Init+0x2c0>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c5c:	4b4f      	ldr	r3, [pc, #316]	@ (8004d9c <HAL_GPIO_Init+0x2c0>)
 8004c5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004c68:	4a4d      	ldr	r2, [pc, #308]	@ (8004da0 <HAL_GPIO_Init+0x2c4>)
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	089b      	lsrs	r3, r3, #2
 8004c6e:	3302      	adds	r3, #2
 8004c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	f003 0303 	and.w	r3, r3, #3
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	220f      	movs	r2, #15
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	43db      	mvns	r3, r3
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c92:	d00d      	beq.n	8004cb0 <HAL_GPIO_Init+0x1d4>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a43      	ldr	r2, [pc, #268]	@ (8004da4 <HAL_GPIO_Init+0x2c8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d007      	beq.n	8004cac <HAL_GPIO_Init+0x1d0>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a42      	ldr	r2, [pc, #264]	@ (8004da8 <HAL_GPIO_Init+0x2cc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d101      	bne.n	8004ca8 <HAL_GPIO_Init+0x1cc>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e004      	b.n	8004cb2 <HAL_GPIO_Init+0x1d6>
 8004ca8:	2307      	movs	r3, #7
 8004caa:	e002      	b.n	8004cb2 <HAL_GPIO_Init+0x1d6>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <HAL_GPIO_Init+0x1d6>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	f002 0203 	and.w	r2, r2, #3
 8004cb8:	0092      	lsls	r2, r2, #2
 8004cba:	4093      	lsls	r3, r2
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004cc2:	4937      	ldr	r1, [pc, #220]	@ (8004da0 <HAL_GPIO_Init+0x2c4>)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	089b      	lsrs	r3, r3, #2
 8004cc8:	3302      	adds	r3, #2
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cd0:	4b36      	ldr	r3, [pc, #216]	@ (8004dac <HAL_GPIO_Init+0x2d0>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8004dac <HAL_GPIO_Init+0x2d0>)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8004dac <HAL_GPIO_Init+0x2d0>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	43db      	mvns	r3, r3
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d1e:	4a23      	ldr	r2, [pc, #140]	@ (8004dac <HAL_GPIO_Init+0x2d0>)
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004d24:	4b21      	ldr	r3, [pc, #132]	@ (8004dac <HAL_GPIO_Init+0x2d0>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4013      	ands	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d48:	4a18      	ldr	r2, [pc, #96]	@ (8004dac <HAL_GPIO_Init+0x2d0>)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004d4e:	4b17      	ldr	r3, [pc, #92]	@ (8004dac <HAL_GPIO_Init+0x2d0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	43db      	mvns	r3, r3
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d72:	4a0e      	ldr	r2, [pc, #56]	@ (8004dac <HAL_GPIO_Init+0x2d0>)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f47f aeaf 	bne.w	8004aec <HAL_GPIO_Init+0x10>
  }
}
 8004d8e:	bf00      	nop
 8004d90:	bf00      	nop
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	40010000 	.word	0x40010000
 8004da4:	48000400 	.word	0x48000400
 8004da8:	48000800 	.word	0x48000800
 8004dac:	40010400 	.word	0x40010400

08004db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	807b      	strh	r3, [r7, #2]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dc0:	787b      	ldrb	r3, [r7, #1]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004dc6:	887a      	ldrh	r2, [r7, #2]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004dcc:	e002      	b.n	8004dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dce:	887a      	ldrh	r2, [r7, #2]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e08d      	b.n	8004f0e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff f916 	bl	8004038 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2224      	movs	r2, #36	@ 0x24
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d107      	bne.n	8004e5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e56:	609a      	str	r2, [r3, #8]
 8004e58:	e006      	b.n	8004e68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004e66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d108      	bne.n	8004e82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e7e:	605a      	str	r2, [r3, #4]
 8004e80:	e007      	b.n	8004e92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ea0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ea4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004eb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69d9      	ldr	r1, [r3, #28]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1a      	ldr	r2, [r3, #32]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	4608      	mov	r0, r1
 8004f22:	4611      	mov	r1, r2
 8004f24:	461a      	mov	r2, r3
 8004f26:	4603      	mov	r3, r0
 8004f28:	817b      	strh	r3, [r7, #10]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	813b      	strh	r3, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	f040 80f9 	bne.w	8005132 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <HAL_I2C_Mem_Write+0x34>
 8004f46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d105      	bne.n	8004f58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f52:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0ed      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_I2C_Mem_Write+0x4e>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e0e6      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f6e:	f7ff fcc3 	bl	80048f8 <HAL_GetTick>
 8004f72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	2319      	movs	r3, #25
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fac3 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0d1      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2221      	movs	r2, #33	@ 0x21
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2240      	movs	r2, #64	@ 0x40
 8004f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a3a      	ldr	r2, [r7, #32]
 8004faa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fb8:	88f8      	ldrh	r0, [r7, #6]
 8004fba:	893a      	ldrh	r2, [r7, #8]
 8004fbc:	8979      	ldrh	r1, [r7, #10]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 f9d3 	bl	8005374 <I2C_RequestMemoryWrite>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0a9      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2bff      	cmp	r3, #255	@ 0xff
 8004fe8:	d90e      	bls.n	8005008 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	22ff      	movs	r2, #255	@ 0xff
 8004fee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	8979      	ldrh	r1, [r7, #10]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 fc47 	bl	8005894 <I2C_TransferConfig>
 8005006:	e00f      	b.n	8005028 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005016:	b2da      	uxtb	r2, r3
 8005018:	8979      	ldrh	r1, [r7, #10]
 800501a:	2300      	movs	r3, #0
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 fc36 	bl	8005894 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 fac6 	bl	80055be <I2C_WaitOnTXISFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e07b      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005040:	781a      	ldrb	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d034      	beq.n	80050e0 <HAL_I2C_Mem_Write+0x1c8>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507a:	2b00      	cmp	r3, #0
 800507c:	d130      	bne.n	80050e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005084:	2200      	movs	r2, #0
 8005086:	2180      	movs	r1, #128	@ 0x80
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fa3f 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e04d      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	2bff      	cmp	r3, #255	@ 0xff
 80050a0:	d90e      	bls.n	80050c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	22ff      	movs	r2, #255	@ 0xff
 80050a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	8979      	ldrh	r1, [r7, #10]
 80050b0:	2300      	movs	r3, #0
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 fbeb 	bl	8005894 <I2C_TransferConfig>
 80050be:	e00f      	b.n	80050e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	8979      	ldrh	r1, [r7, #10]
 80050d2:	2300      	movs	r3, #0
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 fbda 	bl	8005894 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d19e      	bne.n	8005028 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 faac 	bl	800564c <I2C_WaitOnSTOPFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e01a      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2220      	movs	r2, #32
 8005104:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4b0a      	ldr	r3, [pc, #40]	@ (800513c <HAL_I2C_Mem_Write+0x224>)
 8005112:	400b      	ands	r3, r1
 8005114:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	e000      	b.n	8005134 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005132:	2302      	movs	r3, #2
  }
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	fe00e800 	.word	0xfe00e800

08005140 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	4608      	mov	r0, r1
 800514a:	4611      	mov	r1, r2
 800514c:	461a      	mov	r2, r3
 800514e:	4603      	mov	r3, r0
 8005150:	817b      	strh	r3, [r7, #10]
 8005152:	460b      	mov	r3, r1
 8005154:	813b      	strh	r3, [r7, #8]
 8005156:	4613      	mov	r3, r2
 8005158:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b20      	cmp	r3, #32
 8005164:	f040 80fd 	bne.w	8005362 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_I2C_Mem_Read+0x34>
 800516e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005170:	2b00      	cmp	r3, #0
 8005172:	d105      	bne.n	8005180 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800517a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e0f1      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_I2C_Mem_Read+0x4e>
 800518a:	2302      	movs	r3, #2
 800518c:	e0ea      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005196:	f7ff fbaf 	bl	80048f8 <HAL_GetTick>
 800519a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	2319      	movs	r3, #25
 80051a2:	2201      	movs	r2, #1
 80051a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f9af 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0d5      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2222      	movs	r2, #34	@ 0x22
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2240      	movs	r2, #64	@ 0x40
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a3a      	ldr	r2, [r7, #32]
 80051d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80051d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051e0:	88f8      	ldrh	r0, [r7, #6]
 80051e2:	893a      	ldrh	r2, [r7, #8]
 80051e4:	8979      	ldrh	r1, [r7, #10]
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	4603      	mov	r3, r0
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f913 	bl	800541c <I2C_RequestMemoryRead>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0ad      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	2bff      	cmp	r3, #255	@ 0xff
 8005210:	d90e      	bls.n	8005230 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521c:	b2da      	uxtb	r2, r3
 800521e:	8979      	ldrh	r1, [r7, #10]
 8005220:	4b52      	ldr	r3, [pc, #328]	@ (800536c <HAL_I2C_Mem_Read+0x22c>)
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 fb33 	bl	8005894 <I2C_TransferConfig>
 800522e:	e00f      	b.n	8005250 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800523e:	b2da      	uxtb	r2, r3
 8005240:	8979      	ldrh	r1, [r7, #10]
 8005242:	4b4a      	ldr	r3, [pc, #296]	@ (800536c <HAL_I2C_Mem_Read+0x22c>)
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 fb22 	bl	8005894 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	2200      	movs	r2, #0
 8005258:	2104      	movs	r1, #4
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f956 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e07c      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d034      	beq.n	8005310 <HAL_I2C_Mem_Read+0x1d0>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d130      	bne.n	8005310 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b4:	2200      	movs	r2, #0
 80052b6:	2180      	movs	r1, #128	@ 0x80
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f927 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e04d      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2bff      	cmp	r3, #255	@ 0xff
 80052d0:	d90e      	bls.n	80052f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	8979      	ldrh	r1, [r7, #10]
 80052e0:	2300      	movs	r3, #0
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 fad3 	bl	8005894 <I2C_TransferConfig>
 80052ee:	e00f      	b.n	8005310 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	8979      	ldrh	r1, [r7, #10]
 8005302:	2300      	movs	r3, #0
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fac2 	bl	8005894 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d19a      	bne.n	8005250 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 f994 	bl	800564c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e01a      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2220      	movs	r2, #32
 8005334:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6859      	ldr	r1, [r3, #4]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4b0b      	ldr	r3, [pc, #44]	@ (8005370 <HAL_I2C_Mem_Read+0x230>)
 8005342:	400b      	ands	r3, r1
 8005344:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e000      	b.n	8005364 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005362:	2302      	movs	r3, #2
  }
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	80002400 	.word	0x80002400
 8005370:	fe00e800 	.word	0xfe00e800

08005374 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af02      	add	r7, sp, #8
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	4608      	mov	r0, r1
 800537e:	4611      	mov	r1, r2
 8005380:	461a      	mov	r2, r3
 8005382:	4603      	mov	r3, r0
 8005384:	817b      	strh	r3, [r7, #10]
 8005386:	460b      	mov	r3, r1
 8005388:	813b      	strh	r3, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	b2da      	uxtb	r2, r3
 8005392:	8979      	ldrh	r1, [r7, #10]
 8005394:	4b20      	ldr	r3, [pc, #128]	@ (8005418 <I2C_RequestMemoryWrite+0xa4>)
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 fa79 	bl	8005894 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	69b9      	ldr	r1, [r7, #24]
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 f909 	bl	80055be <I2C_WaitOnTXISFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e02c      	b.n	8005410 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d105      	bne.n	80053c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053bc:	893b      	ldrh	r3, [r7, #8]
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80053c6:	e015      	b.n	80053f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053c8:	893b      	ldrh	r3, [r7, #8]
 80053ca:	0a1b      	lsrs	r3, r3, #8
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	69b9      	ldr	r1, [r7, #24]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f8ef 	bl	80055be <I2C_WaitOnTXISFlagUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e012      	b.n	8005410 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053ea:	893b      	ldrh	r3, [r7, #8]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	2200      	movs	r2, #0
 80053fc:	2180      	movs	r1, #128	@ 0x80
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f884 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	80002000 	.word	0x80002000

0800541c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	4608      	mov	r0, r1
 8005426:	4611      	mov	r1, r2
 8005428:	461a      	mov	r2, r3
 800542a:	4603      	mov	r3, r0
 800542c:	817b      	strh	r3, [r7, #10]
 800542e:	460b      	mov	r3, r1
 8005430:	813b      	strh	r3, [r7, #8]
 8005432:	4613      	mov	r3, r2
 8005434:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	b2da      	uxtb	r2, r3
 800543a:	8979      	ldrh	r1, [r7, #10]
 800543c:	4b20      	ldr	r3, [pc, #128]	@ (80054c0 <I2C_RequestMemoryRead+0xa4>)
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	2300      	movs	r3, #0
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 fa26 	bl	8005894 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	69b9      	ldr	r1, [r7, #24]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f8b6 	bl	80055be <I2C_WaitOnTXISFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e02c      	b.n	80054b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800545c:	88fb      	ldrh	r3, [r7, #6]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d105      	bne.n	800546e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005462:	893b      	ldrh	r3, [r7, #8]
 8005464:	b2da      	uxtb	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	629a      	str	r2, [r3, #40]	@ 0x28
 800546c:	e015      	b.n	800549a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800546e:	893b      	ldrh	r3, [r7, #8]
 8005470:	0a1b      	lsrs	r3, r3, #8
 8005472:	b29b      	uxth	r3, r3
 8005474:	b2da      	uxtb	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	69b9      	ldr	r1, [r7, #24]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f89c 	bl	80055be <I2C_WaitOnTXISFlagUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e012      	b.n	80054b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005490:	893b      	ldrh	r3, [r7, #8]
 8005492:	b2da      	uxtb	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2200      	movs	r2, #0
 80054a2:	2140      	movs	r1, #64	@ 0x40
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f831 	bl	800550c <I2C_WaitOnFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	80002000 	.word	0x80002000

080054c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d103      	bne.n	80054e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2200      	movs	r2, #0
 80054e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d007      	beq.n	8005500 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0201 	orr.w	r2, r2, #1
 80054fe:	619a      	str	r2, [r3, #24]
  }
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	4613      	mov	r3, r2
 800551a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800551c:	e03b      	b.n	8005596 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	6839      	ldr	r1, [r7, #0]
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f8d6 	bl	80056d4 <I2C_IsErrorOccurred>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e041      	b.n	80055b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005538:	d02d      	beq.n	8005596 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553a:	f7ff f9dd 	bl	80048f8 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d302      	bcc.n	8005550 <I2C_WaitOnFlagUntilTimeout+0x44>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d122      	bne.n	8005596 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	4013      	ands	r3, r2
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	429a      	cmp	r2, r3
 800555e:	bf0c      	ite	eq
 8005560:	2301      	moveq	r3, #1
 8005562:	2300      	movne	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	429a      	cmp	r2, r3
 800556c:	d113      	bne.n	8005596 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005572:	f043 0220 	orr.w	r2, r3, #32
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e00f      	b.n	80055b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699a      	ldr	r2, [r3, #24]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4013      	ands	r3, r2
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	bf0c      	ite	eq
 80055a6:	2301      	moveq	r3, #1
 80055a8:	2300      	movne	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d0b4      	beq.n	800551e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055ca:	e033      	b.n	8005634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 f87f 	bl	80056d4 <I2C_IsErrorOccurred>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e031      	b.n	8005644 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055e6:	d025      	beq.n	8005634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e8:	f7ff f986 	bl	80048f8 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d302      	bcc.n	80055fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d11a      	bne.n	8005634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b02      	cmp	r3, #2
 800560a:	d013      	beq.n	8005634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005610:	f043 0220 	orr.w	r2, r3, #32
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2220      	movs	r2, #32
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e007      	b.n	8005644 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b02      	cmp	r3, #2
 8005640:	d1c4      	bne.n	80055cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005658:	e02f      	b.n	80056ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	68b9      	ldr	r1, [r7, #8]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f838 	bl	80056d4 <I2C_IsErrorOccurred>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e02d      	b.n	80056ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566e:	f7ff f943 	bl	80048f8 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	429a      	cmp	r2, r3
 800567c:	d302      	bcc.n	8005684 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d11a      	bne.n	80056ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b20      	cmp	r3, #32
 8005690:	d013      	beq.n	80056ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005696:	f043 0220 	orr.w	r2, r3, #32
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e007      	b.n	80056ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	d1c8      	bne.n	800565a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08a      	sub	sp, #40	@ 0x28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d068      	beq.n	80057d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2210      	movs	r2, #16
 8005706:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005708:	e049      	b.n	800579e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005710:	d045      	beq.n	800579e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005712:	f7ff f8f1 	bl	80048f8 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	429a      	cmp	r2, r3
 8005720:	d302      	bcc.n	8005728 <I2C_IsErrorOccurred+0x54>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d13a      	bne.n	800579e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005732:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800573a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005746:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800574a:	d121      	bne.n	8005790 <I2C_IsErrorOccurred+0xbc>
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005752:	d01d      	beq.n	8005790 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005754:	7cfb      	ldrb	r3, [r7, #19]
 8005756:	2b20      	cmp	r3, #32
 8005758:	d01a      	beq.n	8005790 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005768:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800576a:	f7ff f8c5 	bl	80048f8 <HAL_GetTick>
 800576e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005770:	e00e      	b.n	8005790 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005772:	f7ff f8c1 	bl	80048f8 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b19      	cmp	r3, #25
 800577e:	d907      	bls.n	8005790 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	f043 0320 	orr.w	r3, r3, #32
 8005786:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800578e:	e006      	b.n	800579e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b20      	cmp	r3, #32
 800579c:	d1e9      	bne.n	8005772 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	f003 0320 	and.w	r3, r3, #32
 80057a8:	2b20      	cmp	r3, #32
 80057aa:	d003      	beq.n	80057b4 <I2C_IsErrorOccurred+0xe0>
 80057ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0aa      	beq.n	800570a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80057b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d103      	bne.n	80057c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2220      	movs	r2, #32
 80057c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	f043 0304 	orr.w	r3, r3, #4
 80057ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00b      	beq.n	80057fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	f043 0308 	orr.w	r3, r3, #8
 800580c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005816:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00b      	beq.n	8005840 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	f043 0302 	orr.w	r3, r3, #2
 800582e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005838:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01c      	beq.n	8005882 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f7ff fe3b 	bl	80054c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6859      	ldr	r1, [r3, #4]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <I2C_IsErrorOccurred+0x1bc>)
 800585a:	400b      	ands	r3, r1
 800585c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	431a      	orrs	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2220      	movs	r2, #32
 800586e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005882:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005886:	4618      	mov	r0, r3
 8005888:	3728      	adds	r7, #40	@ 0x28
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	fe00e800 	.word	0xfe00e800

08005894 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	607b      	str	r3, [r7, #4]
 800589e:	460b      	mov	r3, r1
 80058a0:	817b      	strh	r3, [r7, #10]
 80058a2:	4613      	mov	r3, r2
 80058a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058a6:	897b      	ldrh	r3, [r7, #10]
 80058a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058ac:	7a7b      	ldrb	r3, [r7, #9]
 80058ae:	041b      	lsls	r3, r3, #16
 80058b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	4313      	orrs	r3, r2
 80058be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80058c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	0d5b      	lsrs	r3, r3, #21
 80058ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80058d2:	4b08      	ldr	r3, [pc, #32]	@ (80058f4 <I2C_TransferConfig+0x60>)
 80058d4:	430b      	orrs	r3, r1
 80058d6:	43db      	mvns	r3, r3
 80058d8:	ea02 0103 	and.w	r1, r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80058e6:	bf00      	nop
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	03ff63ff 	.word	0x03ff63ff

080058f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b20      	cmp	r3, #32
 800590c:	d138      	bne.n	8005980 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005918:	2302      	movs	r3, #2
 800591a:	e032      	b.n	8005982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2224      	movs	r2, #36	@ 0x24
 8005928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0201 	bic.w	r2, r2, #1
 800593a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800594a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6819      	ldr	r1, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0201 	orr.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	e000      	b.n	8005982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005980:	2302      	movs	r3, #2
  }
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800598e:	b480      	push	{r7}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d139      	bne.n	8005a18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e033      	b.n	8005a1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2224      	movs	r2, #36	@ 0x24
 80059be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0201 	bic.w	r2, r2, #1
 80059d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80059e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	021b      	lsls	r3, r3, #8
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	e000      	b.n	8005a1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a18:	2302      	movs	r3, #2
  }
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
	...

08005a28 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a2c:	4b05      	ldr	r3, [pc, #20]	@ (8005a44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a04      	ldr	r2, [pc, #16]	@ (8005a44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a36:	6013      	str	r3, [r2, #0]
}
 8005a38:	bf00      	nop
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40007000 	.word	0x40007000

08005a48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005a4c:	4b04      	ldr	r3, [pc, #16]	@ (8005a60 <HAL_PWREx_GetVoltageRange+0x18>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40007000 	.word	0x40007000

08005a64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a72:	d130      	bne.n	8005ad6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a74:	4b23      	ldr	r3, [pc, #140]	@ (8005b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a80:	d038      	beq.n	8005af4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a82:	4b20      	ldr	r3, [pc, #128]	@ (8005b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005a8a:	4a1e      	ldr	r2, [pc, #120]	@ (8005b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a92:	4b1d      	ldr	r3, [pc, #116]	@ (8005b08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2232      	movs	r2, #50	@ 0x32
 8005a98:	fb02 f303 	mul.w	r3, r2, r3
 8005a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8005b0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	0c9b      	lsrs	r3, r3, #18
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aa8:	e002      	b.n	8005ab0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3b01      	subs	r3, #1
 8005aae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ab0:	4b14      	ldr	r3, [pc, #80]	@ (8005b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005abc:	d102      	bne.n	8005ac4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f2      	bne.n	8005aaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005acc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ad0:	d110      	bne.n	8005af4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e00f      	b.n	8005af6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8005b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ae2:	d007      	beq.n	8005af4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ae4:	4b07      	ldr	r3, [pc, #28]	@ (8005b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005aec:	4a05      	ldr	r2, [pc, #20]	@ (8005b04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005aee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005af2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40007000 	.word	0x40007000
 8005b08:	20000004 	.word	0x20000004
 8005b0c:	431bde83 	.word	0x431bde83

08005b10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d102      	bne.n	8005b24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f000 bc02 	b.w	8006328 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b24:	4b96      	ldr	r3, [pc, #600]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f003 030c 	and.w	r3, r3, #12
 8005b2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b2e:	4b94      	ldr	r3, [pc, #592]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f003 0303 	and.w	r3, r3, #3
 8005b36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80e4 	beq.w	8005d0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d007      	beq.n	8005b5c <HAL_RCC_OscConfig+0x4c>
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2b0c      	cmp	r3, #12
 8005b50:	f040 808b 	bne.w	8005c6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	f040 8087 	bne.w	8005c6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b5c:	4b88      	ldr	r3, [pc, #544]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d005      	beq.n	8005b74 <HAL_RCC_OscConfig+0x64>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d101      	bne.n	8005b74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e3d9      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1a      	ldr	r2, [r3, #32]
 8005b78:	4b81      	ldr	r3, [pc, #516]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d004      	beq.n	8005b8e <HAL_RCC_OscConfig+0x7e>
 8005b84:	4b7e      	ldr	r3, [pc, #504]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b8c:	e005      	b.n	8005b9a <HAL_RCC_OscConfig+0x8a>
 8005b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b94:	091b      	lsrs	r3, r3, #4
 8005b96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d223      	bcs.n	8005be6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fd8c 	bl	80066c0 <RCC_SetFlashLatencyFromMSIRange>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e3ba      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bb2:	4b73      	ldr	r3, [pc, #460]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a72      	ldr	r2, [pc, #456]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005bb8:	f043 0308 	orr.w	r3, r3, #8
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	4b70      	ldr	r3, [pc, #448]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	496d      	ldr	r1, [pc, #436]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bd0:	4b6b      	ldr	r3, [pc, #428]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	4968      	ldr	r1, [pc, #416]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	604b      	str	r3, [r1, #4]
 8005be4:	e025      	b.n	8005c32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005be6:	4b66      	ldr	r3, [pc, #408]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a65      	ldr	r2, [pc, #404]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005bec:	f043 0308 	orr.w	r3, r3, #8
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	4b63      	ldr	r3, [pc, #396]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	4960      	ldr	r1, [pc, #384]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c04:	4b5e      	ldr	r3, [pc, #376]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	021b      	lsls	r3, r3, #8
 8005c12:	495b      	ldr	r1, [pc, #364]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d109      	bne.n	8005c32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fd4c 	bl	80066c0 <RCC_SetFlashLatencyFromMSIRange>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e37a      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c32:	f000 fc81 	bl	8006538 <HAL_RCC_GetSysClockFreq>
 8005c36:	4602      	mov	r2, r0
 8005c38:	4b51      	ldr	r3, [pc, #324]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	091b      	lsrs	r3, r3, #4
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	4950      	ldr	r1, [pc, #320]	@ (8005d84 <HAL_RCC_OscConfig+0x274>)
 8005c44:	5ccb      	ldrb	r3, [r1, r3]
 8005c46:	f003 031f 	and.w	r3, r3, #31
 8005c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4e:	4a4e      	ldr	r2, [pc, #312]	@ (8005d88 <HAL_RCC_OscConfig+0x278>)
 8005c50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005c52:	4b4e      	ldr	r3, [pc, #312]	@ (8005d8c <HAL_RCC_OscConfig+0x27c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe fdfe 	bl	8004858 <HAL_InitTick>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d052      	beq.n	8005d0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	e35e      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d032      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c72:	4b43      	ldr	r3, [pc, #268]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a42      	ldr	r2, [pc, #264]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005c78:	f043 0301 	orr.w	r3, r3, #1
 8005c7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c7e:	f7fe fe3b 	bl	80048f8 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c86:	f7fe fe37 	bl	80048f8 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e347      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c98:	4b39      	ldr	r3, [pc, #228]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ca4:	4b36      	ldr	r3, [pc, #216]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a35      	ldr	r2, [pc, #212]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005caa:	f043 0308 	orr.w	r3, r3, #8
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	4b33      	ldr	r3, [pc, #204]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	4930      	ldr	r1, [pc, #192]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	021b      	lsls	r3, r3, #8
 8005cd0:	492b      	ldr	r1, [pc, #172]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	604b      	str	r3, [r1, #4]
 8005cd6:	e01a      	b.n	8005d0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005cd8:	4b29      	ldr	r3, [pc, #164]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a28      	ldr	r2, [pc, #160]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005cde:	f023 0301 	bic.w	r3, r3, #1
 8005ce2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ce4:	f7fe fe08 	bl	80048f8 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cec:	f7fe fe04 	bl	80048f8 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e314      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005cfe:	4b20      	ldr	r3, [pc, #128]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f0      	bne.n	8005cec <HAL_RCC_OscConfig+0x1dc>
 8005d0a:	e000      	b.n	8005d0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d073      	beq.n	8005e02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d005      	beq.n	8005d2c <HAL_RCC_OscConfig+0x21c>
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	2b0c      	cmp	r3, #12
 8005d24:	d10e      	bne.n	8005d44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d10b      	bne.n	8005d44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d2c:	4b14      	ldr	r3, [pc, #80]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d063      	beq.n	8005e00 <HAL_RCC_OscConfig+0x2f0>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d15f      	bne.n	8005e00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e2f1      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d4c:	d106      	bne.n	8005d5c <HAL_RCC_OscConfig+0x24c>
 8005d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a0b      	ldr	r2, [pc, #44]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	e025      	b.n	8005da8 <HAL_RCC_OscConfig+0x298>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d64:	d114      	bne.n	8005d90 <HAL_RCC_OscConfig+0x280>
 8005d66:	4b06      	ldr	r3, [pc, #24]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a05      	ldr	r2, [pc, #20]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	4b03      	ldr	r3, [pc, #12]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a02      	ldr	r2, [pc, #8]	@ (8005d80 <HAL_RCC_OscConfig+0x270>)
 8005d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e013      	b.n	8005da8 <HAL_RCC_OscConfig+0x298>
 8005d80:	40021000 	.word	0x40021000
 8005d84:	0800b03c 	.word	0x0800b03c
 8005d88:	20000004 	.word	0x20000004
 8005d8c:	20000008 	.word	0x20000008
 8005d90:	4ba0      	ldr	r3, [pc, #640]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a9f      	ldr	r2, [pc, #636]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	4b9d      	ldr	r3, [pc, #628]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a9c      	ldr	r2, [pc, #624]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005da2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d013      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db0:	f7fe fda2 	bl	80048f8 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005db8:	f7fe fd9e 	bl	80048f8 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b64      	cmp	r3, #100	@ 0x64
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e2ae      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dca:	4b92      	ldr	r3, [pc, #584]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f0      	beq.n	8005db8 <HAL_RCC_OscConfig+0x2a8>
 8005dd6:	e014      	b.n	8005e02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fe fd8e 	bl	80048f8 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de0:	f7fe fd8a 	bl	80048f8 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b64      	cmp	r3, #100	@ 0x64
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e29a      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005df2:	4b88      	ldr	r3, [pc, #544]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x2d0>
 8005dfe:	e000      	b.n	8005e02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d060      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d005      	beq.n	8005e20 <HAL_RCC_OscConfig+0x310>
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b0c      	cmp	r3, #12
 8005e18:	d119      	bne.n	8005e4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d116      	bne.n	8005e4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e20:	4b7c      	ldr	r3, [pc, #496]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <HAL_RCC_OscConfig+0x328>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e277      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e38:	4b76      	ldr	r3, [pc, #472]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	061b      	lsls	r3, r3, #24
 8005e46:	4973      	ldr	r1, [pc, #460]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e4c:	e040      	b.n	8005ed0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d023      	beq.n	8005e9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e56:	4b6f      	ldr	r3, [pc, #444]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a6e      	ldr	r2, [pc, #440]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e62:	f7fe fd49 	bl	80048f8 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e6a:	f7fe fd45 	bl	80048f8 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e255      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e7c:	4b65      	ldr	r3, [pc, #404]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0f0      	beq.n	8005e6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e88:	4b62      	ldr	r3, [pc, #392]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	061b      	lsls	r3, r3, #24
 8005e96:	495f      	ldr	r1, [pc, #380]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	604b      	str	r3, [r1, #4]
 8005e9c:	e018      	b.n	8005ed0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a5c      	ldr	r2, [pc, #368]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eaa:	f7fe fd25 	bl	80048f8 <HAL_GetTick>
 8005eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005eb0:	e008      	b.n	8005ec4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eb2:	f7fe fd21 	bl	80048f8 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e231      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ec4:	4b53      	ldr	r3, [pc, #332]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1f0      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d03c      	beq.n	8005f56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01c      	beq.n	8005f1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ee4:	4b4b      	ldr	r3, [pc, #300]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eea:	4a4a      	ldr	r2, [pc, #296]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005eec:	f043 0301 	orr.w	r3, r3, #1
 8005ef0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef4:	f7fe fd00 	bl	80048f8 <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005efc:	f7fe fcfc 	bl	80048f8 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e20c      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f0e:	4b41      	ldr	r3, [pc, #260]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0ef      	beq.n	8005efc <HAL_RCC_OscConfig+0x3ec>
 8005f1c:	e01b      	b.n	8005f56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f24:	4a3b      	ldr	r2, [pc, #236]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005f26:	f023 0301 	bic.w	r3, r3, #1
 8005f2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f2e:	f7fe fce3 	bl	80048f8 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f36:	f7fe fcdf 	bl	80048f8 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e1ef      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f48:	4b32      	ldr	r3, [pc, #200]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1ef      	bne.n	8005f36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80a6 	beq.w	80060b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f64:	2300      	movs	r3, #0
 8005f66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005f68:	4b2a      	ldr	r3, [pc, #168]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10d      	bne.n	8005f90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f74:	4b27      	ldr	r3, [pc, #156]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f78:	4a26      	ldr	r2, [pc, #152]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f80:	4b24      	ldr	r3, [pc, #144]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f90:	4b21      	ldr	r3, [pc, #132]	@ (8006018 <HAL_RCC_OscConfig+0x508>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d118      	bne.n	8005fce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8006018 <HAL_RCC_OscConfig+0x508>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8006018 <HAL_RCC_OscConfig+0x508>)
 8005fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fa6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fa8:	f7fe fca6 	bl	80048f8 <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb0:	f7fe fca2 	bl	80048f8 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e1b2      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fc2:	4b15      	ldr	r3, [pc, #84]	@ (8006018 <HAL_RCC_OscConfig+0x508>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f0      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d108      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x4d8>
 8005fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005fde:	f043 0301 	orr.w	r3, r3, #1
 8005fe2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fe6:	e029      	b.n	800603c <HAL_RCC_OscConfig+0x52c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	2b05      	cmp	r3, #5
 8005fee:	d115      	bne.n	800601c <HAL_RCC_OscConfig+0x50c>
 8005ff0:	4b08      	ldr	r3, [pc, #32]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff6:	4a07      	ldr	r2, [pc, #28]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8005ff8:	f043 0304 	orr.w	r3, r3, #4
 8005ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006000:	4b04      	ldr	r3, [pc, #16]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8006002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006006:	4a03      	ldr	r2, [pc, #12]	@ (8006014 <HAL_RCC_OscConfig+0x504>)
 8006008:	f043 0301 	orr.w	r3, r3, #1
 800600c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006010:	e014      	b.n	800603c <HAL_RCC_OscConfig+0x52c>
 8006012:	bf00      	nop
 8006014:	40021000 	.word	0x40021000
 8006018:	40007000 	.word	0x40007000
 800601c:	4b9a      	ldr	r3, [pc, #616]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006022:	4a99      	ldr	r2, [pc, #612]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 8006024:	f023 0301 	bic.w	r3, r3, #1
 8006028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800602c:	4b96      	ldr	r3, [pc, #600]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 800602e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006032:	4a95      	ldr	r2, [pc, #596]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 8006034:	f023 0304 	bic.w	r3, r3, #4
 8006038:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d016      	beq.n	8006072 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006044:	f7fe fc58 	bl	80048f8 <HAL_GetTick>
 8006048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800604a:	e00a      	b.n	8006062 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800604c:	f7fe fc54 	bl	80048f8 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800605a:	4293      	cmp	r3, r2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e162      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006062:	4b89      	ldr	r3, [pc, #548]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 8006064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0ed      	beq.n	800604c <HAL_RCC_OscConfig+0x53c>
 8006070:	e015      	b.n	800609e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006072:	f7fe fc41 	bl	80048f8 <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006078:	e00a      	b.n	8006090 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800607a:	f7fe fc3d 	bl	80048f8 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006088:	4293      	cmp	r3, r2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e14b      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006090:	4b7d      	ldr	r3, [pc, #500]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1ed      	bne.n	800607a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800609e:	7ffb      	ldrb	r3, [r7, #31]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d105      	bne.n	80060b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a4:	4b78      	ldr	r3, [pc, #480]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 80060a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a8:	4a77      	ldr	r2, [pc, #476]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 80060aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d03c      	beq.n	8006136 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01c      	beq.n	80060fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060c4:	4b70      	ldr	r3, [pc, #448]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 80060c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060ca:	4a6f      	ldr	r2, [pc, #444]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 80060cc:	f043 0301 	orr.w	r3, r3, #1
 80060d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d4:	f7fe fc10 	bl	80048f8 <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060dc:	f7fe fc0c 	bl	80048f8 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e11c      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060ee:	4b66      	ldr	r3, [pc, #408]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 80060f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0ef      	beq.n	80060dc <HAL_RCC_OscConfig+0x5cc>
 80060fc:	e01b      	b.n	8006136 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060fe:	4b62      	ldr	r3, [pc, #392]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 8006100:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006104:	4a60      	ldr	r2, [pc, #384]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 8006106:	f023 0301 	bic.w	r3, r3, #1
 800610a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800610e:	f7fe fbf3 	bl	80048f8 <HAL_GetTick>
 8006112:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006114:	e008      	b.n	8006128 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006116:	f7fe fbef 	bl	80048f8 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e0ff      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006128:	4b57      	ldr	r3, [pc, #348]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 800612a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1ef      	bne.n	8006116 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 80f3 	beq.w	8006326 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006144:	2b02      	cmp	r3, #2
 8006146:	f040 80c9 	bne.w	80062dc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800614a:	4b4f      	ldr	r3, [pc, #316]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f003 0203 	and.w	r2, r3, #3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615a:	429a      	cmp	r2, r3
 800615c:	d12c      	bne.n	80061b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006168:	3b01      	subs	r3, #1
 800616a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800616c:	429a      	cmp	r2, r3
 800616e:	d123      	bne.n	80061b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800617a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800617c:	429a      	cmp	r2, r3
 800617e:	d11b      	bne.n	80061b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800618a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800618c:	429a      	cmp	r2, r3
 800618e:	d113      	bne.n	80061b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800619a:	085b      	lsrs	r3, r3, #1
 800619c:	3b01      	subs	r3, #1
 800619e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d109      	bne.n	80061b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ae:	085b      	lsrs	r3, r3, #1
 80061b0:	3b01      	subs	r3, #1
 80061b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d06b      	beq.n	8006290 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	2b0c      	cmp	r3, #12
 80061bc:	d062      	beq.n	8006284 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80061be:	4b32      	ldr	r3, [pc, #200]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e0ac      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80061ce:	4b2e      	ldr	r3, [pc, #184]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a2d      	ldr	r2, [pc, #180]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 80061d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061da:	f7fe fb8d 	bl	80048f8 <HAL_GetTick>
 80061de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061e0:	e008      	b.n	80061f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061e2:	f7fe fb89 	bl	80048f8 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e099      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061f4:	4b24      	ldr	r3, [pc, #144]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1f0      	bne.n	80061e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006200:	4b21      	ldr	r3, [pc, #132]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	4b21      	ldr	r3, [pc, #132]	@ (800628c <HAL_RCC_OscConfig+0x77c>)
 8006206:	4013      	ands	r3, r2
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006210:	3a01      	subs	r2, #1
 8006212:	0112      	lsls	r2, r2, #4
 8006214:	4311      	orrs	r1, r2
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800621a:	0212      	lsls	r2, r2, #8
 800621c:	4311      	orrs	r1, r2
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006222:	0852      	lsrs	r2, r2, #1
 8006224:	3a01      	subs	r2, #1
 8006226:	0552      	lsls	r2, r2, #21
 8006228:	4311      	orrs	r1, r2
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800622e:	0852      	lsrs	r2, r2, #1
 8006230:	3a01      	subs	r2, #1
 8006232:	0652      	lsls	r2, r2, #25
 8006234:	4311      	orrs	r1, r2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800623a:	06d2      	lsls	r2, r2, #27
 800623c:	430a      	orrs	r2, r1
 800623e:	4912      	ldr	r1, [pc, #72]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 8006240:	4313      	orrs	r3, r2
 8006242:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006244:	4b10      	ldr	r3, [pc, #64]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a0f      	ldr	r2, [pc, #60]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 800624a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800624e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006250:	4b0d      	ldr	r3, [pc, #52]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	4a0c      	ldr	r2, [pc, #48]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 8006256:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800625a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800625c:	f7fe fb4c 	bl	80048f8 <HAL_GetTick>
 8006260:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006264:	f7fe fb48 	bl	80048f8 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b02      	cmp	r3, #2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e058      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006276:	4b04      	ldr	r3, [pc, #16]	@ (8006288 <HAL_RCC_OscConfig+0x778>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0f0      	beq.n	8006264 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006282:	e050      	b.n	8006326 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e04f      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
 8006288:	40021000 	.word	0x40021000
 800628c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006290:	4b27      	ldr	r3, [pc, #156]	@ (8006330 <HAL_RCC_OscConfig+0x820>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d144      	bne.n	8006326 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800629c:	4b24      	ldr	r3, [pc, #144]	@ (8006330 <HAL_RCC_OscConfig+0x820>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a23      	ldr	r2, [pc, #140]	@ (8006330 <HAL_RCC_OscConfig+0x820>)
 80062a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062a8:	4b21      	ldr	r3, [pc, #132]	@ (8006330 <HAL_RCC_OscConfig+0x820>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	4a20      	ldr	r2, [pc, #128]	@ (8006330 <HAL_RCC_OscConfig+0x820>)
 80062ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062b4:	f7fe fb20 	bl	80048f8 <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062bc:	f7fe fb1c 	bl	80048f8 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e02c      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ce:	4b18      	ldr	r3, [pc, #96]	@ (8006330 <HAL_RCC_OscConfig+0x820>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0f0      	beq.n	80062bc <HAL_RCC_OscConfig+0x7ac>
 80062da:	e024      	b.n	8006326 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	2b0c      	cmp	r3, #12
 80062e0:	d01f      	beq.n	8006322 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e2:	4b13      	ldr	r3, [pc, #76]	@ (8006330 <HAL_RCC_OscConfig+0x820>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a12      	ldr	r2, [pc, #72]	@ (8006330 <HAL_RCC_OscConfig+0x820>)
 80062e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ee:	f7fe fb03 	bl	80048f8 <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f6:	f7fe faff 	bl	80048f8 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e00f      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006308:	4b09      	ldr	r3, [pc, #36]	@ (8006330 <HAL_RCC_OscConfig+0x820>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1f0      	bne.n	80062f6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006314:	4b06      	ldr	r3, [pc, #24]	@ (8006330 <HAL_RCC_OscConfig+0x820>)
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	4905      	ldr	r1, [pc, #20]	@ (8006330 <HAL_RCC_OscConfig+0x820>)
 800631a:	4b06      	ldr	r3, [pc, #24]	@ (8006334 <HAL_RCC_OscConfig+0x824>)
 800631c:	4013      	ands	r3, r2
 800631e:	60cb      	str	r3, [r1, #12]
 8006320:	e001      	b.n	8006326 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3720      	adds	r7, #32
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	40021000 	.word	0x40021000
 8006334:	feeefffc 	.word	0xfeeefffc

08006338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e0e7      	b.n	800651c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800634c:	4b75      	ldr	r3, [pc, #468]	@ (8006524 <HAL_RCC_ClockConfig+0x1ec>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0307 	and.w	r3, r3, #7
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d910      	bls.n	800637c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800635a:	4b72      	ldr	r3, [pc, #456]	@ (8006524 <HAL_RCC_ClockConfig+0x1ec>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f023 0207 	bic.w	r2, r3, #7
 8006362:	4970      	ldr	r1, [pc, #448]	@ (8006524 <HAL_RCC_ClockConfig+0x1ec>)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	4313      	orrs	r3, r2
 8006368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800636a:	4b6e      	ldr	r3, [pc, #440]	@ (8006524 <HAL_RCC_ClockConfig+0x1ec>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d001      	beq.n	800637c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e0cf      	b.n	800651c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d010      	beq.n	80063aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	4b66      	ldr	r3, [pc, #408]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006394:	429a      	cmp	r2, r3
 8006396:	d908      	bls.n	80063aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006398:	4b63      	ldr	r3, [pc, #396]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	4960      	ldr	r1, [pc, #384]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d04c      	beq.n	8006450 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d107      	bne.n	80063ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063be:	4b5a      	ldr	r3, [pc, #360]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d121      	bne.n	800640e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e0a6      	b.n	800651c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d107      	bne.n	80063e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063d6:	4b54      	ldr	r3, [pc, #336]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d115      	bne.n	800640e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e09a      	b.n	800651c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d107      	bne.n	80063fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063ee:	4b4e      	ldr	r3, [pc, #312]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d109      	bne.n	800640e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e08e      	b.n	800651c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063fe:	4b4a      	ldr	r3, [pc, #296]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e086      	b.n	800651c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800640e:	4b46      	ldr	r3, [pc, #280]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f023 0203 	bic.w	r2, r3, #3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	4943      	ldr	r1, [pc, #268]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 800641c:	4313      	orrs	r3, r2
 800641e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006420:	f7fe fa6a 	bl	80048f8 <HAL_GetTick>
 8006424:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006426:	e00a      	b.n	800643e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006428:	f7fe fa66 	bl	80048f8 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006436:	4293      	cmp	r3, r2
 8006438:	d901      	bls.n	800643e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e06e      	b.n	800651c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800643e:	4b3a      	ldr	r3, [pc, #232]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 020c 	and.w	r2, r3, #12
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	429a      	cmp	r2, r3
 800644e:	d1eb      	bne.n	8006428 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d010      	beq.n	800647e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	4b31      	ldr	r3, [pc, #196]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006468:	429a      	cmp	r2, r3
 800646a:	d208      	bcs.n	800647e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800646c:	4b2e      	ldr	r3, [pc, #184]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	492b      	ldr	r1, [pc, #172]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 800647a:	4313      	orrs	r3, r2
 800647c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800647e:	4b29      	ldr	r3, [pc, #164]	@ (8006524 <HAL_RCC_ClockConfig+0x1ec>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d210      	bcs.n	80064ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800648c:	4b25      	ldr	r3, [pc, #148]	@ (8006524 <HAL_RCC_ClockConfig+0x1ec>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f023 0207 	bic.w	r2, r3, #7
 8006494:	4923      	ldr	r1, [pc, #140]	@ (8006524 <HAL_RCC_ClockConfig+0x1ec>)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	4313      	orrs	r3, r2
 800649a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800649c:	4b21      	ldr	r3, [pc, #132]	@ (8006524 <HAL_RCC_ClockConfig+0x1ec>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d001      	beq.n	80064ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e036      	b.n	800651c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d008      	beq.n	80064cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	4918      	ldr	r1, [pc, #96]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d009      	beq.n	80064ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064d8:	4b13      	ldr	r3, [pc, #76]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	4910      	ldr	r1, [pc, #64]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064ec:	f000 f824 	bl	8006538 <HAL_RCC_GetSysClockFreq>
 80064f0:	4602      	mov	r2, r0
 80064f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006528 <HAL_RCC_ClockConfig+0x1f0>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	091b      	lsrs	r3, r3, #4
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	490b      	ldr	r1, [pc, #44]	@ (800652c <HAL_RCC_ClockConfig+0x1f4>)
 80064fe:	5ccb      	ldrb	r3, [r1, r3]
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	fa22 f303 	lsr.w	r3, r2, r3
 8006508:	4a09      	ldr	r2, [pc, #36]	@ (8006530 <HAL_RCC_ClockConfig+0x1f8>)
 800650a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800650c:	4b09      	ldr	r3, [pc, #36]	@ (8006534 <HAL_RCC_ClockConfig+0x1fc>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f7fe f9a1 	bl	8004858 <HAL_InitTick>
 8006516:	4603      	mov	r3, r0
 8006518:	72fb      	strb	r3, [r7, #11]

  return status;
 800651a:	7afb      	ldrb	r3, [r7, #11]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40022000 	.word	0x40022000
 8006528:	40021000 	.word	0x40021000
 800652c:	0800b03c 	.word	0x0800b03c
 8006530:	20000004 	.word	0x20000004
 8006534:	20000008 	.word	0x20000008

08006538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006538:	b480      	push	{r7}
 800653a:	b089      	sub	sp, #36	@ 0x24
 800653c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	61fb      	str	r3, [r7, #28]
 8006542:	2300      	movs	r3, #0
 8006544:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006546:	4b3e      	ldr	r3, [pc, #248]	@ (8006640 <HAL_RCC_GetSysClockFreq+0x108>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 030c 	and.w	r3, r3, #12
 800654e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006550:	4b3b      	ldr	r3, [pc, #236]	@ (8006640 <HAL_RCC_GetSysClockFreq+0x108>)
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f003 0303 	and.w	r3, r3, #3
 8006558:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <HAL_RCC_GetSysClockFreq+0x34>
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2b0c      	cmp	r3, #12
 8006564:	d121      	bne.n	80065aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d11e      	bne.n	80065aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800656c:	4b34      	ldr	r3, [pc, #208]	@ (8006640 <HAL_RCC_GetSysClockFreq+0x108>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d107      	bne.n	8006588 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006578:	4b31      	ldr	r3, [pc, #196]	@ (8006640 <HAL_RCC_GetSysClockFreq+0x108>)
 800657a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800657e:	0a1b      	lsrs	r3, r3, #8
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	61fb      	str	r3, [r7, #28]
 8006586:	e005      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006588:	4b2d      	ldr	r3, [pc, #180]	@ (8006640 <HAL_RCC_GetSysClockFreq+0x108>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	091b      	lsrs	r3, r3, #4
 800658e:	f003 030f 	and.w	r3, r3, #15
 8006592:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006594:	4a2b      	ldr	r2, [pc, #172]	@ (8006644 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800659c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10d      	bne.n	80065c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80065a8:	e00a      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2b04      	cmp	r3, #4
 80065ae:	d102      	bne.n	80065b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065b0:	4b25      	ldr	r3, [pc, #148]	@ (8006648 <HAL_RCC_GetSysClockFreq+0x110>)
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	e004      	b.n	80065c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d101      	bne.n	80065c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80065bc:	4b23      	ldr	r3, [pc, #140]	@ (800664c <HAL_RCC_GetSysClockFreq+0x114>)
 80065be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	2b0c      	cmp	r3, #12
 80065c4:	d134      	bne.n	8006630 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006640 <HAL_RCC_GetSysClockFreq+0x108>)
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d003      	beq.n	80065de <HAL_RCC_GetSysClockFreq+0xa6>
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d003      	beq.n	80065e4 <HAL_RCC_GetSysClockFreq+0xac>
 80065dc:	e005      	b.n	80065ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80065de:	4b1a      	ldr	r3, [pc, #104]	@ (8006648 <HAL_RCC_GetSysClockFreq+0x110>)
 80065e0:	617b      	str	r3, [r7, #20]
      break;
 80065e2:	e005      	b.n	80065f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80065e4:	4b19      	ldr	r3, [pc, #100]	@ (800664c <HAL_RCC_GetSysClockFreq+0x114>)
 80065e6:	617b      	str	r3, [r7, #20]
      break;
 80065e8:	e002      	b.n	80065f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	617b      	str	r3, [r7, #20]
      break;
 80065ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065f0:	4b13      	ldr	r3, [pc, #76]	@ (8006640 <HAL_RCC_GetSysClockFreq+0x108>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	091b      	lsrs	r3, r3, #4
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	3301      	adds	r3, #1
 80065fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80065fe:	4b10      	ldr	r3, [pc, #64]	@ (8006640 <HAL_RCC_GetSysClockFreq+0x108>)
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	0a1b      	lsrs	r3, r3, #8
 8006604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	fb03 f202 	mul.w	r2, r3, r2
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	fbb2 f3f3 	udiv	r3, r2, r3
 8006614:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006616:	4b0a      	ldr	r3, [pc, #40]	@ (8006640 <HAL_RCC_GetSysClockFreq+0x108>)
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	0e5b      	lsrs	r3, r3, #25
 800661c:	f003 0303 	and.w	r3, r3, #3
 8006620:	3301      	adds	r3, #1
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	fbb2 f3f3 	udiv	r3, r2, r3
 800662e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006630:	69bb      	ldr	r3, [r7, #24]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3724      	adds	r7, #36	@ 0x24
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40021000 	.word	0x40021000
 8006644:	0800b054 	.word	0x0800b054
 8006648:	00f42400 	.word	0x00f42400
 800664c:	007a1200 	.word	0x007a1200

08006650 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006654:	4b03      	ldr	r3, [pc, #12]	@ (8006664 <HAL_RCC_GetHCLKFreq+0x14>)
 8006656:	681b      	ldr	r3, [r3, #0]
}
 8006658:	4618      	mov	r0, r3
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	20000004 	.word	0x20000004

08006668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800666c:	f7ff fff0 	bl	8006650 <HAL_RCC_GetHCLKFreq>
 8006670:	4602      	mov	r2, r0
 8006672:	4b06      	ldr	r3, [pc, #24]	@ (800668c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	0a1b      	lsrs	r3, r3, #8
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	4904      	ldr	r1, [pc, #16]	@ (8006690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800667e:	5ccb      	ldrb	r3, [r1, r3]
 8006680:	f003 031f 	and.w	r3, r3, #31
 8006684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006688:	4618      	mov	r0, r3
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40021000 	.word	0x40021000
 8006690:	0800b04c 	.word	0x0800b04c

08006694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006698:	f7ff ffda 	bl	8006650 <HAL_RCC_GetHCLKFreq>
 800669c:	4602      	mov	r2, r0
 800669e:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	0adb      	lsrs	r3, r3, #11
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	4904      	ldr	r1, [pc, #16]	@ (80066bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80066aa:	5ccb      	ldrb	r3, [r1, r3]
 80066ac:	f003 031f 	and.w	r3, r3, #31
 80066b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40021000 	.word	0x40021000
 80066bc:	0800b04c 	.word	0x0800b04c

080066c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80066c8:	2300      	movs	r3, #0
 80066ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80066cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80066d8:	f7ff f9b6 	bl	8005a48 <HAL_PWREx_GetVoltageRange>
 80066dc:	6178      	str	r0, [r7, #20]
 80066de:	e014      	b.n	800670a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80066e0:	4b25      	ldr	r3, [pc, #148]	@ (8006778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e4:	4a24      	ldr	r2, [pc, #144]	@ (8006778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80066ec:	4b22      	ldr	r3, [pc, #136]	@ (8006778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80066ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80066f8:	f7ff f9a6 	bl	8005a48 <HAL_PWREx_GetVoltageRange>
 80066fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80066fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006702:	4a1d      	ldr	r2, [pc, #116]	@ (8006778 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006704:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006708:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006710:	d10b      	bne.n	800672a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b80      	cmp	r3, #128	@ 0x80
 8006716:	d919      	bls.n	800674c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2ba0      	cmp	r3, #160	@ 0xa0
 800671c:	d902      	bls.n	8006724 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800671e:	2302      	movs	r3, #2
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	e013      	b.n	800674c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006724:	2301      	movs	r3, #1
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	e010      	b.n	800674c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b80      	cmp	r3, #128	@ 0x80
 800672e:	d902      	bls.n	8006736 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006730:	2303      	movs	r3, #3
 8006732:	613b      	str	r3, [r7, #16]
 8006734:	e00a      	b.n	800674c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b80      	cmp	r3, #128	@ 0x80
 800673a:	d102      	bne.n	8006742 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800673c:	2302      	movs	r3, #2
 800673e:	613b      	str	r3, [r7, #16]
 8006740:	e004      	b.n	800674c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b70      	cmp	r3, #112	@ 0x70
 8006746:	d101      	bne.n	800674c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006748:	2301      	movs	r3, #1
 800674a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800674c:	4b0b      	ldr	r3, [pc, #44]	@ (800677c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f023 0207 	bic.w	r2, r3, #7
 8006754:	4909      	ldr	r1, [pc, #36]	@ (800677c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800675c:	4b07      	ldr	r3, [pc, #28]	@ (800677c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0307 	and.w	r3, r3, #7
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	429a      	cmp	r2, r3
 8006768:	d001      	beq.n	800676e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3718      	adds	r7, #24
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	40021000 	.word	0x40021000
 800677c:	40022000 	.word	0x40022000

08006780 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006788:	2300      	movs	r3, #0
 800678a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800678c:	2300      	movs	r3, #0
 800678e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006798:	2b00      	cmp	r3, #0
 800679a:	d031      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80067a4:	d01a      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80067a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80067aa:	d814      	bhi.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d009      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80067b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067b4:	d10f      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80067b6:	4b5d      	ldr	r3, [pc, #372]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	4a5c      	ldr	r2, [pc, #368]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067c2:	e00c      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3304      	adds	r3, #4
 80067c8:	2100      	movs	r1, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 f9de 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80067d4:	e003      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	74fb      	strb	r3, [r7, #19]
      break;
 80067da:	e000      	b.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80067dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067de:	7cfb      	ldrb	r3, [r7, #19]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10b      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067e4:	4b51      	ldr	r3, [pc, #324]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f2:	494e      	ldr	r1, [pc, #312]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80067fa:	e001      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fc:	7cfb      	ldrb	r3, [r7, #19]
 80067fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 809e 	beq.w	800694a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800680e:	2300      	movs	r3, #0
 8006810:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006812:	4b46      	ldr	r3, [pc, #280]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800681e:	2301      	movs	r3, #1
 8006820:	e000      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006822:	2300      	movs	r3, #0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00d      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006828:	4b40      	ldr	r3, [pc, #256]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800682a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800682c:	4a3f      	ldr	r2, [pc, #252]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800682e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006832:	6593      	str	r3, [r2, #88]	@ 0x58
 8006834:	4b3d      	ldr	r3, [pc, #244]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800683c:	60bb      	str	r3, [r7, #8]
 800683e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006840:	2301      	movs	r3, #1
 8006842:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006844:	4b3a      	ldr	r3, [pc, #232]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a39      	ldr	r2, [pc, #228]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800684a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800684e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006850:	f7fe f852 	bl	80048f8 <HAL_GetTick>
 8006854:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006856:	e009      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006858:	f7fe f84e 	bl	80048f8 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b02      	cmp	r3, #2
 8006864:	d902      	bls.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	74fb      	strb	r3, [r7, #19]
        break;
 800686a:	e005      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800686c:	4b30      	ldr	r3, [pc, #192]	@ (8006930 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0ef      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006878:	7cfb      	ldrb	r3, [r7, #19]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d15a      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800687e:	4b2b      	ldr	r3, [pc, #172]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006884:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006888:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d01e      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	429a      	cmp	r2, r3
 8006898:	d019      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800689a:	4b24      	ldr	r3, [pc, #144]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800689c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068a6:	4b21      	ldr	r3, [pc, #132]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ac:	4a1f      	ldr	r2, [pc, #124]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068b6:	4b1d      	ldr	r3, [pc, #116]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068bc:	4a1b      	ldr	r2, [pc, #108]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068c6:	4a19      	ldr	r2, [pc, #100]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d016      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fe f80e 	bl	80048f8 <HAL_GetTick>
 80068dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068de:	e00b      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068e0:	f7fe f80a 	bl	80048f8 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d902      	bls.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	74fb      	strb	r3, [r7, #19]
            break;
 80068f6:	e006      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068f8:	4b0c      	ldr	r3, [pc, #48]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0ec      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006906:	7cfb      	ldrb	r3, [r7, #19]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10b      	bne.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800690c:	4b07      	ldr	r3, [pc, #28]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006912:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800691a:	4904      	ldr	r1, [pc, #16]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800691c:	4313      	orrs	r3, r2
 800691e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006922:	e009      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006924:	7cfb      	ldrb	r3, [r7, #19]
 8006926:	74bb      	strb	r3, [r7, #18]
 8006928:	e006      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800692a:	bf00      	nop
 800692c:	40021000 	.word	0x40021000
 8006930:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006934:	7cfb      	ldrb	r3, [r7, #19]
 8006936:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006938:	7c7b      	ldrb	r3, [r7, #17]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d105      	bne.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800693e:	4b8a      	ldr	r3, [pc, #552]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006942:	4a89      	ldr	r2, [pc, #548]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006944:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006948:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00a      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006956:	4b84      	ldr	r3, [pc, #528]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800695c:	f023 0203 	bic.w	r2, r3, #3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	4980      	ldr	r1, [pc, #512]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006966:	4313      	orrs	r3, r2
 8006968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00a      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006978:	4b7b      	ldr	r3, [pc, #492]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800697a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800697e:	f023 020c 	bic.w	r2, r3, #12
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006986:	4978      	ldr	r1, [pc, #480]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006988:	4313      	orrs	r3, r2
 800698a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800699a:	4b73      	ldr	r3, [pc, #460]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800699c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a8:	496f      	ldr	r1, [pc, #444]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00a      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069c2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ca:	4967      	ldr	r1, [pc, #412]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069cc:	4313      	orrs	r3, r2
 80069ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069de:	4b62      	ldr	r3, [pc, #392]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ec:	495e      	ldr	r1, [pc, #376]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00a      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a00:	4b59      	ldr	r3, [pc, #356]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a06:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0e:	4956      	ldr	r1, [pc, #344]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a22:	4b51      	ldr	r3, [pc, #324]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a30:	494d      	ldr	r1, [pc, #308]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d028      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a44:	4b48      	ldr	r3, [pc, #288]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a52:	4945      	ldr	r1, [pc, #276]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a62:	d106      	bne.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a64:	4b40      	ldr	r3, [pc, #256]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	4a3f      	ldr	r2, [pc, #252]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a6e:	60d3      	str	r3, [r2, #12]
 8006a70:	e011      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a7a:	d10c      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3304      	adds	r3, #4
 8006a80:	2101      	movs	r1, #1
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 f882 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006a8c:	7cfb      	ldrb	r3, [r7, #19]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006a92:	7cfb      	ldrb	r3, [r7, #19]
 8006a94:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d028      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006aa2:	4b31      	ldr	r3, [pc, #196]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab0:	492d      	ldr	r1, [pc, #180]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006abc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ac0:	d106      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ac2:	4b29      	ldr	r3, [pc, #164]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	4a28      	ldr	r2, [pc, #160]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ac8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006acc:	60d3      	str	r3, [r2, #12]
 8006ace:	e011      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ad8:	d10c      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	3304      	adds	r3, #4
 8006ade:	2101      	movs	r1, #1
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 f853 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006aea:	7cfb      	ldrb	r3, [r7, #19]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006af0:	7cfb      	ldrb	r3, [r7, #19]
 8006af2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d01c      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b00:	4b19      	ldr	r3, [pc, #100]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b0e:	4916      	ldr	r1, [pc, #88]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b1e:	d10c      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3304      	adds	r3, #4
 8006b24:	2102      	movs	r1, #2
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 f830 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b30:	7cfb      	ldrb	r3, [r7, #19]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006b36:	7cfb      	ldrb	r3, [r7, #19]
 8006b38:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b46:	4b08      	ldr	r3, [pc, #32]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b4c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b54:	4904      	ldr	r1, [pc, #16]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006b5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	40021000 	.word	0x40021000

08006b6c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006b70:	4b05      	ldr	r3, [pc, #20]	@ (8006b88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a04      	ldr	r2, [pc, #16]	@ (8006b88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006b76:	f043 0304 	orr.w	r3, r3, #4
 8006b7a:	6013      	str	r3, [r2, #0]
}
 8006b7c:	bf00      	nop
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	40021000 	.word	0x40021000

08006b8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b9a:	4b74      	ldr	r3, [pc, #464]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d018      	beq.n	8006bd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006ba6:	4b71      	ldr	r3, [pc, #452]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f003 0203 	and.w	r2, r3, #3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d10d      	bne.n	8006bd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
       ||
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d009      	beq.n	8006bd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006bbe:	4b6b      	ldr	r3, [pc, #428]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	091b      	lsrs	r3, r3, #4
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
       ||
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d047      	beq.n	8006c62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	73fb      	strb	r3, [r7, #15]
 8006bd6:	e044      	b.n	8006c62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d018      	beq.n	8006c12 <RCCEx_PLLSAI1_Config+0x86>
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d825      	bhi.n	8006c30 <RCCEx_PLLSAI1_Config+0xa4>
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d002      	beq.n	8006bee <RCCEx_PLLSAI1_Config+0x62>
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d009      	beq.n	8006c00 <RCCEx_PLLSAI1_Config+0x74>
 8006bec:	e020      	b.n	8006c30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006bee:	4b5f      	ldr	r3, [pc, #380]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d11d      	bne.n	8006c36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bfe:	e01a      	b.n	8006c36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c00:	4b5a      	ldr	r3, [pc, #360]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d116      	bne.n	8006c3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c10:	e013      	b.n	8006c3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c12:	4b56      	ldr	r3, [pc, #344]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10f      	bne.n	8006c3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c1e:	4b53      	ldr	r3, [pc, #332]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c2e:	e006      	b.n	8006c3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	73fb      	strb	r3, [r7, #15]
      break;
 8006c34:	e004      	b.n	8006c40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c36:	bf00      	nop
 8006c38:	e002      	b.n	8006c40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c3a:	bf00      	nop
 8006c3c:	e000      	b.n	8006c40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10d      	bne.n	8006c62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c46:	4b49      	ldr	r3, [pc, #292]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6819      	ldr	r1, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	4943      	ldr	r1, [pc, #268]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d17c      	bne.n	8006d62 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006c68:	4b40      	ldr	r3, [pc, #256]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c74:	f7fd fe40 	bl	80048f8 <HAL_GetTick>
 8006c78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c7a:	e009      	b.n	8006c90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c7c:	f7fd fe3c 	bl	80048f8 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d902      	bls.n	8006c90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	73fb      	strb	r3, [r7, #15]
        break;
 8006c8e:	e005      	b.n	8006c9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c90:	4b36      	ldr	r3, [pc, #216]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1ef      	bne.n	8006c7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d15f      	bne.n	8006d62 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d110      	bne.n	8006cca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ca8:	4b30      	ldr	r3, [pc, #192]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006cb0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6892      	ldr	r2, [r2, #8]
 8006cb8:	0211      	lsls	r1, r2, #8
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	68d2      	ldr	r2, [r2, #12]
 8006cbe:	06d2      	lsls	r2, r2, #27
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	492a      	ldr	r1, [pc, #168]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	610b      	str	r3, [r1, #16]
 8006cc8:	e027      	b.n	8006d1a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d112      	bne.n	8006cf6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cd0:	4b26      	ldr	r3, [pc, #152]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006cd8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6892      	ldr	r2, [r2, #8]
 8006ce0:	0211      	lsls	r1, r2, #8
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6912      	ldr	r2, [r2, #16]
 8006ce6:	0852      	lsrs	r2, r2, #1
 8006ce8:	3a01      	subs	r2, #1
 8006cea:	0552      	lsls	r2, r2, #21
 8006cec:	430a      	orrs	r2, r1
 8006cee:	491f      	ldr	r1, [pc, #124]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	610b      	str	r3, [r1, #16]
 8006cf4:	e011      	b.n	8006d1a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006cfe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6892      	ldr	r2, [r2, #8]
 8006d06:	0211      	lsls	r1, r2, #8
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6952      	ldr	r2, [r2, #20]
 8006d0c:	0852      	lsrs	r2, r2, #1
 8006d0e:	3a01      	subs	r2, #1
 8006d10:	0652      	lsls	r2, r2, #25
 8006d12:	430a      	orrs	r2, r1
 8006d14:	4915      	ldr	r1, [pc, #84]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006d1a:	4b14      	ldr	r3, [pc, #80]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a13      	ldr	r2, [pc, #76]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d26:	f7fd fde7 	bl	80048f8 <HAL_GetTick>
 8006d2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d2c:	e009      	b.n	8006d42 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d2e:	f7fd fde3 	bl	80048f8 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d902      	bls.n	8006d42 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	73fb      	strb	r3, [r7, #15]
          break;
 8006d40:	e005      	b.n	8006d4e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d42:	4b0a      	ldr	r3, [pc, #40]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0ef      	beq.n	8006d2e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d106      	bne.n	8006d62 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d54:	4b05      	ldr	r3, [pc, #20]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d56:	691a      	ldr	r2, [r3, #16]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	4903      	ldr	r1, [pc, #12]	@ (8006d6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40021000 	.word	0x40021000

08006d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e040      	b.n	8006e04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7fd fcb4 	bl	8004700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2224      	movs	r2, #36	@ 0x24
 8006d9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0201 	bic.w	r2, r2, #1
 8006dac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fade 	bl	8007378 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f8af 	bl	8006f20 <UART_SetConfig>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e01b      	b.n	8006e04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006dea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0201 	orr.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fb5d 	bl	80074bc <UART_CheckIdleState>
 8006e02:	4603      	mov	r3, r0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08a      	sub	sp, #40	@ 0x28
 8006e10:	af02      	add	r7, sp, #8
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	603b      	str	r3, [r7, #0]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	d177      	bne.n	8006f14 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <HAL_UART_Transmit+0x24>
 8006e2a:	88fb      	ldrh	r3, [r7, #6]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e070      	b.n	8006f16 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2221      	movs	r2, #33	@ 0x21
 8006e40:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e42:	f7fd fd59 	bl	80048f8 <HAL_GetTick>
 8006e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	88fa      	ldrh	r2, [r7, #6]
 8006e4c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	88fa      	ldrh	r2, [r7, #6]
 8006e54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e60:	d108      	bne.n	8006e74 <HAL_UART_Transmit+0x68>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d104      	bne.n	8006e74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	e003      	b.n	8006e7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e7c:	e02f      	b.n	8006ede <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2200      	movs	r2, #0
 8006e86:	2180      	movs	r1, #128	@ 0x80
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 fbbf 	bl	800760c <UART_WaitOnFlagUntilTimeout>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d004      	beq.n	8006e9e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2220      	movs	r2, #32
 8006e98:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e03b      	b.n	8006f16 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10b      	bne.n	8006ebc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	881a      	ldrh	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb0:	b292      	uxth	r2, r2
 8006eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	3302      	adds	r3, #2
 8006eb8:	61bb      	str	r3, [r7, #24]
 8006eba:	e007      	b.n	8006ecc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	781a      	ldrb	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1c9      	bne.n	8006e7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2140      	movs	r1, #64	@ 0x40
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 fb89 	bl	800760c <UART_WaitOnFlagUntilTimeout>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2220      	movs	r2, #32
 8006f04:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e005      	b.n	8006f16 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	e000      	b.n	8006f16 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006f14:	2302      	movs	r3, #2
  }
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3720      	adds	r7, #32
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f24:	b08a      	sub	sp, #40	@ 0x28
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	4bb4      	ldr	r3, [pc, #720]	@ (8007220 <UART_SetConfig+0x300>)
 8006f50:	4013      	ands	r3, r2
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f58:	430b      	orrs	r3, r1
 8006f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4aa9      	ldr	r2, [pc, #676]	@ (8007224 <UART_SetConfig+0x304>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d004      	beq.n	8006f8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4aa0      	ldr	r2, [pc, #640]	@ (8007228 <UART_SetConfig+0x308>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d126      	bne.n	8006ff8 <UART_SetConfig+0xd8>
 8006faa:	4ba0      	ldr	r3, [pc, #640]	@ (800722c <UART_SetConfig+0x30c>)
 8006fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb0:	f003 0303 	and.w	r3, r3, #3
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d81b      	bhi.n	8006ff0 <UART_SetConfig+0xd0>
 8006fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc0 <UART_SetConfig+0xa0>)
 8006fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbe:	bf00      	nop
 8006fc0:	08006fd1 	.word	0x08006fd1
 8006fc4:	08006fe1 	.word	0x08006fe1
 8006fc8:	08006fd9 	.word	0x08006fd9
 8006fcc:	08006fe9 	.word	0x08006fe9
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fd6:	e080      	b.n	80070da <UART_SetConfig+0x1ba>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fde:	e07c      	b.n	80070da <UART_SetConfig+0x1ba>
 8006fe0:	2304      	movs	r3, #4
 8006fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fe6:	e078      	b.n	80070da <UART_SetConfig+0x1ba>
 8006fe8:	2308      	movs	r3, #8
 8006fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fee:	e074      	b.n	80070da <UART_SetConfig+0x1ba>
 8006ff0:	2310      	movs	r3, #16
 8006ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ff6:	e070      	b.n	80070da <UART_SetConfig+0x1ba>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a8c      	ldr	r2, [pc, #560]	@ (8007230 <UART_SetConfig+0x310>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d138      	bne.n	8007074 <UART_SetConfig+0x154>
 8007002:	4b8a      	ldr	r3, [pc, #552]	@ (800722c <UART_SetConfig+0x30c>)
 8007004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007008:	f003 030c 	and.w	r3, r3, #12
 800700c:	2b0c      	cmp	r3, #12
 800700e:	d82d      	bhi.n	800706c <UART_SetConfig+0x14c>
 8007010:	a201      	add	r2, pc, #4	@ (adr r2, 8007018 <UART_SetConfig+0xf8>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	0800704d 	.word	0x0800704d
 800701c:	0800706d 	.word	0x0800706d
 8007020:	0800706d 	.word	0x0800706d
 8007024:	0800706d 	.word	0x0800706d
 8007028:	0800705d 	.word	0x0800705d
 800702c:	0800706d 	.word	0x0800706d
 8007030:	0800706d 	.word	0x0800706d
 8007034:	0800706d 	.word	0x0800706d
 8007038:	08007055 	.word	0x08007055
 800703c:	0800706d 	.word	0x0800706d
 8007040:	0800706d 	.word	0x0800706d
 8007044:	0800706d 	.word	0x0800706d
 8007048:	08007065 	.word	0x08007065
 800704c:	2300      	movs	r3, #0
 800704e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007052:	e042      	b.n	80070da <UART_SetConfig+0x1ba>
 8007054:	2302      	movs	r3, #2
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800705a:	e03e      	b.n	80070da <UART_SetConfig+0x1ba>
 800705c:	2304      	movs	r3, #4
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007062:	e03a      	b.n	80070da <UART_SetConfig+0x1ba>
 8007064:	2308      	movs	r3, #8
 8007066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800706a:	e036      	b.n	80070da <UART_SetConfig+0x1ba>
 800706c:	2310      	movs	r3, #16
 800706e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007072:	e032      	b.n	80070da <UART_SetConfig+0x1ba>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a6a      	ldr	r2, [pc, #424]	@ (8007224 <UART_SetConfig+0x304>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d12a      	bne.n	80070d4 <UART_SetConfig+0x1b4>
 800707e:	4b6b      	ldr	r3, [pc, #428]	@ (800722c <UART_SetConfig+0x30c>)
 8007080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007084:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007088:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800708c:	d01a      	beq.n	80070c4 <UART_SetConfig+0x1a4>
 800708e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007092:	d81b      	bhi.n	80070cc <UART_SetConfig+0x1ac>
 8007094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007098:	d00c      	beq.n	80070b4 <UART_SetConfig+0x194>
 800709a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800709e:	d815      	bhi.n	80070cc <UART_SetConfig+0x1ac>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <UART_SetConfig+0x18c>
 80070a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070a8:	d008      	beq.n	80070bc <UART_SetConfig+0x19c>
 80070aa:	e00f      	b.n	80070cc <UART_SetConfig+0x1ac>
 80070ac:	2300      	movs	r3, #0
 80070ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070b2:	e012      	b.n	80070da <UART_SetConfig+0x1ba>
 80070b4:	2302      	movs	r3, #2
 80070b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ba:	e00e      	b.n	80070da <UART_SetConfig+0x1ba>
 80070bc:	2304      	movs	r3, #4
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070c2:	e00a      	b.n	80070da <UART_SetConfig+0x1ba>
 80070c4:	2308      	movs	r3, #8
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ca:	e006      	b.n	80070da <UART_SetConfig+0x1ba>
 80070cc:	2310      	movs	r3, #16
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070d2:	e002      	b.n	80070da <UART_SetConfig+0x1ba>
 80070d4:	2310      	movs	r3, #16
 80070d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a51      	ldr	r2, [pc, #324]	@ (8007224 <UART_SetConfig+0x304>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d17a      	bne.n	80071da <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d824      	bhi.n	8007136 <UART_SetConfig+0x216>
 80070ec:	a201      	add	r2, pc, #4	@ (adr r2, 80070f4 <UART_SetConfig+0x1d4>)
 80070ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f2:	bf00      	nop
 80070f4:	08007119 	.word	0x08007119
 80070f8:	08007137 	.word	0x08007137
 80070fc:	08007121 	.word	0x08007121
 8007100:	08007137 	.word	0x08007137
 8007104:	08007127 	.word	0x08007127
 8007108:	08007137 	.word	0x08007137
 800710c:	08007137 	.word	0x08007137
 8007110:	08007137 	.word	0x08007137
 8007114:	0800712f 	.word	0x0800712f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007118:	f7ff faa6 	bl	8006668 <HAL_RCC_GetPCLK1Freq>
 800711c:	61f8      	str	r0, [r7, #28]
        break;
 800711e:	e010      	b.n	8007142 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007120:	4b44      	ldr	r3, [pc, #272]	@ (8007234 <UART_SetConfig+0x314>)
 8007122:	61fb      	str	r3, [r7, #28]
        break;
 8007124:	e00d      	b.n	8007142 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007126:	f7ff fa07 	bl	8006538 <HAL_RCC_GetSysClockFreq>
 800712a:	61f8      	str	r0, [r7, #28]
        break;
 800712c:	e009      	b.n	8007142 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800712e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007132:	61fb      	str	r3, [r7, #28]
        break;
 8007134:	e005      	b.n	8007142 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007140:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 8107 	beq.w	8007358 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	4613      	mov	r3, r2
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	4413      	add	r3, r2
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	429a      	cmp	r2, r3
 8007158:	d305      	bcc.n	8007166 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	429a      	cmp	r2, r3
 8007164:	d903      	bls.n	800716e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800716c:	e0f4      	b.n	8007358 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	2200      	movs	r2, #0
 8007172:	461c      	mov	r4, r3
 8007174:	4615      	mov	r5, r2
 8007176:	f04f 0200 	mov.w	r2, #0
 800717a:	f04f 0300 	mov.w	r3, #0
 800717e:	022b      	lsls	r3, r5, #8
 8007180:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007184:	0222      	lsls	r2, r4, #8
 8007186:	68f9      	ldr	r1, [r7, #12]
 8007188:	6849      	ldr	r1, [r1, #4]
 800718a:	0849      	lsrs	r1, r1, #1
 800718c:	2000      	movs	r0, #0
 800718e:	4688      	mov	r8, r1
 8007190:	4681      	mov	r9, r0
 8007192:	eb12 0a08 	adds.w	sl, r2, r8
 8007196:	eb43 0b09 	adc.w	fp, r3, r9
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	603b      	str	r3, [r7, #0]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071a8:	4650      	mov	r0, sl
 80071aa:	4659      	mov	r1, fp
 80071ac:	f7f9 fd6c 	bl	8000c88 <__aeabi_uldivmod>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	4613      	mov	r3, r2
 80071b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071be:	d308      	bcc.n	80071d2 <UART_SetConfig+0x2b2>
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071c6:	d204      	bcs.n	80071d2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	60da      	str	r2, [r3, #12]
 80071d0:	e0c2      	b.n	8007358 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80071d8:	e0be      	b.n	8007358 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071e2:	d16a      	bne.n	80072ba <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80071e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071e8:	2b08      	cmp	r3, #8
 80071ea:	d834      	bhi.n	8007256 <UART_SetConfig+0x336>
 80071ec:	a201      	add	r2, pc, #4	@ (adr r2, 80071f4 <UART_SetConfig+0x2d4>)
 80071ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f2:	bf00      	nop
 80071f4:	08007219 	.word	0x08007219
 80071f8:	08007239 	.word	0x08007239
 80071fc:	08007241 	.word	0x08007241
 8007200:	08007257 	.word	0x08007257
 8007204:	08007247 	.word	0x08007247
 8007208:	08007257 	.word	0x08007257
 800720c:	08007257 	.word	0x08007257
 8007210:	08007257 	.word	0x08007257
 8007214:	0800724f 	.word	0x0800724f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007218:	f7ff fa26 	bl	8006668 <HAL_RCC_GetPCLK1Freq>
 800721c:	61f8      	str	r0, [r7, #28]
        break;
 800721e:	e020      	b.n	8007262 <UART_SetConfig+0x342>
 8007220:	efff69f3 	.word	0xefff69f3
 8007224:	40008000 	.word	0x40008000
 8007228:	40013800 	.word	0x40013800
 800722c:	40021000 	.word	0x40021000
 8007230:	40004400 	.word	0x40004400
 8007234:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007238:	f7ff fa2c 	bl	8006694 <HAL_RCC_GetPCLK2Freq>
 800723c:	61f8      	str	r0, [r7, #28]
        break;
 800723e:	e010      	b.n	8007262 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007240:	4b4c      	ldr	r3, [pc, #304]	@ (8007374 <UART_SetConfig+0x454>)
 8007242:	61fb      	str	r3, [r7, #28]
        break;
 8007244:	e00d      	b.n	8007262 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007246:	f7ff f977 	bl	8006538 <HAL_RCC_GetSysClockFreq>
 800724a:	61f8      	str	r0, [r7, #28]
        break;
 800724c:	e009      	b.n	8007262 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800724e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007252:	61fb      	str	r3, [r7, #28]
        break;
 8007254:	e005      	b.n	8007262 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007256:	2300      	movs	r3, #0
 8007258:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007260:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d077      	beq.n	8007358 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	005a      	lsls	r2, r3, #1
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	085b      	lsrs	r3, r3, #1
 8007272:	441a      	add	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	fbb2 f3f3 	udiv	r3, r2, r3
 800727c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	2b0f      	cmp	r3, #15
 8007282:	d916      	bls.n	80072b2 <UART_SetConfig+0x392>
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800728a:	d212      	bcs.n	80072b2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	b29b      	uxth	r3, r3
 8007290:	f023 030f 	bic.w	r3, r3, #15
 8007294:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	085b      	lsrs	r3, r3, #1
 800729a:	b29b      	uxth	r3, r3
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	8afb      	ldrh	r3, [r7, #22]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	8afa      	ldrh	r2, [r7, #22]
 80072ae:	60da      	str	r2, [r3, #12]
 80072b0:	e052      	b.n	8007358 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80072b8:	e04e      	b.n	8007358 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80072be:	2b08      	cmp	r3, #8
 80072c0:	d827      	bhi.n	8007312 <UART_SetConfig+0x3f2>
 80072c2:	a201      	add	r2, pc, #4	@ (adr r2, 80072c8 <UART_SetConfig+0x3a8>)
 80072c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c8:	080072ed 	.word	0x080072ed
 80072cc:	080072f5 	.word	0x080072f5
 80072d0:	080072fd 	.word	0x080072fd
 80072d4:	08007313 	.word	0x08007313
 80072d8:	08007303 	.word	0x08007303
 80072dc:	08007313 	.word	0x08007313
 80072e0:	08007313 	.word	0x08007313
 80072e4:	08007313 	.word	0x08007313
 80072e8:	0800730b 	.word	0x0800730b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ec:	f7ff f9bc 	bl	8006668 <HAL_RCC_GetPCLK1Freq>
 80072f0:	61f8      	str	r0, [r7, #28]
        break;
 80072f2:	e014      	b.n	800731e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072f4:	f7ff f9ce 	bl	8006694 <HAL_RCC_GetPCLK2Freq>
 80072f8:	61f8      	str	r0, [r7, #28]
        break;
 80072fa:	e010      	b.n	800731e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007374 <UART_SetConfig+0x454>)
 80072fe:	61fb      	str	r3, [r7, #28]
        break;
 8007300:	e00d      	b.n	800731e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007302:	f7ff f919 	bl	8006538 <HAL_RCC_GetSysClockFreq>
 8007306:	61f8      	str	r0, [r7, #28]
        break;
 8007308:	e009      	b.n	800731e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800730a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800730e:	61fb      	str	r3, [r7, #28]
        break;
 8007310:	e005      	b.n	800731e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800731c:	bf00      	nop
    }

    if (pclk != 0U)
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d019      	beq.n	8007358 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	085a      	lsrs	r2, r3, #1
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	441a      	add	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	fbb2 f3f3 	udiv	r3, r2, r3
 8007336:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	2b0f      	cmp	r3, #15
 800733c:	d909      	bls.n	8007352 <UART_SetConfig+0x432>
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007344:	d205      	bcs.n	8007352 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	b29a      	uxth	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	60da      	str	r2, [r3, #12]
 8007350:	e002      	b.n	8007358 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007364:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007368:	4618      	mov	r0, r3
 800736a:	3728      	adds	r7, #40	@ 0x28
 800736c:	46bd      	mov	sp, r7
 800736e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007372:	bf00      	nop
 8007374:	00f42400 	.word	0x00f42400

08007378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007384:	f003 0308 	and.w	r3, r3, #8
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00a      	beq.n	80073a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00a      	beq.n	80073e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ea:	f003 0304 	and.w	r3, r3, #4
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740c:	f003 0310 	and.w	r3, r3, #16
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00a      	beq.n	800742a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007454:	2b00      	cmp	r3, #0
 8007456:	d01a      	beq.n	800748e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007476:	d10a      	bne.n	800748e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]
  }
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b098      	sub	sp, #96	@ 0x60
 80074c0:	af02      	add	r7, sp, #8
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074cc:	f7fd fa14 	bl	80048f8 <HAL_GetTick>
 80074d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0308 	and.w	r3, r3, #8
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d12e      	bne.n	800753e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074e8:	2200      	movs	r2, #0
 80074ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f88c 	bl	800760c <UART_WaitOnFlagUntilTimeout>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d021      	beq.n	800753e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800750a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800750e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007518:	647b      	str	r3, [r7, #68]	@ 0x44
 800751a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800751e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e6      	bne.n	80074fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2220      	movs	r2, #32
 8007530:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e062      	b.n	8007604 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b04      	cmp	r3, #4
 800754a:	d149      	bne.n	80075e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800754c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007554:	2200      	movs	r2, #0
 8007556:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f856 	bl	800760c <UART_WaitOnFlagUntilTimeout>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d03c      	beq.n	80075e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	623b      	str	r3, [r7, #32]
   return(result);
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800757a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007584:	633b      	str	r3, [r7, #48]	@ 0x30
 8007586:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007588:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800758a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800758c:	e841 2300 	strex	r3, r2, [r1]
 8007590:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e6      	bne.n	8007566 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3308      	adds	r3, #8
 800759e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	e853 3f00 	ldrex	r3, [r3]
 80075a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0301 	bic.w	r3, r3, #1
 80075ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3308      	adds	r3, #8
 80075b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075b8:	61fa      	str	r2, [r7, #28]
 80075ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075bc:	69b9      	ldr	r1, [r7, #24]
 80075be:	69fa      	ldr	r2, [r7, #28]
 80075c0:	e841 2300 	strex	r3, r2, [r1]
 80075c4:	617b      	str	r3, [r7, #20]
   return(result);
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1e5      	bne.n	8007598 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e011      	b.n	8007604 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2220      	movs	r2, #32
 80075e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3758      	adds	r7, #88	@ 0x58
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	4613      	mov	r3, r2
 800761a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800761c:	e04f      	b.n	80076be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007624:	d04b      	beq.n	80076be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007626:	f7fd f967 	bl	80048f8 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	429a      	cmp	r2, r3
 8007634:	d302      	bcc.n	800763c <UART_WaitOnFlagUntilTimeout+0x30>
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e04e      	b.n	80076de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0304 	and.w	r3, r3, #4
 800764a:	2b00      	cmp	r3, #0
 800764c:	d037      	beq.n	80076be <UART_WaitOnFlagUntilTimeout+0xb2>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2b80      	cmp	r3, #128	@ 0x80
 8007652:	d034      	beq.n	80076be <UART_WaitOnFlagUntilTimeout+0xb2>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b40      	cmp	r3, #64	@ 0x40
 8007658:	d031      	beq.n	80076be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b08      	cmp	r3, #8
 8007666:	d110      	bne.n	800768a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2208      	movs	r2, #8
 800766e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 f838 	bl	80076e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2208      	movs	r2, #8
 800767a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e029      	b.n	80076de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007694:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007698:	d111      	bne.n	80076be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 f81e 	bl	80076e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2220      	movs	r2, #32
 80076ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e00f      	b.n	80076de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69da      	ldr	r2, [r3, #28]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4013      	ands	r3, r2
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	bf0c      	ite	eq
 80076ce:	2301      	moveq	r3, #1
 80076d0:	2300      	movne	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	461a      	mov	r2, r3
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d0a0      	beq.n	800761e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b095      	sub	sp, #84	@ 0x54
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076f6:	e853 3f00 	ldrex	r3, [r3]
 80076fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800770c:	643b      	str	r3, [r7, #64]	@ 0x40
 800770e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007710:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007712:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007714:	e841 2300 	strex	r3, r2, [r1]
 8007718:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800771a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1e6      	bne.n	80076ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3308      	adds	r3, #8
 8007726:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	e853 3f00 	ldrex	r3, [r3]
 800772e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	f023 0301 	bic.w	r3, r3, #1
 8007736:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3308      	adds	r3, #8
 800773e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007740:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007742:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007744:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007748:	e841 2300 	strex	r3, r2, [r1]
 800774c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800774e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e5      	bne.n	8007720 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007758:	2b01      	cmp	r3, #1
 800775a:	d118      	bne.n	800778e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	e853 3f00 	ldrex	r3, [r3]
 8007768:	60bb      	str	r3, [r7, #8]
   return(result);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	f023 0310 	bic.w	r3, r3, #16
 8007770:	647b      	str	r3, [r7, #68]	@ 0x44
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800777a:	61bb      	str	r3, [r7, #24]
 800777c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	6979      	ldr	r1, [r7, #20]
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	613b      	str	r3, [r7, #16]
   return(result);
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e6      	bne.n	800775c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2220      	movs	r2, #32
 8007792:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80077a2:	bf00      	nop
 80077a4:	3754      	adds	r7, #84	@ 0x54
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <__cvt>:
 80077ae:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077b2:	ec57 6b10 	vmov	r6, r7, d0
 80077b6:	2f00      	cmp	r7, #0
 80077b8:	460c      	mov	r4, r1
 80077ba:	4619      	mov	r1, r3
 80077bc:	463b      	mov	r3, r7
 80077be:	bfbb      	ittet	lt
 80077c0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80077c4:	461f      	movlt	r7, r3
 80077c6:	2300      	movge	r3, #0
 80077c8:	232d      	movlt	r3, #45	@ 0x2d
 80077ca:	700b      	strb	r3, [r1, #0]
 80077cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077ce:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80077d2:	4691      	mov	r9, r2
 80077d4:	f023 0820 	bic.w	r8, r3, #32
 80077d8:	bfbc      	itt	lt
 80077da:	4632      	movlt	r2, r6
 80077dc:	4616      	movlt	r6, r2
 80077de:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077e2:	d005      	beq.n	80077f0 <__cvt+0x42>
 80077e4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80077e8:	d100      	bne.n	80077ec <__cvt+0x3e>
 80077ea:	3401      	adds	r4, #1
 80077ec:	2102      	movs	r1, #2
 80077ee:	e000      	b.n	80077f2 <__cvt+0x44>
 80077f0:	2103      	movs	r1, #3
 80077f2:	ab03      	add	r3, sp, #12
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	ab02      	add	r3, sp, #8
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	ec47 6b10 	vmov	d0, r6, r7
 80077fe:	4653      	mov	r3, sl
 8007800:	4622      	mov	r2, r4
 8007802:	f000 fdc1 	bl	8008388 <_dtoa_r>
 8007806:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800780a:	4605      	mov	r5, r0
 800780c:	d119      	bne.n	8007842 <__cvt+0x94>
 800780e:	f019 0f01 	tst.w	r9, #1
 8007812:	d00e      	beq.n	8007832 <__cvt+0x84>
 8007814:	eb00 0904 	add.w	r9, r0, r4
 8007818:	2200      	movs	r2, #0
 800781a:	2300      	movs	r3, #0
 800781c:	4630      	mov	r0, r6
 800781e:	4639      	mov	r1, r7
 8007820:	f7f9 f952 	bl	8000ac8 <__aeabi_dcmpeq>
 8007824:	b108      	cbz	r0, 800782a <__cvt+0x7c>
 8007826:	f8cd 900c 	str.w	r9, [sp, #12]
 800782a:	2230      	movs	r2, #48	@ 0x30
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	454b      	cmp	r3, r9
 8007830:	d31e      	bcc.n	8007870 <__cvt+0xc2>
 8007832:	9b03      	ldr	r3, [sp, #12]
 8007834:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007836:	1b5b      	subs	r3, r3, r5
 8007838:	4628      	mov	r0, r5
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	b004      	add	sp, #16
 800783e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007842:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007846:	eb00 0904 	add.w	r9, r0, r4
 800784a:	d1e5      	bne.n	8007818 <__cvt+0x6a>
 800784c:	7803      	ldrb	r3, [r0, #0]
 800784e:	2b30      	cmp	r3, #48	@ 0x30
 8007850:	d10a      	bne.n	8007868 <__cvt+0xba>
 8007852:	2200      	movs	r2, #0
 8007854:	2300      	movs	r3, #0
 8007856:	4630      	mov	r0, r6
 8007858:	4639      	mov	r1, r7
 800785a:	f7f9 f935 	bl	8000ac8 <__aeabi_dcmpeq>
 800785e:	b918      	cbnz	r0, 8007868 <__cvt+0xba>
 8007860:	f1c4 0401 	rsb	r4, r4, #1
 8007864:	f8ca 4000 	str.w	r4, [sl]
 8007868:	f8da 3000 	ldr.w	r3, [sl]
 800786c:	4499      	add	r9, r3
 800786e:	e7d3      	b.n	8007818 <__cvt+0x6a>
 8007870:	1c59      	adds	r1, r3, #1
 8007872:	9103      	str	r1, [sp, #12]
 8007874:	701a      	strb	r2, [r3, #0]
 8007876:	e7d9      	b.n	800782c <__cvt+0x7e>

08007878 <__exponent>:
 8007878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800787a:	2900      	cmp	r1, #0
 800787c:	bfba      	itte	lt
 800787e:	4249      	neglt	r1, r1
 8007880:	232d      	movlt	r3, #45	@ 0x2d
 8007882:	232b      	movge	r3, #43	@ 0x2b
 8007884:	2909      	cmp	r1, #9
 8007886:	7002      	strb	r2, [r0, #0]
 8007888:	7043      	strb	r3, [r0, #1]
 800788a:	dd29      	ble.n	80078e0 <__exponent+0x68>
 800788c:	f10d 0307 	add.w	r3, sp, #7
 8007890:	461d      	mov	r5, r3
 8007892:	270a      	movs	r7, #10
 8007894:	461a      	mov	r2, r3
 8007896:	fbb1 f6f7 	udiv	r6, r1, r7
 800789a:	fb07 1416 	mls	r4, r7, r6, r1
 800789e:	3430      	adds	r4, #48	@ 0x30
 80078a0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80078a4:	460c      	mov	r4, r1
 80078a6:	2c63      	cmp	r4, #99	@ 0x63
 80078a8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80078ac:	4631      	mov	r1, r6
 80078ae:	dcf1      	bgt.n	8007894 <__exponent+0x1c>
 80078b0:	3130      	adds	r1, #48	@ 0x30
 80078b2:	1e94      	subs	r4, r2, #2
 80078b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078b8:	1c41      	adds	r1, r0, #1
 80078ba:	4623      	mov	r3, r4
 80078bc:	42ab      	cmp	r3, r5
 80078be:	d30a      	bcc.n	80078d6 <__exponent+0x5e>
 80078c0:	f10d 0309 	add.w	r3, sp, #9
 80078c4:	1a9b      	subs	r3, r3, r2
 80078c6:	42ac      	cmp	r4, r5
 80078c8:	bf88      	it	hi
 80078ca:	2300      	movhi	r3, #0
 80078cc:	3302      	adds	r3, #2
 80078ce:	4403      	add	r3, r0
 80078d0:	1a18      	subs	r0, r3, r0
 80078d2:	b003      	add	sp, #12
 80078d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078d6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80078da:	f801 6f01 	strb.w	r6, [r1, #1]!
 80078de:	e7ed      	b.n	80078bc <__exponent+0x44>
 80078e0:	2330      	movs	r3, #48	@ 0x30
 80078e2:	3130      	adds	r1, #48	@ 0x30
 80078e4:	7083      	strb	r3, [r0, #2]
 80078e6:	70c1      	strb	r1, [r0, #3]
 80078e8:	1d03      	adds	r3, r0, #4
 80078ea:	e7f1      	b.n	80078d0 <__exponent+0x58>

080078ec <_printf_float>:
 80078ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f0:	b08d      	sub	sp, #52	@ 0x34
 80078f2:	460c      	mov	r4, r1
 80078f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80078f8:	4616      	mov	r6, r2
 80078fa:	461f      	mov	r7, r3
 80078fc:	4605      	mov	r5, r0
 80078fe:	f000 fc89 	bl	8008214 <_localeconv_r>
 8007902:	6803      	ldr	r3, [r0, #0]
 8007904:	9304      	str	r3, [sp, #16]
 8007906:	4618      	mov	r0, r3
 8007908:	f7f8 fcb2 	bl	8000270 <strlen>
 800790c:	2300      	movs	r3, #0
 800790e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007910:	f8d8 3000 	ldr.w	r3, [r8]
 8007914:	9005      	str	r0, [sp, #20]
 8007916:	3307      	adds	r3, #7
 8007918:	f023 0307 	bic.w	r3, r3, #7
 800791c:	f103 0208 	add.w	r2, r3, #8
 8007920:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007924:	f8d4 b000 	ldr.w	fp, [r4]
 8007928:	f8c8 2000 	str.w	r2, [r8]
 800792c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007930:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007934:	9307      	str	r3, [sp, #28]
 8007936:	f8cd 8018 	str.w	r8, [sp, #24]
 800793a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800793e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007942:	4b9c      	ldr	r3, [pc, #624]	@ (8007bb4 <_printf_float+0x2c8>)
 8007944:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007948:	f7f9 f8f0 	bl	8000b2c <__aeabi_dcmpun>
 800794c:	bb70      	cbnz	r0, 80079ac <_printf_float+0xc0>
 800794e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007952:	4b98      	ldr	r3, [pc, #608]	@ (8007bb4 <_printf_float+0x2c8>)
 8007954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007958:	f7f9 f8ca 	bl	8000af0 <__aeabi_dcmple>
 800795c:	bb30      	cbnz	r0, 80079ac <_printf_float+0xc0>
 800795e:	2200      	movs	r2, #0
 8007960:	2300      	movs	r3, #0
 8007962:	4640      	mov	r0, r8
 8007964:	4649      	mov	r1, r9
 8007966:	f7f9 f8b9 	bl	8000adc <__aeabi_dcmplt>
 800796a:	b110      	cbz	r0, 8007972 <_printf_float+0x86>
 800796c:	232d      	movs	r3, #45	@ 0x2d
 800796e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007972:	4a91      	ldr	r2, [pc, #580]	@ (8007bb8 <_printf_float+0x2cc>)
 8007974:	4b91      	ldr	r3, [pc, #580]	@ (8007bbc <_printf_float+0x2d0>)
 8007976:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800797a:	bf94      	ite	ls
 800797c:	4690      	movls	r8, r2
 800797e:	4698      	movhi	r8, r3
 8007980:	2303      	movs	r3, #3
 8007982:	6123      	str	r3, [r4, #16]
 8007984:	f02b 0304 	bic.w	r3, fp, #4
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	f04f 0900 	mov.w	r9, #0
 800798e:	9700      	str	r7, [sp, #0]
 8007990:	4633      	mov	r3, r6
 8007992:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007994:	4621      	mov	r1, r4
 8007996:	4628      	mov	r0, r5
 8007998:	f000 f9d2 	bl	8007d40 <_printf_common>
 800799c:	3001      	adds	r0, #1
 800799e:	f040 808d 	bne.w	8007abc <_printf_float+0x1d0>
 80079a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079a6:	b00d      	add	sp, #52	@ 0x34
 80079a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ac:	4642      	mov	r2, r8
 80079ae:	464b      	mov	r3, r9
 80079b0:	4640      	mov	r0, r8
 80079b2:	4649      	mov	r1, r9
 80079b4:	f7f9 f8ba 	bl	8000b2c <__aeabi_dcmpun>
 80079b8:	b140      	cbz	r0, 80079cc <_printf_float+0xe0>
 80079ba:	464b      	mov	r3, r9
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bfbc      	itt	lt
 80079c0:	232d      	movlt	r3, #45	@ 0x2d
 80079c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80079c6:	4a7e      	ldr	r2, [pc, #504]	@ (8007bc0 <_printf_float+0x2d4>)
 80079c8:	4b7e      	ldr	r3, [pc, #504]	@ (8007bc4 <_printf_float+0x2d8>)
 80079ca:	e7d4      	b.n	8007976 <_printf_float+0x8a>
 80079cc:	6863      	ldr	r3, [r4, #4]
 80079ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80079d2:	9206      	str	r2, [sp, #24]
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	d13b      	bne.n	8007a50 <_printf_float+0x164>
 80079d8:	2306      	movs	r3, #6
 80079da:	6063      	str	r3, [r4, #4]
 80079dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80079e0:	2300      	movs	r3, #0
 80079e2:	6022      	str	r2, [r4, #0]
 80079e4:	9303      	str	r3, [sp, #12]
 80079e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80079e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80079ec:	ab09      	add	r3, sp, #36	@ 0x24
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	6861      	ldr	r1, [r4, #4]
 80079f2:	ec49 8b10 	vmov	d0, r8, r9
 80079f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80079fa:	4628      	mov	r0, r5
 80079fc:	f7ff fed7 	bl	80077ae <__cvt>
 8007a00:	9b06      	ldr	r3, [sp, #24]
 8007a02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a04:	2b47      	cmp	r3, #71	@ 0x47
 8007a06:	4680      	mov	r8, r0
 8007a08:	d129      	bne.n	8007a5e <_printf_float+0x172>
 8007a0a:	1cc8      	adds	r0, r1, #3
 8007a0c:	db02      	blt.n	8007a14 <_printf_float+0x128>
 8007a0e:	6863      	ldr	r3, [r4, #4]
 8007a10:	4299      	cmp	r1, r3
 8007a12:	dd41      	ble.n	8007a98 <_printf_float+0x1ac>
 8007a14:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a18:	fa5f fa8a 	uxtb.w	sl, sl
 8007a1c:	3901      	subs	r1, #1
 8007a1e:	4652      	mov	r2, sl
 8007a20:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a24:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a26:	f7ff ff27 	bl	8007878 <__exponent>
 8007a2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a2c:	1813      	adds	r3, r2, r0
 8007a2e:	2a01      	cmp	r2, #1
 8007a30:	4681      	mov	r9, r0
 8007a32:	6123      	str	r3, [r4, #16]
 8007a34:	dc02      	bgt.n	8007a3c <_printf_float+0x150>
 8007a36:	6822      	ldr	r2, [r4, #0]
 8007a38:	07d2      	lsls	r2, r2, #31
 8007a3a:	d501      	bpl.n	8007a40 <_printf_float+0x154>
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	6123      	str	r3, [r4, #16]
 8007a40:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0a2      	beq.n	800798e <_printf_float+0xa2>
 8007a48:	232d      	movs	r3, #45	@ 0x2d
 8007a4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a4e:	e79e      	b.n	800798e <_printf_float+0xa2>
 8007a50:	9a06      	ldr	r2, [sp, #24]
 8007a52:	2a47      	cmp	r2, #71	@ 0x47
 8007a54:	d1c2      	bne.n	80079dc <_printf_float+0xf0>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1c0      	bne.n	80079dc <_printf_float+0xf0>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e7bd      	b.n	80079da <_printf_float+0xee>
 8007a5e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a62:	d9db      	bls.n	8007a1c <_printf_float+0x130>
 8007a64:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007a68:	d118      	bne.n	8007a9c <_printf_float+0x1b0>
 8007a6a:	2900      	cmp	r1, #0
 8007a6c:	6863      	ldr	r3, [r4, #4]
 8007a6e:	dd0b      	ble.n	8007a88 <_printf_float+0x19c>
 8007a70:	6121      	str	r1, [r4, #16]
 8007a72:	b913      	cbnz	r3, 8007a7a <_printf_float+0x18e>
 8007a74:	6822      	ldr	r2, [r4, #0]
 8007a76:	07d0      	lsls	r0, r2, #31
 8007a78:	d502      	bpl.n	8007a80 <_printf_float+0x194>
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	440b      	add	r3, r1
 8007a7e:	6123      	str	r3, [r4, #16]
 8007a80:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007a82:	f04f 0900 	mov.w	r9, #0
 8007a86:	e7db      	b.n	8007a40 <_printf_float+0x154>
 8007a88:	b913      	cbnz	r3, 8007a90 <_printf_float+0x1a4>
 8007a8a:	6822      	ldr	r2, [r4, #0]
 8007a8c:	07d2      	lsls	r2, r2, #31
 8007a8e:	d501      	bpl.n	8007a94 <_printf_float+0x1a8>
 8007a90:	3302      	adds	r3, #2
 8007a92:	e7f4      	b.n	8007a7e <_printf_float+0x192>
 8007a94:	2301      	movs	r3, #1
 8007a96:	e7f2      	b.n	8007a7e <_printf_float+0x192>
 8007a98:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007a9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a9e:	4299      	cmp	r1, r3
 8007aa0:	db05      	blt.n	8007aae <_printf_float+0x1c2>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	6121      	str	r1, [r4, #16]
 8007aa6:	07d8      	lsls	r0, r3, #31
 8007aa8:	d5ea      	bpl.n	8007a80 <_printf_float+0x194>
 8007aaa:	1c4b      	adds	r3, r1, #1
 8007aac:	e7e7      	b.n	8007a7e <_printf_float+0x192>
 8007aae:	2900      	cmp	r1, #0
 8007ab0:	bfd4      	ite	le
 8007ab2:	f1c1 0202 	rsble	r2, r1, #2
 8007ab6:	2201      	movgt	r2, #1
 8007ab8:	4413      	add	r3, r2
 8007aba:	e7e0      	b.n	8007a7e <_printf_float+0x192>
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	055a      	lsls	r2, r3, #21
 8007ac0:	d407      	bmi.n	8007ad2 <_printf_float+0x1e6>
 8007ac2:	6923      	ldr	r3, [r4, #16]
 8007ac4:	4642      	mov	r2, r8
 8007ac6:	4631      	mov	r1, r6
 8007ac8:	4628      	mov	r0, r5
 8007aca:	47b8      	blx	r7
 8007acc:	3001      	adds	r0, #1
 8007ace:	d12b      	bne.n	8007b28 <_printf_float+0x23c>
 8007ad0:	e767      	b.n	80079a2 <_printf_float+0xb6>
 8007ad2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ad6:	f240 80dd 	bls.w	8007c94 <_printf_float+0x3a8>
 8007ada:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ade:	2200      	movs	r2, #0
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f7f8 fff1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d033      	beq.n	8007b52 <_printf_float+0x266>
 8007aea:	4a37      	ldr	r2, [pc, #220]	@ (8007bc8 <_printf_float+0x2dc>)
 8007aec:	2301      	movs	r3, #1
 8007aee:	4631      	mov	r1, r6
 8007af0:	4628      	mov	r0, r5
 8007af2:	47b8      	blx	r7
 8007af4:	3001      	adds	r0, #1
 8007af6:	f43f af54 	beq.w	80079a2 <_printf_float+0xb6>
 8007afa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007afe:	4543      	cmp	r3, r8
 8007b00:	db02      	blt.n	8007b08 <_printf_float+0x21c>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	07d8      	lsls	r0, r3, #31
 8007b06:	d50f      	bpl.n	8007b28 <_printf_float+0x23c>
 8007b08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	4628      	mov	r0, r5
 8007b10:	47b8      	blx	r7
 8007b12:	3001      	adds	r0, #1
 8007b14:	f43f af45 	beq.w	80079a2 <_printf_float+0xb6>
 8007b18:	f04f 0900 	mov.w	r9, #0
 8007b1c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007b20:	f104 0a1a 	add.w	sl, r4, #26
 8007b24:	45c8      	cmp	r8, r9
 8007b26:	dc09      	bgt.n	8007b3c <_printf_float+0x250>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	079b      	lsls	r3, r3, #30
 8007b2c:	f100 8103 	bmi.w	8007d36 <_printf_float+0x44a>
 8007b30:	68e0      	ldr	r0, [r4, #12]
 8007b32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b34:	4298      	cmp	r0, r3
 8007b36:	bfb8      	it	lt
 8007b38:	4618      	movlt	r0, r3
 8007b3a:	e734      	b.n	80079a6 <_printf_float+0xba>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	4652      	mov	r2, sl
 8007b40:	4631      	mov	r1, r6
 8007b42:	4628      	mov	r0, r5
 8007b44:	47b8      	blx	r7
 8007b46:	3001      	adds	r0, #1
 8007b48:	f43f af2b 	beq.w	80079a2 <_printf_float+0xb6>
 8007b4c:	f109 0901 	add.w	r9, r9, #1
 8007b50:	e7e8      	b.n	8007b24 <_printf_float+0x238>
 8007b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	dc39      	bgt.n	8007bcc <_printf_float+0x2e0>
 8007b58:	4a1b      	ldr	r2, [pc, #108]	@ (8007bc8 <_printf_float+0x2dc>)
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	4628      	mov	r0, r5
 8007b60:	47b8      	blx	r7
 8007b62:	3001      	adds	r0, #1
 8007b64:	f43f af1d 	beq.w	80079a2 <_printf_float+0xb6>
 8007b68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007b6c:	ea59 0303 	orrs.w	r3, r9, r3
 8007b70:	d102      	bne.n	8007b78 <_printf_float+0x28c>
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	07d9      	lsls	r1, r3, #31
 8007b76:	d5d7      	bpl.n	8007b28 <_printf_float+0x23c>
 8007b78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4628      	mov	r0, r5
 8007b80:	47b8      	blx	r7
 8007b82:	3001      	adds	r0, #1
 8007b84:	f43f af0d 	beq.w	80079a2 <_printf_float+0xb6>
 8007b88:	f04f 0a00 	mov.w	sl, #0
 8007b8c:	f104 0b1a 	add.w	fp, r4, #26
 8007b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b92:	425b      	negs	r3, r3
 8007b94:	4553      	cmp	r3, sl
 8007b96:	dc01      	bgt.n	8007b9c <_printf_float+0x2b0>
 8007b98:	464b      	mov	r3, r9
 8007b9a:	e793      	b.n	8007ac4 <_printf_float+0x1d8>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	465a      	mov	r2, fp
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	47b8      	blx	r7
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	f43f aefb 	beq.w	80079a2 <_printf_float+0xb6>
 8007bac:	f10a 0a01 	add.w	sl, sl, #1
 8007bb0:	e7ee      	b.n	8007b90 <_printf_float+0x2a4>
 8007bb2:	bf00      	nop
 8007bb4:	7fefffff 	.word	0x7fefffff
 8007bb8:	0800b084 	.word	0x0800b084
 8007bbc:	0800b088 	.word	0x0800b088
 8007bc0:	0800b08c 	.word	0x0800b08c
 8007bc4:	0800b090 	.word	0x0800b090
 8007bc8:	0800b094 	.word	0x0800b094
 8007bcc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007bd2:	4553      	cmp	r3, sl
 8007bd4:	bfa8      	it	ge
 8007bd6:	4653      	movge	r3, sl
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	4699      	mov	r9, r3
 8007bdc:	dc36      	bgt.n	8007c4c <_printf_float+0x360>
 8007bde:	f04f 0b00 	mov.w	fp, #0
 8007be2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007be6:	f104 021a 	add.w	r2, r4, #26
 8007bea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bec:	9306      	str	r3, [sp, #24]
 8007bee:	eba3 0309 	sub.w	r3, r3, r9
 8007bf2:	455b      	cmp	r3, fp
 8007bf4:	dc31      	bgt.n	8007c5a <_printf_float+0x36e>
 8007bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bf8:	459a      	cmp	sl, r3
 8007bfa:	dc3a      	bgt.n	8007c72 <_printf_float+0x386>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	07da      	lsls	r2, r3, #31
 8007c00:	d437      	bmi.n	8007c72 <_printf_float+0x386>
 8007c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c04:	ebaa 0903 	sub.w	r9, sl, r3
 8007c08:	9b06      	ldr	r3, [sp, #24]
 8007c0a:	ebaa 0303 	sub.w	r3, sl, r3
 8007c0e:	4599      	cmp	r9, r3
 8007c10:	bfa8      	it	ge
 8007c12:	4699      	movge	r9, r3
 8007c14:	f1b9 0f00 	cmp.w	r9, #0
 8007c18:	dc33      	bgt.n	8007c82 <_printf_float+0x396>
 8007c1a:	f04f 0800 	mov.w	r8, #0
 8007c1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c22:	f104 0b1a 	add.w	fp, r4, #26
 8007c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c28:	ebaa 0303 	sub.w	r3, sl, r3
 8007c2c:	eba3 0309 	sub.w	r3, r3, r9
 8007c30:	4543      	cmp	r3, r8
 8007c32:	f77f af79 	ble.w	8007b28 <_printf_float+0x23c>
 8007c36:	2301      	movs	r3, #1
 8007c38:	465a      	mov	r2, fp
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	47b8      	blx	r7
 8007c40:	3001      	adds	r0, #1
 8007c42:	f43f aeae 	beq.w	80079a2 <_printf_float+0xb6>
 8007c46:	f108 0801 	add.w	r8, r8, #1
 8007c4a:	e7ec      	b.n	8007c26 <_printf_float+0x33a>
 8007c4c:	4642      	mov	r2, r8
 8007c4e:	4631      	mov	r1, r6
 8007c50:	4628      	mov	r0, r5
 8007c52:	47b8      	blx	r7
 8007c54:	3001      	adds	r0, #1
 8007c56:	d1c2      	bne.n	8007bde <_printf_float+0x2f2>
 8007c58:	e6a3      	b.n	80079a2 <_printf_float+0xb6>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	4628      	mov	r0, r5
 8007c60:	9206      	str	r2, [sp, #24]
 8007c62:	47b8      	blx	r7
 8007c64:	3001      	adds	r0, #1
 8007c66:	f43f ae9c 	beq.w	80079a2 <_printf_float+0xb6>
 8007c6a:	9a06      	ldr	r2, [sp, #24]
 8007c6c:	f10b 0b01 	add.w	fp, fp, #1
 8007c70:	e7bb      	b.n	8007bea <_printf_float+0x2fe>
 8007c72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c76:	4631      	mov	r1, r6
 8007c78:	4628      	mov	r0, r5
 8007c7a:	47b8      	blx	r7
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d1c0      	bne.n	8007c02 <_printf_float+0x316>
 8007c80:	e68f      	b.n	80079a2 <_printf_float+0xb6>
 8007c82:	9a06      	ldr	r2, [sp, #24]
 8007c84:	464b      	mov	r3, r9
 8007c86:	4442      	add	r2, r8
 8007c88:	4631      	mov	r1, r6
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	47b8      	blx	r7
 8007c8e:	3001      	adds	r0, #1
 8007c90:	d1c3      	bne.n	8007c1a <_printf_float+0x32e>
 8007c92:	e686      	b.n	80079a2 <_printf_float+0xb6>
 8007c94:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c98:	f1ba 0f01 	cmp.w	sl, #1
 8007c9c:	dc01      	bgt.n	8007ca2 <_printf_float+0x3b6>
 8007c9e:	07db      	lsls	r3, r3, #31
 8007ca0:	d536      	bpl.n	8007d10 <_printf_float+0x424>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	4642      	mov	r2, r8
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	4628      	mov	r0, r5
 8007caa:	47b8      	blx	r7
 8007cac:	3001      	adds	r0, #1
 8007cae:	f43f ae78 	beq.w	80079a2 <_printf_float+0xb6>
 8007cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b8      	blx	r7
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	f43f ae70 	beq.w	80079a2 <_printf_float+0xb6>
 8007cc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007cce:	f7f8 fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cd2:	b9c0      	cbnz	r0, 8007d06 <_printf_float+0x41a>
 8007cd4:	4653      	mov	r3, sl
 8007cd6:	f108 0201 	add.w	r2, r8, #1
 8007cda:	4631      	mov	r1, r6
 8007cdc:	4628      	mov	r0, r5
 8007cde:	47b8      	blx	r7
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d10c      	bne.n	8007cfe <_printf_float+0x412>
 8007ce4:	e65d      	b.n	80079a2 <_printf_float+0xb6>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	465a      	mov	r2, fp
 8007cea:	4631      	mov	r1, r6
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b8      	blx	r7
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	f43f ae56 	beq.w	80079a2 <_printf_float+0xb6>
 8007cf6:	f108 0801 	add.w	r8, r8, #1
 8007cfa:	45d0      	cmp	r8, sl
 8007cfc:	dbf3      	blt.n	8007ce6 <_printf_float+0x3fa>
 8007cfe:	464b      	mov	r3, r9
 8007d00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d04:	e6df      	b.n	8007ac6 <_printf_float+0x1da>
 8007d06:	f04f 0800 	mov.w	r8, #0
 8007d0a:	f104 0b1a 	add.w	fp, r4, #26
 8007d0e:	e7f4      	b.n	8007cfa <_printf_float+0x40e>
 8007d10:	2301      	movs	r3, #1
 8007d12:	4642      	mov	r2, r8
 8007d14:	e7e1      	b.n	8007cda <_printf_float+0x3ee>
 8007d16:	2301      	movs	r3, #1
 8007d18:	464a      	mov	r2, r9
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	47b8      	blx	r7
 8007d20:	3001      	adds	r0, #1
 8007d22:	f43f ae3e 	beq.w	80079a2 <_printf_float+0xb6>
 8007d26:	f108 0801 	add.w	r8, r8, #1
 8007d2a:	68e3      	ldr	r3, [r4, #12]
 8007d2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d2e:	1a5b      	subs	r3, r3, r1
 8007d30:	4543      	cmp	r3, r8
 8007d32:	dcf0      	bgt.n	8007d16 <_printf_float+0x42a>
 8007d34:	e6fc      	b.n	8007b30 <_printf_float+0x244>
 8007d36:	f04f 0800 	mov.w	r8, #0
 8007d3a:	f104 0919 	add.w	r9, r4, #25
 8007d3e:	e7f4      	b.n	8007d2a <_printf_float+0x43e>

08007d40 <_printf_common>:
 8007d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d44:	4616      	mov	r6, r2
 8007d46:	4698      	mov	r8, r3
 8007d48:	688a      	ldr	r2, [r1, #8]
 8007d4a:	690b      	ldr	r3, [r1, #16]
 8007d4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d50:	4293      	cmp	r3, r2
 8007d52:	bfb8      	it	lt
 8007d54:	4613      	movlt	r3, r2
 8007d56:	6033      	str	r3, [r6, #0]
 8007d58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d5c:	4607      	mov	r7, r0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	b10a      	cbz	r2, 8007d66 <_printf_common+0x26>
 8007d62:	3301      	adds	r3, #1
 8007d64:	6033      	str	r3, [r6, #0]
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	0699      	lsls	r1, r3, #26
 8007d6a:	bf42      	ittt	mi
 8007d6c:	6833      	ldrmi	r3, [r6, #0]
 8007d6e:	3302      	addmi	r3, #2
 8007d70:	6033      	strmi	r3, [r6, #0]
 8007d72:	6825      	ldr	r5, [r4, #0]
 8007d74:	f015 0506 	ands.w	r5, r5, #6
 8007d78:	d106      	bne.n	8007d88 <_printf_common+0x48>
 8007d7a:	f104 0a19 	add.w	sl, r4, #25
 8007d7e:	68e3      	ldr	r3, [r4, #12]
 8007d80:	6832      	ldr	r2, [r6, #0]
 8007d82:	1a9b      	subs	r3, r3, r2
 8007d84:	42ab      	cmp	r3, r5
 8007d86:	dc26      	bgt.n	8007dd6 <_printf_common+0x96>
 8007d88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d8c:	6822      	ldr	r2, [r4, #0]
 8007d8e:	3b00      	subs	r3, #0
 8007d90:	bf18      	it	ne
 8007d92:	2301      	movne	r3, #1
 8007d94:	0692      	lsls	r2, r2, #26
 8007d96:	d42b      	bmi.n	8007df0 <_printf_common+0xb0>
 8007d98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d9c:	4641      	mov	r1, r8
 8007d9e:	4638      	mov	r0, r7
 8007da0:	47c8      	blx	r9
 8007da2:	3001      	adds	r0, #1
 8007da4:	d01e      	beq.n	8007de4 <_printf_common+0xa4>
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	6922      	ldr	r2, [r4, #16]
 8007daa:	f003 0306 	and.w	r3, r3, #6
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	bf02      	ittt	eq
 8007db2:	68e5      	ldreq	r5, [r4, #12]
 8007db4:	6833      	ldreq	r3, [r6, #0]
 8007db6:	1aed      	subeq	r5, r5, r3
 8007db8:	68a3      	ldr	r3, [r4, #8]
 8007dba:	bf0c      	ite	eq
 8007dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dc0:	2500      	movne	r5, #0
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	bfc4      	itt	gt
 8007dc6:	1a9b      	subgt	r3, r3, r2
 8007dc8:	18ed      	addgt	r5, r5, r3
 8007dca:	2600      	movs	r6, #0
 8007dcc:	341a      	adds	r4, #26
 8007dce:	42b5      	cmp	r5, r6
 8007dd0:	d11a      	bne.n	8007e08 <_printf_common+0xc8>
 8007dd2:	2000      	movs	r0, #0
 8007dd4:	e008      	b.n	8007de8 <_printf_common+0xa8>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	4652      	mov	r2, sl
 8007dda:	4641      	mov	r1, r8
 8007ddc:	4638      	mov	r0, r7
 8007dde:	47c8      	blx	r9
 8007de0:	3001      	adds	r0, #1
 8007de2:	d103      	bne.n	8007dec <_printf_common+0xac>
 8007de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dec:	3501      	adds	r5, #1
 8007dee:	e7c6      	b.n	8007d7e <_printf_common+0x3e>
 8007df0:	18e1      	adds	r1, r4, r3
 8007df2:	1c5a      	adds	r2, r3, #1
 8007df4:	2030      	movs	r0, #48	@ 0x30
 8007df6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007dfa:	4422      	add	r2, r4
 8007dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e04:	3302      	adds	r3, #2
 8007e06:	e7c7      	b.n	8007d98 <_printf_common+0x58>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	4622      	mov	r2, r4
 8007e0c:	4641      	mov	r1, r8
 8007e0e:	4638      	mov	r0, r7
 8007e10:	47c8      	blx	r9
 8007e12:	3001      	adds	r0, #1
 8007e14:	d0e6      	beq.n	8007de4 <_printf_common+0xa4>
 8007e16:	3601      	adds	r6, #1
 8007e18:	e7d9      	b.n	8007dce <_printf_common+0x8e>
	...

08007e1c <_printf_i>:
 8007e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e20:	7e0f      	ldrb	r7, [r1, #24]
 8007e22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e24:	2f78      	cmp	r7, #120	@ 0x78
 8007e26:	4691      	mov	r9, r2
 8007e28:	4680      	mov	r8, r0
 8007e2a:	460c      	mov	r4, r1
 8007e2c:	469a      	mov	sl, r3
 8007e2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e32:	d807      	bhi.n	8007e44 <_printf_i+0x28>
 8007e34:	2f62      	cmp	r7, #98	@ 0x62
 8007e36:	d80a      	bhi.n	8007e4e <_printf_i+0x32>
 8007e38:	2f00      	cmp	r7, #0
 8007e3a:	f000 80d2 	beq.w	8007fe2 <_printf_i+0x1c6>
 8007e3e:	2f58      	cmp	r7, #88	@ 0x58
 8007e40:	f000 80b9 	beq.w	8007fb6 <_printf_i+0x19a>
 8007e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e4c:	e03a      	b.n	8007ec4 <_printf_i+0xa8>
 8007e4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e52:	2b15      	cmp	r3, #21
 8007e54:	d8f6      	bhi.n	8007e44 <_printf_i+0x28>
 8007e56:	a101      	add	r1, pc, #4	@ (adr r1, 8007e5c <_printf_i+0x40>)
 8007e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e5c:	08007eb5 	.word	0x08007eb5
 8007e60:	08007ec9 	.word	0x08007ec9
 8007e64:	08007e45 	.word	0x08007e45
 8007e68:	08007e45 	.word	0x08007e45
 8007e6c:	08007e45 	.word	0x08007e45
 8007e70:	08007e45 	.word	0x08007e45
 8007e74:	08007ec9 	.word	0x08007ec9
 8007e78:	08007e45 	.word	0x08007e45
 8007e7c:	08007e45 	.word	0x08007e45
 8007e80:	08007e45 	.word	0x08007e45
 8007e84:	08007e45 	.word	0x08007e45
 8007e88:	08007fc9 	.word	0x08007fc9
 8007e8c:	08007ef3 	.word	0x08007ef3
 8007e90:	08007f83 	.word	0x08007f83
 8007e94:	08007e45 	.word	0x08007e45
 8007e98:	08007e45 	.word	0x08007e45
 8007e9c:	08007feb 	.word	0x08007feb
 8007ea0:	08007e45 	.word	0x08007e45
 8007ea4:	08007ef3 	.word	0x08007ef3
 8007ea8:	08007e45 	.word	0x08007e45
 8007eac:	08007e45 	.word	0x08007e45
 8007eb0:	08007f8b 	.word	0x08007f8b
 8007eb4:	6833      	ldr	r3, [r6, #0]
 8007eb6:	1d1a      	adds	r2, r3, #4
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6032      	str	r2, [r6, #0]
 8007ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ec0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e09d      	b.n	8008004 <_printf_i+0x1e8>
 8007ec8:	6833      	ldr	r3, [r6, #0]
 8007eca:	6820      	ldr	r0, [r4, #0]
 8007ecc:	1d19      	adds	r1, r3, #4
 8007ece:	6031      	str	r1, [r6, #0]
 8007ed0:	0606      	lsls	r6, r0, #24
 8007ed2:	d501      	bpl.n	8007ed8 <_printf_i+0xbc>
 8007ed4:	681d      	ldr	r5, [r3, #0]
 8007ed6:	e003      	b.n	8007ee0 <_printf_i+0xc4>
 8007ed8:	0645      	lsls	r5, r0, #25
 8007eda:	d5fb      	bpl.n	8007ed4 <_printf_i+0xb8>
 8007edc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ee0:	2d00      	cmp	r5, #0
 8007ee2:	da03      	bge.n	8007eec <_printf_i+0xd0>
 8007ee4:	232d      	movs	r3, #45	@ 0x2d
 8007ee6:	426d      	negs	r5, r5
 8007ee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007eec:	4859      	ldr	r0, [pc, #356]	@ (8008054 <_printf_i+0x238>)
 8007eee:	230a      	movs	r3, #10
 8007ef0:	e011      	b.n	8007f16 <_printf_i+0xfa>
 8007ef2:	6821      	ldr	r1, [r4, #0]
 8007ef4:	6833      	ldr	r3, [r6, #0]
 8007ef6:	0608      	lsls	r0, r1, #24
 8007ef8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007efc:	d402      	bmi.n	8007f04 <_printf_i+0xe8>
 8007efe:	0649      	lsls	r1, r1, #25
 8007f00:	bf48      	it	mi
 8007f02:	b2ad      	uxthmi	r5, r5
 8007f04:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f06:	4853      	ldr	r0, [pc, #332]	@ (8008054 <_printf_i+0x238>)
 8007f08:	6033      	str	r3, [r6, #0]
 8007f0a:	bf14      	ite	ne
 8007f0c:	230a      	movne	r3, #10
 8007f0e:	2308      	moveq	r3, #8
 8007f10:	2100      	movs	r1, #0
 8007f12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f16:	6866      	ldr	r6, [r4, #4]
 8007f18:	60a6      	str	r6, [r4, #8]
 8007f1a:	2e00      	cmp	r6, #0
 8007f1c:	bfa2      	ittt	ge
 8007f1e:	6821      	ldrge	r1, [r4, #0]
 8007f20:	f021 0104 	bicge.w	r1, r1, #4
 8007f24:	6021      	strge	r1, [r4, #0]
 8007f26:	b90d      	cbnz	r5, 8007f2c <_printf_i+0x110>
 8007f28:	2e00      	cmp	r6, #0
 8007f2a:	d04b      	beq.n	8007fc4 <_printf_i+0x1a8>
 8007f2c:	4616      	mov	r6, r2
 8007f2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f32:	fb03 5711 	mls	r7, r3, r1, r5
 8007f36:	5dc7      	ldrb	r7, [r0, r7]
 8007f38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f3c:	462f      	mov	r7, r5
 8007f3e:	42bb      	cmp	r3, r7
 8007f40:	460d      	mov	r5, r1
 8007f42:	d9f4      	bls.n	8007f2e <_printf_i+0x112>
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	d10b      	bne.n	8007f60 <_printf_i+0x144>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	07df      	lsls	r7, r3, #31
 8007f4c:	d508      	bpl.n	8007f60 <_printf_i+0x144>
 8007f4e:	6923      	ldr	r3, [r4, #16]
 8007f50:	6861      	ldr	r1, [r4, #4]
 8007f52:	4299      	cmp	r1, r3
 8007f54:	bfde      	ittt	le
 8007f56:	2330      	movle	r3, #48	@ 0x30
 8007f58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f5c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007f60:	1b92      	subs	r2, r2, r6
 8007f62:	6122      	str	r2, [r4, #16]
 8007f64:	f8cd a000 	str.w	sl, [sp]
 8007f68:	464b      	mov	r3, r9
 8007f6a:	aa03      	add	r2, sp, #12
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4640      	mov	r0, r8
 8007f70:	f7ff fee6 	bl	8007d40 <_printf_common>
 8007f74:	3001      	adds	r0, #1
 8007f76:	d14a      	bne.n	800800e <_printf_i+0x1f2>
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f7c:	b004      	add	sp, #16
 8007f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	f043 0320 	orr.w	r3, r3, #32
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	4833      	ldr	r0, [pc, #204]	@ (8008058 <_printf_i+0x23c>)
 8007f8c:	2778      	movs	r7, #120	@ 0x78
 8007f8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	6831      	ldr	r1, [r6, #0]
 8007f96:	061f      	lsls	r7, r3, #24
 8007f98:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f9c:	d402      	bmi.n	8007fa4 <_printf_i+0x188>
 8007f9e:	065f      	lsls	r7, r3, #25
 8007fa0:	bf48      	it	mi
 8007fa2:	b2ad      	uxthmi	r5, r5
 8007fa4:	6031      	str	r1, [r6, #0]
 8007fa6:	07d9      	lsls	r1, r3, #31
 8007fa8:	bf44      	itt	mi
 8007faa:	f043 0320 	orrmi.w	r3, r3, #32
 8007fae:	6023      	strmi	r3, [r4, #0]
 8007fb0:	b11d      	cbz	r5, 8007fba <_printf_i+0x19e>
 8007fb2:	2310      	movs	r3, #16
 8007fb4:	e7ac      	b.n	8007f10 <_printf_i+0xf4>
 8007fb6:	4827      	ldr	r0, [pc, #156]	@ (8008054 <_printf_i+0x238>)
 8007fb8:	e7e9      	b.n	8007f8e <_printf_i+0x172>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	f023 0320 	bic.w	r3, r3, #32
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	e7f6      	b.n	8007fb2 <_printf_i+0x196>
 8007fc4:	4616      	mov	r6, r2
 8007fc6:	e7bd      	b.n	8007f44 <_printf_i+0x128>
 8007fc8:	6833      	ldr	r3, [r6, #0]
 8007fca:	6825      	ldr	r5, [r4, #0]
 8007fcc:	6961      	ldr	r1, [r4, #20]
 8007fce:	1d18      	adds	r0, r3, #4
 8007fd0:	6030      	str	r0, [r6, #0]
 8007fd2:	062e      	lsls	r6, r5, #24
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	d501      	bpl.n	8007fdc <_printf_i+0x1c0>
 8007fd8:	6019      	str	r1, [r3, #0]
 8007fda:	e002      	b.n	8007fe2 <_printf_i+0x1c6>
 8007fdc:	0668      	lsls	r0, r5, #25
 8007fde:	d5fb      	bpl.n	8007fd8 <_printf_i+0x1bc>
 8007fe0:	8019      	strh	r1, [r3, #0]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	6123      	str	r3, [r4, #16]
 8007fe6:	4616      	mov	r6, r2
 8007fe8:	e7bc      	b.n	8007f64 <_printf_i+0x148>
 8007fea:	6833      	ldr	r3, [r6, #0]
 8007fec:	1d1a      	adds	r2, r3, #4
 8007fee:	6032      	str	r2, [r6, #0]
 8007ff0:	681e      	ldr	r6, [r3, #0]
 8007ff2:	6862      	ldr	r2, [r4, #4]
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	f7f8 f8ea 	bl	80001d0 <memchr>
 8007ffc:	b108      	cbz	r0, 8008002 <_printf_i+0x1e6>
 8007ffe:	1b80      	subs	r0, r0, r6
 8008000:	6060      	str	r0, [r4, #4]
 8008002:	6863      	ldr	r3, [r4, #4]
 8008004:	6123      	str	r3, [r4, #16]
 8008006:	2300      	movs	r3, #0
 8008008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800800c:	e7aa      	b.n	8007f64 <_printf_i+0x148>
 800800e:	6923      	ldr	r3, [r4, #16]
 8008010:	4632      	mov	r2, r6
 8008012:	4649      	mov	r1, r9
 8008014:	4640      	mov	r0, r8
 8008016:	47d0      	blx	sl
 8008018:	3001      	adds	r0, #1
 800801a:	d0ad      	beq.n	8007f78 <_printf_i+0x15c>
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	079b      	lsls	r3, r3, #30
 8008020:	d413      	bmi.n	800804a <_printf_i+0x22e>
 8008022:	68e0      	ldr	r0, [r4, #12]
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	4298      	cmp	r0, r3
 8008028:	bfb8      	it	lt
 800802a:	4618      	movlt	r0, r3
 800802c:	e7a6      	b.n	8007f7c <_printf_i+0x160>
 800802e:	2301      	movs	r3, #1
 8008030:	4632      	mov	r2, r6
 8008032:	4649      	mov	r1, r9
 8008034:	4640      	mov	r0, r8
 8008036:	47d0      	blx	sl
 8008038:	3001      	adds	r0, #1
 800803a:	d09d      	beq.n	8007f78 <_printf_i+0x15c>
 800803c:	3501      	adds	r5, #1
 800803e:	68e3      	ldr	r3, [r4, #12]
 8008040:	9903      	ldr	r1, [sp, #12]
 8008042:	1a5b      	subs	r3, r3, r1
 8008044:	42ab      	cmp	r3, r5
 8008046:	dcf2      	bgt.n	800802e <_printf_i+0x212>
 8008048:	e7eb      	b.n	8008022 <_printf_i+0x206>
 800804a:	2500      	movs	r5, #0
 800804c:	f104 0619 	add.w	r6, r4, #25
 8008050:	e7f5      	b.n	800803e <_printf_i+0x222>
 8008052:	bf00      	nop
 8008054:	0800b096 	.word	0x0800b096
 8008058:	0800b0a7 	.word	0x0800b0a7

0800805c <std>:
 800805c:	2300      	movs	r3, #0
 800805e:	b510      	push	{r4, lr}
 8008060:	4604      	mov	r4, r0
 8008062:	e9c0 3300 	strd	r3, r3, [r0]
 8008066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800806a:	6083      	str	r3, [r0, #8]
 800806c:	8181      	strh	r1, [r0, #12]
 800806e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008070:	81c2      	strh	r2, [r0, #14]
 8008072:	6183      	str	r3, [r0, #24]
 8008074:	4619      	mov	r1, r3
 8008076:	2208      	movs	r2, #8
 8008078:	305c      	adds	r0, #92	@ 0x5c
 800807a:	f000 f8c3 	bl	8008204 <memset>
 800807e:	4b0d      	ldr	r3, [pc, #52]	@ (80080b4 <std+0x58>)
 8008080:	6263      	str	r3, [r4, #36]	@ 0x24
 8008082:	4b0d      	ldr	r3, [pc, #52]	@ (80080b8 <std+0x5c>)
 8008084:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008086:	4b0d      	ldr	r3, [pc, #52]	@ (80080bc <std+0x60>)
 8008088:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800808a:	4b0d      	ldr	r3, [pc, #52]	@ (80080c0 <std+0x64>)
 800808c:	6323      	str	r3, [r4, #48]	@ 0x30
 800808e:	4b0d      	ldr	r3, [pc, #52]	@ (80080c4 <std+0x68>)
 8008090:	6224      	str	r4, [r4, #32]
 8008092:	429c      	cmp	r4, r3
 8008094:	d006      	beq.n	80080a4 <std+0x48>
 8008096:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800809a:	4294      	cmp	r4, r2
 800809c:	d002      	beq.n	80080a4 <std+0x48>
 800809e:	33d0      	adds	r3, #208	@ 0xd0
 80080a0:	429c      	cmp	r4, r3
 80080a2:	d105      	bne.n	80080b0 <std+0x54>
 80080a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080ac:	f000 b8e0 	b.w	8008270 <__retarget_lock_init_recursive>
 80080b0:	bd10      	pop	{r4, pc}
 80080b2:	bf00      	nop
 80080b4:	08009b5d 	.word	0x08009b5d
 80080b8:	08009b7f 	.word	0x08009b7f
 80080bc:	08009bb7 	.word	0x08009bb7
 80080c0:	08009bdb 	.word	0x08009bdb
 80080c4:	20002e88 	.word	0x20002e88

080080c8 <stdio_exit_handler>:
 80080c8:	4a02      	ldr	r2, [pc, #8]	@ (80080d4 <stdio_exit_handler+0xc>)
 80080ca:	4903      	ldr	r1, [pc, #12]	@ (80080d8 <stdio_exit_handler+0x10>)
 80080cc:	4803      	ldr	r0, [pc, #12]	@ (80080dc <stdio_exit_handler+0x14>)
 80080ce:	f000 b869 	b.w	80081a4 <_fwalk_sglue>
 80080d2:	bf00      	nop
 80080d4:	20000010 	.word	0x20000010
 80080d8:	080093f1 	.word	0x080093f1
 80080dc:	20000020 	.word	0x20000020

080080e0 <cleanup_stdio>:
 80080e0:	6841      	ldr	r1, [r0, #4]
 80080e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008114 <cleanup_stdio+0x34>)
 80080e4:	4299      	cmp	r1, r3
 80080e6:	b510      	push	{r4, lr}
 80080e8:	4604      	mov	r4, r0
 80080ea:	d001      	beq.n	80080f0 <cleanup_stdio+0x10>
 80080ec:	f001 f980 	bl	80093f0 <_fflush_r>
 80080f0:	68a1      	ldr	r1, [r4, #8]
 80080f2:	4b09      	ldr	r3, [pc, #36]	@ (8008118 <cleanup_stdio+0x38>)
 80080f4:	4299      	cmp	r1, r3
 80080f6:	d002      	beq.n	80080fe <cleanup_stdio+0x1e>
 80080f8:	4620      	mov	r0, r4
 80080fa:	f001 f979 	bl	80093f0 <_fflush_r>
 80080fe:	68e1      	ldr	r1, [r4, #12]
 8008100:	4b06      	ldr	r3, [pc, #24]	@ (800811c <cleanup_stdio+0x3c>)
 8008102:	4299      	cmp	r1, r3
 8008104:	d004      	beq.n	8008110 <cleanup_stdio+0x30>
 8008106:	4620      	mov	r0, r4
 8008108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800810c:	f001 b970 	b.w	80093f0 <_fflush_r>
 8008110:	bd10      	pop	{r4, pc}
 8008112:	bf00      	nop
 8008114:	20002e88 	.word	0x20002e88
 8008118:	20002ef0 	.word	0x20002ef0
 800811c:	20002f58 	.word	0x20002f58

08008120 <global_stdio_init.part.0>:
 8008120:	b510      	push	{r4, lr}
 8008122:	4b0b      	ldr	r3, [pc, #44]	@ (8008150 <global_stdio_init.part.0+0x30>)
 8008124:	4c0b      	ldr	r4, [pc, #44]	@ (8008154 <global_stdio_init.part.0+0x34>)
 8008126:	4a0c      	ldr	r2, [pc, #48]	@ (8008158 <global_stdio_init.part.0+0x38>)
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	4620      	mov	r0, r4
 800812c:	2200      	movs	r2, #0
 800812e:	2104      	movs	r1, #4
 8008130:	f7ff ff94 	bl	800805c <std>
 8008134:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008138:	2201      	movs	r2, #1
 800813a:	2109      	movs	r1, #9
 800813c:	f7ff ff8e 	bl	800805c <std>
 8008140:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008144:	2202      	movs	r2, #2
 8008146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800814a:	2112      	movs	r1, #18
 800814c:	f7ff bf86 	b.w	800805c <std>
 8008150:	20002fc0 	.word	0x20002fc0
 8008154:	20002e88 	.word	0x20002e88
 8008158:	080080c9 	.word	0x080080c9

0800815c <__sfp_lock_acquire>:
 800815c:	4801      	ldr	r0, [pc, #4]	@ (8008164 <__sfp_lock_acquire+0x8>)
 800815e:	f000 b888 	b.w	8008272 <__retarget_lock_acquire_recursive>
 8008162:	bf00      	nop
 8008164:	20002fc5 	.word	0x20002fc5

08008168 <__sfp_lock_release>:
 8008168:	4801      	ldr	r0, [pc, #4]	@ (8008170 <__sfp_lock_release+0x8>)
 800816a:	f000 b883 	b.w	8008274 <__retarget_lock_release_recursive>
 800816e:	bf00      	nop
 8008170:	20002fc5 	.word	0x20002fc5

08008174 <__sinit>:
 8008174:	b510      	push	{r4, lr}
 8008176:	4604      	mov	r4, r0
 8008178:	f7ff fff0 	bl	800815c <__sfp_lock_acquire>
 800817c:	6a23      	ldr	r3, [r4, #32]
 800817e:	b11b      	cbz	r3, 8008188 <__sinit+0x14>
 8008180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008184:	f7ff bff0 	b.w	8008168 <__sfp_lock_release>
 8008188:	4b04      	ldr	r3, [pc, #16]	@ (800819c <__sinit+0x28>)
 800818a:	6223      	str	r3, [r4, #32]
 800818c:	4b04      	ldr	r3, [pc, #16]	@ (80081a0 <__sinit+0x2c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1f5      	bne.n	8008180 <__sinit+0xc>
 8008194:	f7ff ffc4 	bl	8008120 <global_stdio_init.part.0>
 8008198:	e7f2      	b.n	8008180 <__sinit+0xc>
 800819a:	bf00      	nop
 800819c:	080080e1 	.word	0x080080e1
 80081a0:	20002fc0 	.word	0x20002fc0

080081a4 <_fwalk_sglue>:
 80081a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a8:	4607      	mov	r7, r0
 80081aa:	4688      	mov	r8, r1
 80081ac:	4614      	mov	r4, r2
 80081ae:	2600      	movs	r6, #0
 80081b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081b4:	f1b9 0901 	subs.w	r9, r9, #1
 80081b8:	d505      	bpl.n	80081c6 <_fwalk_sglue+0x22>
 80081ba:	6824      	ldr	r4, [r4, #0]
 80081bc:	2c00      	cmp	r4, #0
 80081be:	d1f7      	bne.n	80081b0 <_fwalk_sglue+0xc>
 80081c0:	4630      	mov	r0, r6
 80081c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081c6:	89ab      	ldrh	r3, [r5, #12]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d907      	bls.n	80081dc <_fwalk_sglue+0x38>
 80081cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081d0:	3301      	adds	r3, #1
 80081d2:	d003      	beq.n	80081dc <_fwalk_sglue+0x38>
 80081d4:	4629      	mov	r1, r5
 80081d6:	4638      	mov	r0, r7
 80081d8:	47c0      	blx	r8
 80081da:	4306      	orrs	r6, r0
 80081dc:	3568      	adds	r5, #104	@ 0x68
 80081de:	e7e9      	b.n	80081b4 <_fwalk_sglue+0x10>

080081e0 <iprintf>:
 80081e0:	b40f      	push	{r0, r1, r2, r3}
 80081e2:	b507      	push	{r0, r1, r2, lr}
 80081e4:	4906      	ldr	r1, [pc, #24]	@ (8008200 <iprintf+0x20>)
 80081e6:	ab04      	add	r3, sp, #16
 80081e8:	6808      	ldr	r0, [r1, #0]
 80081ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ee:	6881      	ldr	r1, [r0, #8]
 80081f0:	9301      	str	r3, [sp, #4]
 80081f2:	f000 feb7 	bl	8008f64 <_vfiprintf_r>
 80081f6:	b003      	add	sp, #12
 80081f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081fc:	b004      	add	sp, #16
 80081fe:	4770      	bx	lr
 8008200:	2000001c 	.word	0x2000001c

08008204 <memset>:
 8008204:	4402      	add	r2, r0
 8008206:	4603      	mov	r3, r0
 8008208:	4293      	cmp	r3, r2
 800820a:	d100      	bne.n	800820e <memset+0xa>
 800820c:	4770      	bx	lr
 800820e:	f803 1b01 	strb.w	r1, [r3], #1
 8008212:	e7f9      	b.n	8008208 <memset+0x4>

08008214 <_localeconv_r>:
 8008214:	4800      	ldr	r0, [pc, #0]	@ (8008218 <_localeconv_r+0x4>)
 8008216:	4770      	bx	lr
 8008218:	2000015c 	.word	0x2000015c

0800821c <__errno>:
 800821c:	4b01      	ldr	r3, [pc, #4]	@ (8008224 <__errno+0x8>)
 800821e:	6818      	ldr	r0, [r3, #0]
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	2000001c 	.word	0x2000001c

08008228 <__libc_init_array>:
 8008228:	b570      	push	{r4, r5, r6, lr}
 800822a:	4d0d      	ldr	r5, [pc, #52]	@ (8008260 <__libc_init_array+0x38>)
 800822c:	4c0d      	ldr	r4, [pc, #52]	@ (8008264 <__libc_init_array+0x3c>)
 800822e:	1b64      	subs	r4, r4, r5
 8008230:	10a4      	asrs	r4, r4, #2
 8008232:	2600      	movs	r6, #0
 8008234:	42a6      	cmp	r6, r4
 8008236:	d109      	bne.n	800824c <__libc_init_array+0x24>
 8008238:	4d0b      	ldr	r5, [pc, #44]	@ (8008268 <__libc_init_array+0x40>)
 800823a:	4c0c      	ldr	r4, [pc, #48]	@ (800826c <__libc_init_array+0x44>)
 800823c:	f002 fece 	bl	800afdc <_init>
 8008240:	1b64      	subs	r4, r4, r5
 8008242:	10a4      	asrs	r4, r4, #2
 8008244:	2600      	movs	r6, #0
 8008246:	42a6      	cmp	r6, r4
 8008248:	d105      	bne.n	8008256 <__libc_init_array+0x2e>
 800824a:	bd70      	pop	{r4, r5, r6, pc}
 800824c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008250:	4798      	blx	r3
 8008252:	3601      	adds	r6, #1
 8008254:	e7ee      	b.n	8008234 <__libc_init_array+0xc>
 8008256:	f855 3b04 	ldr.w	r3, [r5], #4
 800825a:	4798      	blx	r3
 800825c:	3601      	adds	r6, #1
 800825e:	e7f2      	b.n	8008246 <__libc_init_array+0x1e>
 8008260:	0800b430 	.word	0x0800b430
 8008264:	0800b430 	.word	0x0800b430
 8008268:	0800b430 	.word	0x0800b430
 800826c:	0800b434 	.word	0x0800b434

08008270 <__retarget_lock_init_recursive>:
 8008270:	4770      	bx	lr

08008272 <__retarget_lock_acquire_recursive>:
 8008272:	4770      	bx	lr

08008274 <__retarget_lock_release_recursive>:
 8008274:	4770      	bx	lr

08008276 <quorem>:
 8008276:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827a:	6903      	ldr	r3, [r0, #16]
 800827c:	690c      	ldr	r4, [r1, #16]
 800827e:	42a3      	cmp	r3, r4
 8008280:	4607      	mov	r7, r0
 8008282:	db7e      	blt.n	8008382 <quorem+0x10c>
 8008284:	3c01      	subs	r4, #1
 8008286:	f101 0814 	add.w	r8, r1, #20
 800828a:	00a3      	lsls	r3, r4, #2
 800828c:	f100 0514 	add.w	r5, r0, #20
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008296:	9301      	str	r3, [sp, #4]
 8008298:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800829c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082a0:	3301      	adds	r3, #1
 80082a2:	429a      	cmp	r2, r3
 80082a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80082ac:	d32e      	bcc.n	800830c <quorem+0x96>
 80082ae:	f04f 0a00 	mov.w	sl, #0
 80082b2:	46c4      	mov	ip, r8
 80082b4:	46ae      	mov	lr, r5
 80082b6:	46d3      	mov	fp, sl
 80082b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80082bc:	b298      	uxth	r0, r3
 80082be:	fb06 a000 	mla	r0, r6, r0, sl
 80082c2:	0c02      	lsrs	r2, r0, #16
 80082c4:	0c1b      	lsrs	r3, r3, #16
 80082c6:	fb06 2303 	mla	r3, r6, r3, r2
 80082ca:	f8de 2000 	ldr.w	r2, [lr]
 80082ce:	b280      	uxth	r0, r0
 80082d0:	b292      	uxth	r2, r2
 80082d2:	1a12      	subs	r2, r2, r0
 80082d4:	445a      	add	r2, fp
 80082d6:	f8de 0000 	ldr.w	r0, [lr]
 80082da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082de:	b29b      	uxth	r3, r3
 80082e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80082e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80082e8:	b292      	uxth	r2, r2
 80082ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80082ee:	45e1      	cmp	r9, ip
 80082f0:	f84e 2b04 	str.w	r2, [lr], #4
 80082f4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80082f8:	d2de      	bcs.n	80082b8 <quorem+0x42>
 80082fa:	9b00      	ldr	r3, [sp, #0]
 80082fc:	58eb      	ldr	r3, [r5, r3]
 80082fe:	b92b      	cbnz	r3, 800830c <quorem+0x96>
 8008300:	9b01      	ldr	r3, [sp, #4]
 8008302:	3b04      	subs	r3, #4
 8008304:	429d      	cmp	r5, r3
 8008306:	461a      	mov	r2, r3
 8008308:	d32f      	bcc.n	800836a <quorem+0xf4>
 800830a:	613c      	str	r4, [r7, #16]
 800830c:	4638      	mov	r0, r7
 800830e:	f001 fb1d 	bl	800994c <__mcmp>
 8008312:	2800      	cmp	r0, #0
 8008314:	db25      	blt.n	8008362 <quorem+0xec>
 8008316:	4629      	mov	r1, r5
 8008318:	2000      	movs	r0, #0
 800831a:	f858 2b04 	ldr.w	r2, [r8], #4
 800831e:	f8d1 c000 	ldr.w	ip, [r1]
 8008322:	fa1f fe82 	uxth.w	lr, r2
 8008326:	fa1f f38c 	uxth.w	r3, ip
 800832a:	eba3 030e 	sub.w	r3, r3, lr
 800832e:	4403      	add	r3, r0
 8008330:	0c12      	lsrs	r2, r2, #16
 8008332:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008336:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800833a:	b29b      	uxth	r3, r3
 800833c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008340:	45c1      	cmp	r9, r8
 8008342:	f841 3b04 	str.w	r3, [r1], #4
 8008346:	ea4f 4022 	mov.w	r0, r2, asr #16
 800834a:	d2e6      	bcs.n	800831a <quorem+0xa4>
 800834c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008350:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008354:	b922      	cbnz	r2, 8008360 <quorem+0xea>
 8008356:	3b04      	subs	r3, #4
 8008358:	429d      	cmp	r5, r3
 800835a:	461a      	mov	r2, r3
 800835c:	d30b      	bcc.n	8008376 <quorem+0x100>
 800835e:	613c      	str	r4, [r7, #16]
 8008360:	3601      	adds	r6, #1
 8008362:	4630      	mov	r0, r6
 8008364:	b003      	add	sp, #12
 8008366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836a:	6812      	ldr	r2, [r2, #0]
 800836c:	3b04      	subs	r3, #4
 800836e:	2a00      	cmp	r2, #0
 8008370:	d1cb      	bne.n	800830a <quorem+0x94>
 8008372:	3c01      	subs	r4, #1
 8008374:	e7c6      	b.n	8008304 <quorem+0x8e>
 8008376:	6812      	ldr	r2, [r2, #0]
 8008378:	3b04      	subs	r3, #4
 800837a:	2a00      	cmp	r2, #0
 800837c:	d1ef      	bne.n	800835e <quorem+0xe8>
 800837e:	3c01      	subs	r4, #1
 8008380:	e7ea      	b.n	8008358 <quorem+0xe2>
 8008382:	2000      	movs	r0, #0
 8008384:	e7ee      	b.n	8008364 <quorem+0xee>
	...

08008388 <_dtoa_r>:
 8008388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	69c7      	ldr	r7, [r0, #28]
 800838e:	b099      	sub	sp, #100	@ 0x64
 8008390:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008394:	ec55 4b10 	vmov	r4, r5, d0
 8008398:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800839a:	9109      	str	r1, [sp, #36]	@ 0x24
 800839c:	4683      	mov	fp, r0
 800839e:	920e      	str	r2, [sp, #56]	@ 0x38
 80083a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083a2:	b97f      	cbnz	r7, 80083c4 <_dtoa_r+0x3c>
 80083a4:	2010      	movs	r0, #16
 80083a6:	f000 fef5 	bl	8009194 <malloc>
 80083aa:	4602      	mov	r2, r0
 80083ac:	f8cb 001c 	str.w	r0, [fp, #28]
 80083b0:	b920      	cbnz	r0, 80083bc <_dtoa_r+0x34>
 80083b2:	4ba7      	ldr	r3, [pc, #668]	@ (8008650 <_dtoa_r+0x2c8>)
 80083b4:	21ef      	movs	r1, #239	@ 0xef
 80083b6:	48a7      	ldr	r0, [pc, #668]	@ (8008654 <_dtoa_r+0x2cc>)
 80083b8:	f001 fd90 	bl	8009edc <__assert_func>
 80083bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80083c0:	6007      	str	r7, [r0, #0]
 80083c2:	60c7      	str	r7, [r0, #12]
 80083c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083c8:	6819      	ldr	r1, [r3, #0]
 80083ca:	b159      	cbz	r1, 80083e4 <_dtoa_r+0x5c>
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	604a      	str	r2, [r1, #4]
 80083d0:	2301      	movs	r3, #1
 80083d2:	4093      	lsls	r3, r2
 80083d4:	608b      	str	r3, [r1, #8]
 80083d6:	4658      	mov	r0, fp
 80083d8:	f001 f87e 	bl	80094d8 <_Bfree>
 80083dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083e0:	2200      	movs	r2, #0
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	1e2b      	subs	r3, r5, #0
 80083e6:	bfb9      	ittee	lt
 80083e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80083ec:	9303      	strlt	r3, [sp, #12]
 80083ee:	2300      	movge	r3, #0
 80083f0:	6033      	strge	r3, [r6, #0]
 80083f2:	9f03      	ldr	r7, [sp, #12]
 80083f4:	4b98      	ldr	r3, [pc, #608]	@ (8008658 <_dtoa_r+0x2d0>)
 80083f6:	bfbc      	itt	lt
 80083f8:	2201      	movlt	r2, #1
 80083fa:	6032      	strlt	r2, [r6, #0]
 80083fc:	43bb      	bics	r3, r7
 80083fe:	d112      	bne.n	8008426 <_dtoa_r+0x9e>
 8008400:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008402:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008406:	6013      	str	r3, [r2, #0]
 8008408:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800840c:	4323      	orrs	r3, r4
 800840e:	f000 854d 	beq.w	8008eac <_dtoa_r+0xb24>
 8008412:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008414:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800866c <_dtoa_r+0x2e4>
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 854f 	beq.w	8008ebc <_dtoa_r+0xb34>
 800841e:	f10a 0303 	add.w	r3, sl, #3
 8008422:	f000 bd49 	b.w	8008eb8 <_dtoa_r+0xb30>
 8008426:	ed9d 7b02 	vldr	d7, [sp, #8]
 800842a:	2200      	movs	r2, #0
 800842c:	ec51 0b17 	vmov	r0, r1, d7
 8008430:	2300      	movs	r3, #0
 8008432:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008436:	f7f8 fb47 	bl	8000ac8 <__aeabi_dcmpeq>
 800843a:	4680      	mov	r8, r0
 800843c:	b158      	cbz	r0, 8008456 <_dtoa_r+0xce>
 800843e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008440:	2301      	movs	r3, #1
 8008442:	6013      	str	r3, [r2, #0]
 8008444:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008446:	b113      	cbz	r3, 800844e <_dtoa_r+0xc6>
 8008448:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800844a:	4b84      	ldr	r3, [pc, #528]	@ (800865c <_dtoa_r+0x2d4>)
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008670 <_dtoa_r+0x2e8>
 8008452:	f000 bd33 	b.w	8008ebc <_dtoa_r+0xb34>
 8008456:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800845a:	aa16      	add	r2, sp, #88	@ 0x58
 800845c:	a917      	add	r1, sp, #92	@ 0x5c
 800845e:	4658      	mov	r0, fp
 8008460:	f001 fb24 	bl	8009aac <__d2b>
 8008464:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008468:	4681      	mov	r9, r0
 800846a:	2e00      	cmp	r6, #0
 800846c:	d077      	beq.n	800855e <_dtoa_r+0x1d6>
 800846e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008470:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800847c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008480:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008484:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008488:	4619      	mov	r1, r3
 800848a:	2200      	movs	r2, #0
 800848c:	4b74      	ldr	r3, [pc, #464]	@ (8008660 <_dtoa_r+0x2d8>)
 800848e:	f7f7 fefb 	bl	8000288 <__aeabi_dsub>
 8008492:	a369      	add	r3, pc, #420	@ (adr r3, 8008638 <_dtoa_r+0x2b0>)
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	f7f8 f8ae 	bl	80005f8 <__aeabi_dmul>
 800849c:	a368      	add	r3, pc, #416	@ (adr r3, 8008640 <_dtoa_r+0x2b8>)
 800849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a2:	f7f7 fef3 	bl	800028c <__adddf3>
 80084a6:	4604      	mov	r4, r0
 80084a8:	4630      	mov	r0, r6
 80084aa:	460d      	mov	r5, r1
 80084ac:	f7f8 f83a 	bl	8000524 <__aeabi_i2d>
 80084b0:	a365      	add	r3, pc, #404	@ (adr r3, 8008648 <_dtoa_r+0x2c0>)
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	f7f8 f89f 	bl	80005f8 <__aeabi_dmul>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4620      	mov	r0, r4
 80084c0:	4629      	mov	r1, r5
 80084c2:	f7f7 fee3 	bl	800028c <__adddf3>
 80084c6:	4604      	mov	r4, r0
 80084c8:	460d      	mov	r5, r1
 80084ca:	f7f8 fb45 	bl	8000b58 <__aeabi_d2iz>
 80084ce:	2200      	movs	r2, #0
 80084d0:	4607      	mov	r7, r0
 80084d2:	2300      	movs	r3, #0
 80084d4:	4620      	mov	r0, r4
 80084d6:	4629      	mov	r1, r5
 80084d8:	f7f8 fb00 	bl	8000adc <__aeabi_dcmplt>
 80084dc:	b140      	cbz	r0, 80084f0 <_dtoa_r+0x168>
 80084de:	4638      	mov	r0, r7
 80084e0:	f7f8 f820 	bl	8000524 <__aeabi_i2d>
 80084e4:	4622      	mov	r2, r4
 80084e6:	462b      	mov	r3, r5
 80084e8:	f7f8 faee 	bl	8000ac8 <__aeabi_dcmpeq>
 80084ec:	b900      	cbnz	r0, 80084f0 <_dtoa_r+0x168>
 80084ee:	3f01      	subs	r7, #1
 80084f0:	2f16      	cmp	r7, #22
 80084f2:	d851      	bhi.n	8008598 <_dtoa_r+0x210>
 80084f4:	4b5b      	ldr	r3, [pc, #364]	@ (8008664 <_dtoa_r+0x2dc>)
 80084f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008502:	f7f8 faeb 	bl	8000adc <__aeabi_dcmplt>
 8008506:	2800      	cmp	r0, #0
 8008508:	d048      	beq.n	800859c <_dtoa_r+0x214>
 800850a:	3f01      	subs	r7, #1
 800850c:	2300      	movs	r3, #0
 800850e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008510:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008512:	1b9b      	subs	r3, r3, r6
 8008514:	1e5a      	subs	r2, r3, #1
 8008516:	bf44      	itt	mi
 8008518:	f1c3 0801 	rsbmi	r8, r3, #1
 800851c:	2300      	movmi	r3, #0
 800851e:	9208      	str	r2, [sp, #32]
 8008520:	bf54      	ite	pl
 8008522:	f04f 0800 	movpl.w	r8, #0
 8008526:	9308      	strmi	r3, [sp, #32]
 8008528:	2f00      	cmp	r7, #0
 800852a:	db39      	blt.n	80085a0 <_dtoa_r+0x218>
 800852c:	9b08      	ldr	r3, [sp, #32]
 800852e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008530:	443b      	add	r3, r7
 8008532:	9308      	str	r3, [sp, #32]
 8008534:	2300      	movs	r3, #0
 8008536:	930a      	str	r3, [sp, #40]	@ 0x28
 8008538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800853a:	2b09      	cmp	r3, #9
 800853c:	d864      	bhi.n	8008608 <_dtoa_r+0x280>
 800853e:	2b05      	cmp	r3, #5
 8008540:	bfc4      	itt	gt
 8008542:	3b04      	subgt	r3, #4
 8008544:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008548:	f1a3 0302 	sub.w	r3, r3, #2
 800854c:	bfcc      	ite	gt
 800854e:	2400      	movgt	r4, #0
 8008550:	2401      	movle	r4, #1
 8008552:	2b03      	cmp	r3, #3
 8008554:	d863      	bhi.n	800861e <_dtoa_r+0x296>
 8008556:	e8df f003 	tbb	[pc, r3]
 800855a:	372a      	.short	0x372a
 800855c:	5535      	.short	0x5535
 800855e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008562:	441e      	add	r6, r3
 8008564:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008568:	2b20      	cmp	r3, #32
 800856a:	bfc1      	itttt	gt
 800856c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008570:	409f      	lslgt	r7, r3
 8008572:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008576:	fa24 f303 	lsrgt.w	r3, r4, r3
 800857a:	bfd6      	itet	le
 800857c:	f1c3 0320 	rsble	r3, r3, #32
 8008580:	ea47 0003 	orrgt.w	r0, r7, r3
 8008584:	fa04 f003 	lslle.w	r0, r4, r3
 8008588:	f7f7 ffbc 	bl	8000504 <__aeabi_ui2d>
 800858c:	2201      	movs	r2, #1
 800858e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008592:	3e01      	subs	r6, #1
 8008594:	9214      	str	r2, [sp, #80]	@ 0x50
 8008596:	e777      	b.n	8008488 <_dtoa_r+0x100>
 8008598:	2301      	movs	r3, #1
 800859a:	e7b8      	b.n	800850e <_dtoa_r+0x186>
 800859c:	9012      	str	r0, [sp, #72]	@ 0x48
 800859e:	e7b7      	b.n	8008510 <_dtoa_r+0x188>
 80085a0:	427b      	negs	r3, r7
 80085a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80085a4:	2300      	movs	r3, #0
 80085a6:	eba8 0807 	sub.w	r8, r8, r7
 80085aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80085ac:	e7c4      	b.n	8008538 <_dtoa_r+0x1b0>
 80085ae:	2300      	movs	r3, #0
 80085b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	dc35      	bgt.n	8008624 <_dtoa_r+0x29c>
 80085b8:	2301      	movs	r3, #1
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	9307      	str	r3, [sp, #28]
 80085be:	461a      	mov	r2, r3
 80085c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80085c2:	e00b      	b.n	80085dc <_dtoa_r+0x254>
 80085c4:	2301      	movs	r3, #1
 80085c6:	e7f3      	b.n	80085b0 <_dtoa_r+0x228>
 80085c8:	2300      	movs	r3, #0
 80085ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085ce:	18fb      	adds	r3, r7, r3
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	3301      	adds	r3, #1
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	9307      	str	r3, [sp, #28]
 80085d8:	bfb8      	it	lt
 80085da:	2301      	movlt	r3, #1
 80085dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80085e0:	2100      	movs	r1, #0
 80085e2:	2204      	movs	r2, #4
 80085e4:	f102 0514 	add.w	r5, r2, #20
 80085e8:	429d      	cmp	r5, r3
 80085ea:	d91f      	bls.n	800862c <_dtoa_r+0x2a4>
 80085ec:	6041      	str	r1, [r0, #4]
 80085ee:	4658      	mov	r0, fp
 80085f0:	f000 ff32 	bl	8009458 <_Balloc>
 80085f4:	4682      	mov	sl, r0
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d13c      	bne.n	8008674 <_dtoa_r+0x2ec>
 80085fa:	4b1b      	ldr	r3, [pc, #108]	@ (8008668 <_dtoa_r+0x2e0>)
 80085fc:	4602      	mov	r2, r0
 80085fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8008602:	e6d8      	b.n	80083b6 <_dtoa_r+0x2e>
 8008604:	2301      	movs	r3, #1
 8008606:	e7e0      	b.n	80085ca <_dtoa_r+0x242>
 8008608:	2401      	movs	r4, #1
 800860a:	2300      	movs	r3, #0
 800860c:	9309      	str	r3, [sp, #36]	@ 0x24
 800860e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008610:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	9307      	str	r3, [sp, #28]
 8008618:	2200      	movs	r2, #0
 800861a:	2312      	movs	r3, #18
 800861c:	e7d0      	b.n	80085c0 <_dtoa_r+0x238>
 800861e:	2301      	movs	r3, #1
 8008620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008622:	e7f5      	b.n	8008610 <_dtoa_r+0x288>
 8008624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	9307      	str	r3, [sp, #28]
 800862a:	e7d7      	b.n	80085dc <_dtoa_r+0x254>
 800862c:	3101      	adds	r1, #1
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	e7d8      	b.n	80085e4 <_dtoa_r+0x25c>
 8008632:	bf00      	nop
 8008634:	f3af 8000 	nop.w
 8008638:	636f4361 	.word	0x636f4361
 800863c:	3fd287a7 	.word	0x3fd287a7
 8008640:	8b60c8b3 	.word	0x8b60c8b3
 8008644:	3fc68a28 	.word	0x3fc68a28
 8008648:	509f79fb 	.word	0x509f79fb
 800864c:	3fd34413 	.word	0x3fd34413
 8008650:	0800b0c5 	.word	0x0800b0c5
 8008654:	0800b0dc 	.word	0x0800b0dc
 8008658:	7ff00000 	.word	0x7ff00000
 800865c:	0800b095 	.word	0x0800b095
 8008660:	3ff80000 	.word	0x3ff80000
 8008664:	0800b1e8 	.word	0x0800b1e8
 8008668:	0800b134 	.word	0x0800b134
 800866c:	0800b0c1 	.word	0x0800b0c1
 8008670:	0800b094 	.word	0x0800b094
 8008674:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008678:	6018      	str	r0, [r3, #0]
 800867a:	9b07      	ldr	r3, [sp, #28]
 800867c:	2b0e      	cmp	r3, #14
 800867e:	f200 80a4 	bhi.w	80087ca <_dtoa_r+0x442>
 8008682:	2c00      	cmp	r4, #0
 8008684:	f000 80a1 	beq.w	80087ca <_dtoa_r+0x442>
 8008688:	2f00      	cmp	r7, #0
 800868a:	dd33      	ble.n	80086f4 <_dtoa_r+0x36c>
 800868c:	4bad      	ldr	r3, [pc, #692]	@ (8008944 <_dtoa_r+0x5bc>)
 800868e:	f007 020f 	and.w	r2, r7, #15
 8008692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008696:	ed93 7b00 	vldr	d7, [r3]
 800869a:	05f8      	lsls	r0, r7, #23
 800869c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80086a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80086a4:	d516      	bpl.n	80086d4 <_dtoa_r+0x34c>
 80086a6:	4ba8      	ldr	r3, [pc, #672]	@ (8008948 <_dtoa_r+0x5c0>)
 80086a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086b0:	f7f8 f8cc 	bl	800084c <__aeabi_ddiv>
 80086b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086b8:	f004 040f 	and.w	r4, r4, #15
 80086bc:	2603      	movs	r6, #3
 80086be:	4da2      	ldr	r5, [pc, #648]	@ (8008948 <_dtoa_r+0x5c0>)
 80086c0:	b954      	cbnz	r4, 80086d8 <_dtoa_r+0x350>
 80086c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086ca:	f7f8 f8bf 	bl	800084c <__aeabi_ddiv>
 80086ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086d2:	e028      	b.n	8008726 <_dtoa_r+0x39e>
 80086d4:	2602      	movs	r6, #2
 80086d6:	e7f2      	b.n	80086be <_dtoa_r+0x336>
 80086d8:	07e1      	lsls	r1, r4, #31
 80086da:	d508      	bpl.n	80086ee <_dtoa_r+0x366>
 80086dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086e4:	f7f7 ff88 	bl	80005f8 <__aeabi_dmul>
 80086e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086ec:	3601      	adds	r6, #1
 80086ee:	1064      	asrs	r4, r4, #1
 80086f0:	3508      	adds	r5, #8
 80086f2:	e7e5      	b.n	80086c0 <_dtoa_r+0x338>
 80086f4:	f000 80d2 	beq.w	800889c <_dtoa_r+0x514>
 80086f8:	427c      	negs	r4, r7
 80086fa:	4b92      	ldr	r3, [pc, #584]	@ (8008944 <_dtoa_r+0x5bc>)
 80086fc:	4d92      	ldr	r5, [pc, #584]	@ (8008948 <_dtoa_r+0x5c0>)
 80086fe:	f004 020f 	and.w	r2, r4, #15
 8008702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800870e:	f7f7 ff73 	bl	80005f8 <__aeabi_dmul>
 8008712:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008716:	1124      	asrs	r4, r4, #4
 8008718:	2300      	movs	r3, #0
 800871a:	2602      	movs	r6, #2
 800871c:	2c00      	cmp	r4, #0
 800871e:	f040 80b2 	bne.w	8008886 <_dtoa_r+0x4fe>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1d3      	bne.n	80086ce <_dtoa_r+0x346>
 8008726:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008728:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 80b7 	beq.w	80088a0 <_dtoa_r+0x518>
 8008732:	4b86      	ldr	r3, [pc, #536]	@ (800894c <_dtoa_r+0x5c4>)
 8008734:	2200      	movs	r2, #0
 8008736:	4620      	mov	r0, r4
 8008738:	4629      	mov	r1, r5
 800873a:	f7f8 f9cf 	bl	8000adc <__aeabi_dcmplt>
 800873e:	2800      	cmp	r0, #0
 8008740:	f000 80ae 	beq.w	80088a0 <_dtoa_r+0x518>
 8008744:	9b07      	ldr	r3, [sp, #28]
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 80aa 	beq.w	80088a0 <_dtoa_r+0x518>
 800874c:	9b00      	ldr	r3, [sp, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	dd37      	ble.n	80087c2 <_dtoa_r+0x43a>
 8008752:	1e7b      	subs	r3, r7, #1
 8008754:	9304      	str	r3, [sp, #16]
 8008756:	4620      	mov	r0, r4
 8008758:	4b7d      	ldr	r3, [pc, #500]	@ (8008950 <_dtoa_r+0x5c8>)
 800875a:	2200      	movs	r2, #0
 800875c:	4629      	mov	r1, r5
 800875e:	f7f7 ff4b 	bl	80005f8 <__aeabi_dmul>
 8008762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008766:	9c00      	ldr	r4, [sp, #0]
 8008768:	3601      	adds	r6, #1
 800876a:	4630      	mov	r0, r6
 800876c:	f7f7 feda 	bl	8000524 <__aeabi_i2d>
 8008770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008774:	f7f7 ff40 	bl	80005f8 <__aeabi_dmul>
 8008778:	4b76      	ldr	r3, [pc, #472]	@ (8008954 <_dtoa_r+0x5cc>)
 800877a:	2200      	movs	r2, #0
 800877c:	f7f7 fd86 	bl	800028c <__adddf3>
 8008780:	4605      	mov	r5, r0
 8008782:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008786:	2c00      	cmp	r4, #0
 8008788:	f040 808d 	bne.w	80088a6 <_dtoa_r+0x51e>
 800878c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008790:	4b71      	ldr	r3, [pc, #452]	@ (8008958 <_dtoa_r+0x5d0>)
 8008792:	2200      	movs	r2, #0
 8008794:	f7f7 fd78 	bl	8000288 <__aeabi_dsub>
 8008798:	4602      	mov	r2, r0
 800879a:	460b      	mov	r3, r1
 800879c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087a0:	462a      	mov	r2, r5
 80087a2:	4633      	mov	r3, r6
 80087a4:	f7f8 f9b8 	bl	8000b18 <__aeabi_dcmpgt>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	f040 828b 	bne.w	8008cc4 <_dtoa_r+0x93c>
 80087ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087b2:	462a      	mov	r2, r5
 80087b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80087b8:	f7f8 f990 	bl	8000adc <__aeabi_dcmplt>
 80087bc:	2800      	cmp	r0, #0
 80087be:	f040 8128 	bne.w	8008a12 <_dtoa_r+0x68a>
 80087c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80087c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80087ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f2c0 815a 	blt.w	8008a86 <_dtoa_r+0x6fe>
 80087d2:	2f0e      	cmp	r7, #14
 80087d4:	f300 8157 	bgt.w	8008a86 <_dtoa_r+0x6fe>
 80087d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008944 <_dtoa_r+0x5bc>)
 80087da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80087de:	ed93 7b00 	vldr	d7, [r3]
 80087e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	ed8d 7b00 	vstr	d7, [sp]
 80087ea:	da03      	bge.n	80087f4 <_dtoa_r+0x46c>
 80087ec:	9b07      	ldr	r3, [sp, #28]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f340 8101 	ble.w	80089f6 <_dtoa_r+0x66e>
 80087f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80087f8:	4656      	mov	r6, sl
 80087fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087fe:	4620      	mov	r0, r4
 8008800:	4629      	mov	r1, r5
 8008802:	f7f8 f823 	bl	800084c <__aeabi_ddiv>
 8008806:	f7f8 f9a7 	bl	8000b58 <__aeabi_d2iz>
 800880a:	4680      	mov	r8, r0
 800880c:	f7f7 fe8a 	bl	8000524 <__aeabi_i2d>
 8008810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008814:	f7f7 fef0 	bl	80005f8 <__aeabi_dmul>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	4620      	mov	r0, r4
 800881e:	4629      	mov	r1, r5
 8008820:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008824:	f7f7 fd30 	bl	8000288 <__aeabi_dsub>
 8008828:	f806 4b01 	strb.w	r4, [r6], #1
 800882c:	9d07      	ldr	r5, [sp, #28]
 800882e:	eba6 040a 	sub.w	r4, r6, sl
 8008832:	42a5      	cmp	r5, r4
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	f040 8117 	bne.w	8008a6a <_dtoa_r+0x6e2>
 800883c:	f7f7 fd26 	bl	800028c <__adddf3>
 8008840:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008844:	4604      	mov	r4, r0
 8008846:	460d      	mov	r5, r1
 8008848:	f7f8 f966 	bl	8000b18 <__aeabi_dcmpgt>
 800884c:	2800      	cmp	r0, #0
 800884e:	f040 80f9 	bne.w	8008a44 <_dtoa_r+0x6bc>
 8008852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008856:	4620      	mov	r0, r4
 8008858:	4629      	mov	r1, r5
 800885a:	f7f8 f935 	bl	8000ac8 <__aeabi_dcmpeq>
 800885e:	b118      	cbz	r0, 8008868 <_dtoa_r+0x4e0>
 8008860:	f018 0f01 	tst.w	r8, #1
 8008864:	f040 80ee 	bne.w	8008a44 <_dtoa_r+0x6bc>
 8008868:	4649      	mov	r1, r9
 800886a:	4658      	mov	r0, fp
 800886c:	f000 fe34 	bl	80094d8 <_Bfree>
 8008870:	2300      	movs	r3, #0
 8008872:	7033      	strb	r3, [r6, #0]
 8008874:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008876:	3701      	adds	r7, #1
 8008878:	601f      	str	r7, [r3, #0]
 800887a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 831d 	beq.w	8008ebc <_dtoa_r+0xb34>
 8008882:	601e      	str	r6, [r3, #0]
 8008884:	e31a      	b.n	8008ebc <_dtoa_r+0xb34>
 8008886:	07e2      	lsls	r2, r4, #31
 8008888:	d505      	bpl.n	8008896 <_dtoa_r+0x50e>
 800888a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800888e:	f7f7 feb3 	bl	80005f8 <__aeabi_dmul>
 8008892:	3601      	adds	r6, #1
 8008894:	2301      	movs	r3, #1
 8008896:	1064      	asrs	r4, r4, #1
 8008898:	3508      	adds	r5, #8
 800889a:	e73f      	b.n	800871c <_dtoa_r+0x394>
 800889c:	2602      	movs	r6, #2
 800889e:	e742      	b.n	8008726 <_dtoa_r+0x39e>
 80088a0:	9c07      	ldr	r4, [sp, #28]
 80088a2:	9704      	str	r7, [sp, #16]
 80088a4:	e761      	b.n	800876a <_dtoa_r+0x3e2>
 80088a6:	4b27      	ldr	r3, [pc, #156]	@ (8008944 <_dtoa_r+0x5bc>)
 80088a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088b2:	4454      	add	r4, sl
 80088b4:	2900      	cmp	r1, #0
 80088b6:	d053      	beq.n	8008960 <_dtoa_r+0x5d8>
 80088b8:	4928      	ldr	r1, [pc, #160]	@ (800895c <_dtoa_r+0x5d4>)
 80088ba:	2000      	movs	r0, #0
 80088bc:	f7f7 ffc6 	bl	800084c <__aeabi_ddiv>
 80088c0:	4633      	mov	r3, r6
 80088c2:	462a      	mov	r2, r5
 80088c4:	f7f7 fce0 	bl	8000288 <__aeabi_dsub>
 80088c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80088cc:	4656      	mov	r6, sl
 80088ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088d2:	f7f8 f941 	bl	8000b58 <__aeabi_d2iz>
 80088d6:	4605      	mov	r5, r0
 80088d8:	f7f7 fe24 	bl	8000524 <__aeabi_i2d>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088e4:	f7f7 fcd0 	bl	8000288 <__aeabi_dsub>
 80088e8:	3530      	adds	r5, #48	@ 0x30
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088f2:	f806 5b01 	strb.w	r5, [r6], #1
 80088f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088fa:	f7f8 f8ef 	bl	8000adc <__aeabi_dcmplt>
 80088fe:	2800      	cmp	r0, #0
 8008900:	d171      	bne.n	80089e6 <_dtoa_r+0x65e>
 8008902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008906:	4911      	ldr	r1, [pc, #68]	@ (800894c <_dtoa_r+0x5c4>)
 8008908:	2000      	movs	r0, #0
 800890a:	f7f7 fcbd 	bl	8000288 <__aeabi_dsub>
 800890e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008912:	f7f8 f8e3 	bl	8000adc <__aeabi_dcmplt>
 8008916:	2800      	cmp	r0, #0
 8008918:	f040 8095 	bne.w	8008a46 <_dtoa_r+0x6be>
 800891c:	42a6      	cmp	r6, r4
 800891e:	f43f af50 	beq.w	80087c2 <_dtoa_r+0x43a>
 8008922:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008926:	4b0a      	ldr	r3, [pc, #40]	@ (8008950 <_dtoa_r+0x5c8>)
 8008928:	2200      	movs	r2, #0
 800892a:	f7f7 fe65 	bl	80005f8 <__aeabi_dmul>
 800892e:	4b08      	ldr	r3, [pc, #32]	@ (8008950 <_dtoa_r+0x5c8>)
 8008930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008934:	2200      	movs	r2, #0
 8008936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800893a:	f7f7 fe5d 	bl	80005f8 <__aeabi_dmul>
 800893e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008942:	e7c4      	b.n	80088ce <_dtoa_r+0x546>
 8008944:	0800b1e8 	.word	0x0800b1e8
 8008948:	0800b1c0 	.word	0x0800b1c0
 800894c:	3ff00000 	.word	0x3ff00000
 8008950:	40240000 	.word	0x40240000
 8008954:	401c0000 	.word	0x401c0000
 8008958:	40140000 	.word	0x40140000
 800895c:	3fe00000 	.word	0x3fe00000
 8008960:	4631      	mov	r1, r6
 8008962:	4628      	mov	r0, r5
 8008964:	f7f7 fe48 	bl	80005f8 <__aeabi_dmul>
 8008968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800896c:	9415      	str	r4, [sp, #84]	@ 0x54
 800896e:	4656      	mov	r6, sl
 8008970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008974:	f7f8 f8f0 	bl	8000b58 <__aeabi_d2iz>
 8008978:	4605      	mov	r5, r0
 800897a:	f7f7 fdd3 	bl	8000524 <__aeabi_i2d>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008986:	f7f7 fc7f 	bl	8000288 <__aeabi_dsub>
 800898a:	3530      	adds	r5, #48	@ 0x30
 800898c:	f806 5b01 	strb.w	r5, [r6], #1
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	42a6      	cmp	r6, r4
 8008996:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800899a:	f04f 0200 	mov.w	r2, #0
 800899e:	d124      	bne.n	80089ea <_dtoa_r+0x662>
 80089a0:	4bac      	ldr	r3, [pc, #688]	@ (8008c54 <_dtoa_r+0x8cc>)
 80089a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80089a6:	f7f7 fc71 	bl	800028c <__adddf3>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089b2:	f7f8 f8b1 	bl	8000b18 <__aeabi_dcmpgt>
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d145      	bne.n	8008a46 <_dtoa_r+0x6be>
 80089ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089be:	49a5      	ldr	r1, [pc, #660]	@ (8008c54 <_dtoa_r+0x8cc>)
 80089c0:	2000      	movs	r0, #0
 80089c2:	f7f7 fc61 	bl	8000288 <__aeabi_dsub>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089ce:	f7f8 f885 	bl	8000adc <__aeabi_dcmplt>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	f43f aef5 	beq.w	80087c2 <_dtoa_r+0x43a>
 80089d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80089da:	1e73      	subs	r3, r6, #1
 80089dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80089de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80089e2:	2b30      	cmp	r3, #48	@ 0x30
 80089e4:	d0f8      	beq.n	80089d8 <_dtoa_r+0x650>
 80089e6:	9f04      	ldr	r7, [sp, #16]
 80089e8:	e73e      	b.n	8008868 <_dtoa_r+0x4e0>
 80089ea:	4b9b      	ldr	r3, [pc, #620]	@ (8008c58 <_dtoa_r+0x8d0>)
 80089ec:	f7f7 fe04 	bl	80005f8 <__aeabi_dmul>
 80089f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089f4:	e7bc      	b.n	8008970 <_dtoa_r+0x5e8>
 80089f6:	d10c      	bne.n	8008a12 <_dtoa_r+0x68a>
 80089f8:	4b98      	ldr	r3, [pc, #608]	@ (8008c5c <_dtoa_r+0x8d4>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a00:	f7f7 fdfa 	bl	80005f8 <__aeabi_dmul>
 8008a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a08:	f7f8 f87c 	bl	8000b04 <__aeabi_dcmpge>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	f000 8157 	beq.w	8008cc0 <_dtoa_r+0x938>
 8008a12:	2400      	movs	r4, #0
 8008a14:	4625      	mov	r5, r4
 8008a16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a18:	43db      	mvns	r3, r3
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	4656      	mov	r6, sl
 8008a1e:	2700      	movs	r7, #0
 8008a20:	4621      	mov	r1, r4
 8008a22:	4658      	mov	r0, fp
 8008a24:	f000 fd58 	bl	80094d8 <_Bfree>
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	d0dc      	beq.n	80089e6 <_dtoa_r+0x65e>
 8008a2c:	b12f      	cbz	r7, 8008a3a <_dtoa_r+0x6b2>
 8008a2e:	42af      	cmp	r7, r5
 8008a30:	d003      	beq.n	8008a3a <_dtoa_r+0x6b2>
 8008a32:	4639      	mov	r1, r7
 8008a34:	4658      	mov	r0, fp
 8008a36:	f000 fd4f 	bl	80094d8 <_Bfree>
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	4658      	mov	r0, fp
 8008a3e:	f000 fd4b 	bl	80094d8 <_Bfree>
 8008a42:	e7d0      	b.n	80089e6 <_dtoa_r+0x65e>
 8008a44:	9704      	str	r7, [sp, #16]
 8008a46:	4633      	mov	r3, r6
 8008a48:	461e      	mov	r6, r3
 8008a4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a4e:	2a39      	cmp	r2, #57	@ 0x39
 8008a50:	d107      	bne.n	8008a62 <_dtoa_r+0x6da>
 8008a52:	459a      	cmp	sl, r3
 8008a54:	d1f8      	bne.n	8008a48 <_dtoa_r+0x6c0>
 8008a56:	9a04      	ldr	r2, [sp, #16]
 8008a58:	3201      	adds	r2, #1
 8008a5a:	9204      	str	r2, [sp, #16]
 8008a5c:	2230      	movs	r2, #48	@ 0x30
 8008a5e:	f88a 2000 	strb.w	r2, [sl]
 8008a62:	781a      	ldrb	r2, [r3, #0]
 8008a64:	3201      	adds	r2, #1
 8008a66:	701a      	strb	r2, [r3, #0]
 8008a68:	e7bd      	b.n	80089e6 <_dtoa_r+0x65e>
 8008a6a:	4b7b      	ldr	r3, [pc, #492]	@ (8008c58 <_dtoa_r+0x8d0>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f7f7 fdc3 	bl	80005f8 <__aeabi_dmul>
 8008a72:	2200      	movs	r2, #0
 8008a74:	2300      	movs	r3, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	460d      	mov	r5, r1
 8008a7a:	f7f8 f825 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f43f aebb 	beq.w	80087fa <_dtoa_r+0x472>
 8008a84:	e6f0      	b.n	8008868 <_dtoa_r+0x4e0>
 8008a86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a88:	2a00      	cmp	r2, #0
 8008a8a:	f000 80db 	beq.w	8008c44 <_dtoa_r+0x8bc>
 8008a8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a90:	2a01      	cmp	r2, #1
 8008a92:	f300 80bf 	bgt.w	8008c14 <_dtoa_r+0x88c>
 8008a96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008a98:	2a00      	cmp	r2, #0
 8008a9a:	f000 80b7 	beq.w	8008c0c <_dtoa_r+0x884>
 8008a9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008aa2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008aa4:	4646      	mov	r6, r8
 8008aa6:	9a08      	ldr	r2, [sp, #32]
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	441a      	add	r2, r3
 8008aac:	4658      	mov	r0, fp
 8008aae:	4498      	add	r8, r3
 8008ab0:	9208      	str	r2, [sp, #32]
 8008ab2:	f000 fdc5 	bl	8009640 <__i2b>
 8008ab6:	4605      	mov	r5, r0
 8008ab8:	b15e      	cbz	r6, 8008ad2 <_dtoa_r+0x74a>
 8008aba:	9b08      	ldr	r3, [sp, #32]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	dd08      	ble.n	8008ad2 <_dtoa_r+0x74a>
 8008ac0:	42b3      	cmp	r3, r6
 8008ac2:	9a08      	ldr	r2, [sp, #32]
 8008ac4:	bfa8      	it	ge
 8008ac6:	4633      	movge	r3, r6
 8008ac8:	eba8 0803 	sub.w	r8, r8, r3
 8008acc:	1af6      	subs	r6, r6, r3
 8008ace:	1ad3      	subs	r3, r2, r3
 8008ad0:	9308      	str	r3, [sp, #32]
 8008ad2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ad4:	b1f3      	cbz	r3, 8008b14 <_dtoa_r+0x78c>
 8008ad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 80b7 	beq.w	8008c4c <_dtoa_r+0x8c4>
 8008ade:	b18c      	cbz	r4, 8008b04 <_dtoa_r+0x77c>
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	4658      	mov	r0, fp
 8008ae6:	f000 fe6b 	bl	80097c0 <__pow5mult>
 8008aea:	464a      	mov	r2, r9
 8008aec:	4601      	mov	r1, r0
 8008aee:	4605      	mov	r5, r0
 8008af0:	4658      	mov	r0, fp
 8008af2:	f000 fdbb 	bl	800966c <__multiply>
 8008af6:	4649      	mov	r1, r9
 8008af8:	9004      	str	r0, [sp, #16]
 8008afa:	4658      	mov	r0, fp
 8008afc:	f000 fcec 	bl	80094d8 <_Bfree>
 8008b00:	9b04      	ldr	r3, [sp, #16]
 8008b02:	4699      	mov	r9, r3
 8008b04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b06:	1b1a      	subs	r2, r3, r4
 8008b08:	d004      	beq.n	8008b14 <_dtoa_r+0x78c>
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	4658      	mov	r0, fp
 8008b0e:	f000 fe57 	bl	80097c0 <__pow5mult>
 8008b12:	4681      	mov	r9, r0
 8008b14:	2101      	movs	r1, #1
 8008b16:	4658      	mov	r0, fp
 8008b18:	f000 fd92 	bl	8009640 <__i2b>
 8008b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b1e:	4604      	mov	r4, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 81cf 	beq.w	8008ec4 <_dtoa_r+0xb3c>
 8008b26:	461a      	mov	r2, r3
 8008b28:	4601      	mov	r1, r0
 8008b2a:	4658      	mov	r0, fp
 8008b2c:	f000 fe48 	bl	80097c0 <__pow5mult>
 8008b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	4604      	mov	r4, r0
 8008b36:	f300 8095 	bgt.w	8008c64 <_dtoa_r+0x8dc>
 8008b3a:	9b02      	ldr	r3, [sp, #8]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f040 8087 	bne.w	8008c50 <_dtoa_r+0x8c8>
 8008b42:	9b03      	ldr	r3, [sp, #12]
 8008b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f040 8089 	bne.w	8008c60 <_dtoa_r+0x8d8>
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b54:	0d1b      	lsrs	r3, r3, #20
 8008b56:	051b      	lsls	r3, r3, #20
 8008b58:	b12b      	cbz	r3, 8008b66 <_dtoa_r+0x7de>
 8008b5a:	9b08      	ldr	r3, [sp, #32]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	9308      	str	r3, [sp, #32]
 8008b60:	f108 0801 	add.w	r8, r8, #1
 8008b64:	2301      	movs	r3, #1
 8008b66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 81b0 	beq.w	8008ed0 <_dtoa_r+0xb48>
 8008b70:	6923      	ldr	r3, [r4, #16]
 8008b72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b76:	6918      	ldr	r0, [r3, #16]
 8008b78:	f000 fd16 	bl	80095a8 <__hi0bits>
 8008b7c:	f1c0 0020 	rsb	r0, r0, #32
 8008b80:	9b08      	ldr	r3, [sp, #32]
 8008b82:	4418      	add	r0, r3
 8008b84:	f010 001f 	ands.w	r0, r0, #31
 8008b88:	d077      	beq.n	8008c7a <_dtoa_r+0x8f2>
 8008b8a:	f1c0 0320 	rsb	r3, r0, #32
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	dd6b      	ble.n	8008c6a <_dtoa_r+0x8e2>
 8008b92:	9b08      	ldr	r3, [sp, #32]
 8008b94:	f1c0 001c 	rsb	r0, r0, #28
 8008b98:	4403      	add	r3, r0
 8008b9a:	4480      	add	r8, r0
 8008b9c:	4406      	add	r6, r0
 8008b9e:	9308      	str	r3, [sp, #32]
 8008ba0:	f1b8 0f00 	cmp.w	r8, #0
 8008ba4:	dd05      	ble.n	8008bb2 <_dtoa_r+0x82a>
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	4642      	mov	r2, r8
 8008baa:	4658      	mov	r0, fp
 8008bac:	f000 fe62 	bl	8009874 <__lshift>
 8008bb0:	4681      	mov	r9, r0
 8008bb2:	9b08      	ldr	r3, [sp, #32]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	dd05      	ble.n	8008bc4 <_dtoa_r+0x83c>
 8008bb8:	4621      	mov	r1, r4
 8008bba:	461a      	mov	r2, r3
 8008bbc:	4658      	mov	r0, fp
 8008bbe:	f000 fe59 	bl	8009874 <__lshift>
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d059      	beq.n	8008c7e <_dtoa_r+0x8f6>
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4648      	mov	r0, r9
 8008bce:	f000 febd 	bl	800994c <__mcmp>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	da53      	bge.n	8008c7e <_dtoa_r+0x8f6>
 8008bd6:	1e7b      	subs	r3, r7, #1
 8008bd8:	9304      	str	r3, [sp, #16]
 8008bda:	4649      	mov	r1, r9
 8008bdc:	2300      	movs	r3, #0
 8008bde:	220a      	movs	r2, #10
 8008be0:	4658      	mov	r0, fp
 8008be2:	f000 fc9b 	bl	800951c <__multadd>
 8008be6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008be8:	4681      	mov	r9, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 8172 	beq.w	8008ed4 <_dtoa_r+0xb4c>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	220a      	movs	r2, #10
 8008bf6:	4658      	mov	r0, fp
 8008bf8:	f000 fc90 	bl	800951c <__multadd>
 8008bfc:	9b00      	ldr	r3, [sp, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	4605      	mov	r5, r0
 8008c02:	dc67      	bgt.n	8008cd4 <_dtoa_r+0x94c>
 8008c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	dc41      	bgt.n	8008c8e <_dtoa_r+0x906>
 8008c0a:	e063      	b.n	8008cd4 <_dtoa_r+0x94c>
 8008c0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008c0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008c12:	e746      	b.n	8008aa2 <_dtoa_r+0x71a>
 8008c14:	9b07      	ldr	r3, [sp, #28]
 8008c16:	1e5c      	subs	r4, r3, #1
 8008c18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c1a:	42a3      	cmp	r3, r4
 8008c1c:	bfbf      	itttt	lt
 8008c1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008c20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008c22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008c24:	1ae3      	sublt	r3, r4, r3
 8008c26:	bfb4      	ite	lt
 8008c28:	18d2      	addlt	r2, r2, r3
 8008c2a:	1b1c      	subge	r4, r3, r4
 8008c2c:	9b07      	ldr	r3, [sp, #28]
 8008c2e:	bfbc      	itt	lt
 8008c30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008c32:	2400      	movlt	r4, #0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	bfb5      	itete	lt
 8008c38:	eba8 0603 	sublt.w	r6, r8, r3
 8008c3c:	9b07      	ldrge	r3, [sp, #28]
 8008c3e:	2300      	movlt	r3, #0
 8008c40:	4646      	movge	r6, r8
 8008c42:	e730      	b.n	8008aa6 <_dtoa_r+0x71e>
 8008c44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008c48:	4646      	mov	r6, r8
 8008c4a:	e735      	b.n	8008ab8 <_dtoa_r+0x730>
 8008c4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c4e:	e75c      	b.n	8008b0a <_dtoa_r+0x782>
 8008c50:	2300      	movs	r3, #0
 8008c52:	e788      	b.n	8008b66 <_dtoa_r+0x7de>
 8008c54:	3fe00000 	.word	0x3fe00000
 8008c58:	40240000 	.word	0x40240000
 8008c5c:	40140000 	.word	0x40140000
 8008c60:	9b02      	ldr	r3, [sp, #8]
 8008c62:	e780      	b.n	8008b66 <_dtoa_r+0x7de>
 8008c64:	2300      	movs	r3, #0
 8008c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c68:	e782      	b.n	8008b70 <_dtoa_r+0x7e8>
 8008c6a:	d099      	beq.n	8008ba0 <_dtoa_r+0x818>
 8008c6c:	9a08      	ldr	r2, [sp, #32]
 8008c6e:	331c      	adds	r3, #28
 8008c70:	441a      	add	r2, r3
 8008c72:	4498      	add	r8, r3
 8008c74:	441e      	add	r6, r3
 8008c76:	9208      	str	r2, [sp, #32]
 8008c78:	e792      	b.n	8008ba0 <_dtoa_r+0x818>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	e7f6      	b.n	8008c6c <_dtoa_r+0x8e4>
 8008c7e:	9b07      	ldr	r3, [sp, #28]
 8008c80:	9704      	str	r7, [sp, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	dc20      	bgt.n	8008cc8 <_dtoa_r+0x940>
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	dd1e      	ble.n	8008ccc <_dtoa_r+0x944>
 8008c8e:	9b00      	ldr	r3, [sp, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f47f aec0 	bne.w	8008a16 <_dtoa_r+0x68e>
 8008c96:	4621      	mov	r1, r4
 8008c98:	2205      	movs	r2, #5
 8008c9a:	4658      	mov	r0, fp
 8008c9c:	f000 fc3e 	bl	800951c <__multadd>
 8008ca0:	4601      	mov	r1, r0
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	4648      	mov	r0, r9
 8008ca6:	f000 fe51 	bl	800994c <__mcmp>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	f77f aeb3 	ble.w	8008a16 <_dtoa_r+0x68e>
 8008cb0:	4656      	mov	r6, sl
 8008cb2:	2331      	movs	r3, #49	@ 0x31
 8008cb4:	f806 3b01 	strb.w	r3, [r6], #1
 8008cb8:	9b04      	ldr	r3, [sp, #16]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	9304      	str	r3, [sp, #16]
 8008cbe:	e6ae      	b.n	8008a1e <_dtoa_r+0x696>
 8008cc0:	9c07      	ldr	r4, [sp, #28]
 8008cc2:	9704      	str	r7, [sp, #16]
 8008cc4:	4625      	mov	r5, r4
 8008cc6:	e7f3      	b.n	8008cb0 <_dtoa_r+0x928>
 8008cc8:	9b07      	ldr	r3, [sp, #28]
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 8104 	beq.w	8008edc <_dtoa_r+0xb54>
 8008cd4:	2e00      	cmp	r6, #0
 8008cd6:	dd05      	ble.n	8008ce4 <_dtoa_r+0x95c>
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4632      	mov	r2, r6
 8008cdc:	4658      	mov	r0, fp
 8008cde:	f000 fdc9 	bl	8009874 <__lshift>
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d05a      	beq.n	8008da0 <_dtoa_r+0xa18>
 8008cea:	6869      	ldr	r1, [r5, #4]
 8008cec:	4658      	mov	r0, fp
 8008cee:	f000 fbb3 	bl	8009458 <_Balloc>
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	b928      	cbnz	r0, 8008d02 <_dtoa_r+0x97a>
 8008cf6:	4b84      	ldr	r3, [pc, #528]	@ (8008f08 <_dtoa_r+0xb80>)
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008cfe:	f7ff bb5a 	b.w	80083b6 <_dtoa_r+0x2e>
 8008d02:	692a      	ldr	r2, [r5, #16]
 8008d04:	3202      	adds	r2, #2
 8008d06:	0092      	lsls	r2, r2, #2
 8008d08:	f105 010c 	add.w	r1, r5, #12
 8008d0c:	300c      	adds	r0, #12
 8008d0e:	f001 f8d7 	bl	8009ec0 <memcpy>
 8008d12:	2201      	movs	r2, #1
 8008d14:	4631      	mov	r1, r6
 8008d16:	4658      	mov	r0, fp
 8008d18:	f000 fdac 	bl	8009874 <__lshift>
 8008d1c:	f10a 0301 	add.w	r3, sl, #1
 8008d20:	9307      	str	r3, [sp, #28]
 8008d22:	9b00      	ldr	r3, [sp, #0]
 8008d24:	4453      	add	r3, sl
 8008d26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d28:	9b02      	ldr	r3, [sp, #8]
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	462f      	mov	r7, r5
 8008d30:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d32:	4605      	mov	r5, r0
 8008d34:	9b07      	ldr	r3, [sp, #28]
 8008d36:	4621      	mov	r1, r4
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	4648      	mov	r0, r9
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	f7ff fa9a 	bl	8008276 <quorem>
 8008d42:	4639      	mov	r1, r7
 8008d44:	9002      	str	r0, [sp, #8]
 8008d46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d4a:	4648      	mov	r0, r9
 8008d4c:	f000 fdfe 	bl	800994c <__mcmp>
 8008d50:	462a      	mov	r2, r5
 8008d52:	9008      	str	r0, [sp, #32]
 8008d54:	4621      	mov	r1, r4
 8008d56:	4658      	mov	r0, fp
 8008d58:	f000 fe14 	bl	8009984 <__mdiff>
 8008d5c:	68c2      	ldr	r2, [r0, #12]
 8008d5e:	4606      	mov	r6, r0
 8008d60:	bb02      	cbnz	r2, 8008da4 <_dtoa_r+0xa1c>
 8008d62:	4601      	mov	r1, r0
 8008d64:	4648      	mov	r0, r9
 8008d66:	f000 fdf1 	bl	800994c <__mcmp>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4658      	mov	r0, fp
 8008d70:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d72:	f000 fbb1 	bl	80094d8 <_Bfree>
 8008d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d7a:	9e07      	ldr	r6, [sp, #28]
 8008d7c:	ea43 0102 	orr.w	r1, r3, r2
 8008d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d82:	4319      	orrs	r1, r3
 8008d84:	d110      	bne.n	8008da8 <_dtoa_r+0xa20>
 8008d86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d8a:	d029      	beq.n	8008de0 <_dtoa_r+0xa58>
 8008d8c:	9b08      	ldr	r3, [sp, #32]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	dd02      	ble.n	8008d98 <_dtoa_r+0xa10>
 8008d92:	9b02      	ldr	r3, [sp, #8]
 8008d94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008d98:	9b00      	ldr	r3, [sp, #0]
 8008d9a:	f883 8000 	strb.w	r8, [r3]
 8008d9e:	e63f      	b.n	8008a20 <_dtoa_r+0x698>
 8008da0:	4628      	mov	r0, r5
 8008da2:	e7bb      	b.n	8008d1c <_dtoa_r+0x994>
 8008da4:	2201      	movs	r2, #1
 8008da6:	e7e1      	b.n	8008d6c <_dtoa_r+0x9e4>
 8008da8:	9b08      	ldr	r3, [sp, #32]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	db04      	blt.n	8008db8 <_dtoa_r+0xa30>
 8008dae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008db0:	430b      	orrs	r3, r1
 8008db2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008db4:	430b      	orrs	r3, r1
 8008db6:	d120      	bne.n	8008dfa <_dtoa_r+0xa72>
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	dded      	ble.n	8008d98 <_dtoa_r+0xa10>
 8008dbc:	4649      	mov	r1, r9
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	4658      	mov	r0, fp
 8008dc2:	f000 fd57 	bl	8009874 <__lshift>
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	4681      	mov	r9, r0
 8008dca:	f000 fdbf 	bl	800994c <__mcmp>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	dc03      	bgt.n	8008dda <_dtoa_r+0xa52>
 8008dd2:	d1e1      	bne.n	8008d98 <_dtoa_r+0xa10>
 8008dd4:	f018 0f01 	tst.w	r8, #1
 8008dd8:	d0de      	beq.n	8008d98 <_dtoa_r+0xa10>
 8008dda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008dde:	d1d8      	bne.n	8008d92 <_dtoa_r+0xa0a>
 8008de0:	9a00      	ldr	r2, [sp, #0]
 8008de2:	2339      	movs	r3, #57	@ 0x39
 8008de4:	7013      	strb	r3, [r2, #0]
 8008de6:	4633      	mov	r3, r6
 8008de8:	461e      	mov	r6, r3
 8008dea:	3b01      	subs	r3, #1
 8008dec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008df0:	2a39      	cmp	r2, #57	@ 0x39
 8008df2:	d052      	beq.n	8008e9a <_dtoa_r+0xb12>
 8008df4:	3201      	adds	r2, #1
 8008df6:	701a      	strb	r2, [r3, #0]
 8008df8:	e612      	b.n	8008a20 <_dtoa_r+0x698>
 8008dfa:	2a00      	cmp	r2, #0
 8008dfc:	dd07      	ble.n	8008e0e <_dtoa_r+0xa86>
 8008dfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e02:	d0ed      	beq.n	8008de0 <_dtoa_r+0xa58>
 8008e04:	9a00      	ldr	r2, [sp, #0]
 8008e06:	f108 0301 	add.w	r3, r8, #1
 8008e0a:	7013      	strb	r3, [r2, #0]
 8008e0c:	e608      	b.n	8008a20 <_dtoa_r+0x698>
 8008e0e:	9b07      	ldr	r3, [sp, #28]
 8008e10:	9a07      	ldr	r2, [sp, #28]
 8008e12:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008e16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d028      	beq.n	8008e6e <_dtoa_r+0xae6>
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	2300      	movs	r3, #0
 8008e20:	220a      	movs	r2, #10
 8008e22:	4658      	mov	r0, fp
 8008e24:	f000 fb7a 	bl	800951c <__multadd>
 8008e28:	42af      	cmp	r7, r5
 8008e2a:	4681      	mov	r9, r0
 8008e2c:	f04f 0300 	mov.w	r3, #0
 8008e30:	f04f 020a 	mov.w	r2, #10
 8008e34:	4639      	mov	r1, r7
 8008e36:	4658      	mov	r0, fp
 8008e38:	d107      	bne.n	8008e4a <_dtoa_r+0xac2>
 8008e3a:	f000 fb6f 	bl	800951c <__multadd>
 8008e3e:	4607      	mov	r7, r0
 8008e40:	4605      	mov	r5, r0
 8008e42:	9b07      	ldr	r3, [sp, #28]
 8008e44:	3301      	adds	r3, #1
 8008e46:	9307      	str	r3, [sp, #28]
 8008e48:	e774      	b.n	8008d34 <_dtoa_r+0x9ac>
 8008e4a:	f000 fb67 	bl	800951c <__multadd>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4607      	mov	r7, r0
 8008e52:	2300      	movs	r3, #0
 8008e54:	220a      	movs	r2, #10
 8008e56:	4658      	mov	r0, fp
 8008e58:	f000 fb60 	bl	800951c <__multadd>
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	e7f0      	b.n	8008e42 <_dtoa_r+0xaba>
 8008e60:	9b00      	ldr	r3, [sp, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	bfcc      	ite	gt
 8008e66:	461e      	movgt	r6, r3
 8008e68:	2601      	movle	r6, #1
 8008e6a:	4456      	add	r6, sl
 8008e6c:	2700      	movs	r7, #0
 8008e6e:	4649      	mov	r1, r9
 8008e70:	2201      	movs	r2, #1
 8008e72:	4658      	mov	r0, fp
 8008e74:	f000 fcfe 	bl	8009874 <__lshift>
 8008e78:	4621      	mov	r1, r4
 8008e7a:	4681      	mov	r9, r0
 8008e7c:	f000 fd66 	bl	800994c <__mcmp>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	dcb0      	bgt.n	8008de6 <_dtoa_r+0xa5e>
 8008e84:	d102      	bne.n	8008e8c <_dtoa_r+0xb04>
 8008e86:	f018 0f01 	tst.w	r8, #1
 8008e8a:	d1ac      	bne.n	8008de6 <_dtoa_r+0xa5e>
 8008e8c:	4633      	mov	r3, r6
 8008e8e:	461e      	mov	r6, r3
 8008e90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e94:	2a30      	cmp	r2, #48	@ 0x30
 8008e96:	d0fa      	beq.n	8008e8e <_dtoa_r+0xb06>
 8008e98:	e5c2      	b.n	8008a20 <_dtoa_r+0x698>
 8008e9a:	459a      	cmp	sl, r3
 8008e9c:	d1a4      	bne.n	8008de8 <_dtoa_r+0xa60>
 8008e9e:	9b04      	ldr	r3, [sp, #16]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	9304      	str	r3, [sp, #16]
 8008ea4:	2331      	movs	r3, #49	@ 0x31
 8008ea6:	f88a 3000 	strb.w	r3, [sl]
 8008eaa:	e5b9      	b.n	8008a20 <_dtoa_r+0x698>
 8008eac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008eae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008f0c <_dtoa_r+0xb84>
 8008eb2:	b11b      	cbz	r3, 8008ebc <_dtoa_r+0xb34>
 8008eb4:	f10a 0308 	add.w	r3, sl, #8
 8008eb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008eba:	6013      	str	r3, [r2, #0]
 8008ebc:	4650      	mov	r0, sl
 8008ebe:	b019      	add	sp, #100	@ 0x64
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	f77f ae37 	ble.w	8008b3a <_dtoa_r+0x7b2>
 8008ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ece:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ed0:	2001      	movs	r0, #1
 8008ed2:	e655      	b.n	8008b80 <_dtoa_r+0x7f8>
 8008ed4:	9b00      	ldr	r3, [sp, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f77f aed6 	ble.w	8008c88 <_dtoa_r+0x900>
 8008edc:	4656      	mov	r6, sl
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4648      	mov	r0, r9
 8008ee2:	f7ff f9c8 	bl	8008276 <quorem>
 8008ee6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008eea:	f806 8b01 	strb.w	r8, [r6], #1
 8008eee:	9b00      	ldr	r3, [sp, #0]
 8008ef0:	eba6 020a 	sub.w	r2, r6, sl
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	ddb3      	ble.n	8008e60 <_dtoa_r+0xad8>
 8008ef8:	4649      	mov	r1, r9
 8008efa:	2300      	movs	r3, #0
 8008efc:	220a      	movs	r2, #10
 8008efe:	4658      	mov	r0, fp
 8008f00:	f000 fb0c 	bl	800951c <__multadd>
 8008f04:	4681      	mov	r9, r0
 8008f06:	e7ea      	b.n	8008ede <_dtoa_r+0xb56>
 8008f08:	0800b134 	.word	0x0800b134
 8008f0c:	0800b0b8 	.word	0x0800b0b8

08008f10 <__sfputc_r>:
 8008f10:	6893      	ldr	r3, [r2, #8]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	b410      	push	{r4}
 8008f18:	6093      	str	r3, [r2, #8]
 8008f1a:	da08      	bge.n	8008f2e <__sfputc_r+0x1e>
 8008f1c:	6994      	ldr	r4, [r2, #24]
 8008f1e:	42a3      	cmp	r3, r4
 8008f20:	db01      	blt.n	8008f26 <__sfputc_r+0x16>
 8008f22:	290a      	cmp	r1, #10
 8008f24:	d103      	bne.n	8008f2e <__sfputc_r+0x1e>
 8008f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f2a:	f000 be5a 	b.w	8009be2 <__swbuf_r>
 8008f2e:	6813      	ldr	r3, [r2, #0]
 8008f30:	1c58      	adds	r0, r3, #1
 8008f32:	6010      	str	r0, [r2, #0]
 8008f34:	7019      	strb	r1, [r3, #0]
 8008f36:	4608      	mov	r0, r1
 8008f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <__sfputs_r>:
 8008f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f40:	4606      	mov	r6, r0
 8008f42:	460f      	mov	r7, r1
 8008f44:	4614      	mov	r4, r2
 8008f46:	18d5      	adds	r5, r2, r3
 8008f48:	42ac      	cmp	r4, r5
 8008f4a:	d101      	bne.n	8008f50 <__sfputs_r+0x12>
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	e007      	b.n	8008f60 <__sfputs_r+0x22>
 8008f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f54:	463a      	mov	r2, r7
 8008f56:	4630      	mov	r0, r6
 8008f58:	f7ff ffda 	bl	8008f10 <__sfputc_r>
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	d1f3      	bne.n	8008f48 <__sfputs_r+0xa>
 8008f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f64 <_vfiprintf_r>:
 8008f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f68:	460d      	mov	r5, r1
 8008f6a:	b09d      	sub	sp, #116	@ 0x74
 8008f6c:	4614      	mov	r4, r2
 8008f6e:	4698      	mov	r8, r3
 8008f70:	4606      	mov	r6, r0
 8008f72:	b118      	cbz	r0, 8008f7c <_vfiprintf_r+0x18>
 8008f74:	6a03      	ldr	r3, [r0, #32]
 8008f76:	b90b      	cbnz	r3, 8008f7c <_vfiprintf_r+0x18>
 8008f78:	f7ff f8fc 	bl	8008174 <__sinit>
 8008f7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f7e:	07d9      	lsls	r1, r3, #31
 8008f80:	d405      	bmi.n	8008f8e <_vfiprintf_r+0x2a>
 8008f82:	89ab      	ldrh	r3, [r5, #12]
 8008f84:	059a      	lsls	r2, r3, #22
 8008f86:	d402      	bmi.n	8008f8e <_vfiprintf_r+0x2a>
 8008f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f8a:	f7ff f972 	bl	8008272 <__retarget_lock_acquire_recursive>
 8008f8e:	89ab      	ldrh	r3, [r5, #12]
 8008f90:	071b      	lsls	r3, r3, #28
 8008f92:	d501      	bpl.n	8008f98 <_vfiprintf_r+0x34>
 8008f94:	692b      	ldr	r3, [r5, #16]
 8008f96:	b99b      	cbnz	r3, 8008fc0 <_vfiprintf_r+0x5c>
 8008f98:	4629      	mov	r1, r5
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f000 fe60 	bl	8009c60 <__swsetup_r>
 8008fa0:	b170      	cbz	r0, 8008fc0 <_vfiprintf_r+0x5c>
 8008fa2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fa4:	07dc      	lsls	r4, r3, #31
 8008fa6:	d504      	bpl.n	8008fb2 <_vfiprintf_r+0x4e>
 8008fa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fac:	b01d      	add	sp, #116	@ 0x74
 8008fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb2:	89ab      	ldrh	r3, [r5, #12]
 8008fb4:	0598      	lsls	r0, r3, #22
 8008fb6:	d4f7      	bmi.n	8008fa8 <_vfiprintf_r+0x44>
 8008fb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fba:	f7ff f95b 	bl	8008274 <__retarget_lock_release_recursive>
 8008fbe:	e7f3      	b.n	8008fa8 <_vfiprintf_r+0x44>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fc4:	2320      	movs	r3, #32
 8008fc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fca:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fce:	2330      	movs	r3, #48	@ 0x30
 8008fd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009180 <_vfiprintf_r+0x21c>
 8008fd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fd8:	f04f 0901 	mov.w	r9, #1
 8008fdc:	4623      	mov	r3, r4
 8008fde:	469a      	mov	sl, r3
 8008fe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fe4:	b10a      	cbz	r2, 8008fea <_vfiprintf_r+0x86>
 8008fe6:	2a25      	cmp	r2, #37	@ 0x25
 8008fe8:	d1f9      	bne.n	8008fde <_vfiprintf_r+0x7a>
 8008fea:	ebba 0b04 	subs.w	fp, sl, r4
 8008fee:	d00b      	beq.n	8009008 <_vfiprintf_r+0xa4>
 8008ff0:	465b      	mov	r3, fp
 8008ff2:	4622      	mov	r2, r4
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f7ff ffa1 	bl	8008f3e <__sfputs_r>
 8008ffc:	3001      	adds	r0, #1
 8008ffe:	f000 80a7 	beq.w	8009150 <_vfiprintf_r+0x1ec>
 8009002:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009004:	445a      	add	r2, fp
 8009006:	9209      	str	r2, [sp, #36]	@ 0x24
 8009008:	f89a 3000 	ldrb.w	r3, [sl]
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 809f 	beq.w	8009150 <_vfiprintf_r+0x1ec>
 8009012:	2300      	movs	r3, #0
 8009014:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009018:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800901c:	f10a 0a01 	add.w	sl, sl, #1
 8009020:	9304      	str	r3, [sp, #16]
 8009022:	9307      	str	r3, [sp, #28]
 8009024:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009028:	931a      	str	r3, [sp, #104]	@ 0x68
 800902a:	4654      	mov	r4, sl
 800902c:	2205      	movs	r2, #5
 800902e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009032:	4853      	ldr	r0, [pc, #332]	@ (8009180 <_vfiprintf_r+0x21c>)
 8009034:	f7f7 f8cc 	bl	80001d0 <memchr>
 8009038:	9a04      	ldr	r2, [sp, #16]
 800903a:	b9d8      	cbnz	r0, 8009074 <_vfiprintf_r+0x110>
 800903c:	06d1      	lsls	r1, r2, #27
 800903e:	bf44      	itt	mi
 8009040:	2320      	movmi	r3, #32
 8009042:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009046:	0713      	lsls	r3, r2, #28
 8009048:	bf44      	itt	mi
 800904a:	232b      	movmi	r3, #43	@ 0x2b
 800904c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009050:	f89a 3000 	ldrb.w	r3, [sl]
 8009054:	2b2a      	cmp	r3, #42	@ 0x2a
 8009056:	d015      	beq.n	8009084 <_vfiprintf_r+0x120>
 8009058:	9a07      	ldr	r2, [sp, #28]
 800905a:	4654      	mov	r4, sl
 800905c:	2000      	movs	r0, #0
 800905e:	f04f 0c0a 	mov.w	ip, #10
 8009062:	4621      	mov	r1, r4
 8009064:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009068:	3b30      	subs	r3, #48	@ 0x30
 800906a:	2b09      	cmp	r3, #9
 800906c:	d94b      	bls.n	8009106 <_vfiprintf_r+0x1a2>
 800906e:	b1b0      	cbz	r0, 800909e <_vfiprintf_r+0x13a>
 8009070:	9207      	str	r2, [sp, #28]
 8009072:	e014      	b.n	800909e <_vfiprintf_r+0x13a>
 8009074:	eba0 0308 	sub.w	r3, r0, r8
 8009078:	fa09 f303 	lsl.w	r3, r9, r3
 800907c:	4313      	orrs	r3, r2
 800907e:	9304      	str	r3, [sp, #16]
 8009080:	46a2      	mov	sl, r4
 8009082:	e7d2      	b.n	800902a <_vfiprintf_r+0xc6>
 8009084:	9b03      	ldr	r3, [sp, #12]
 8009086:	1d19      	adds	r1, r3, #4
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	9103      	str	r1, [sp, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	bfbb      	ittet	lt
 8009090:	425b      	neglt	r3, r3
 8009092:	f042 0202 	orrlt.w	r2, r2, #2
 8009096:	9307      	strge	r3, [sp, #28]
 8009098:	9307      	strlt	r3, [sp, #28]
 800909a:	bfb8      	it	lt
 800909c:	9204      	strlt	r2, [sp, #16]
 800909e:	7823      	ldrb	r3, [r4, #0]
 80090a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80090a2:	d10a      	bne.n	80090ba <_vfiprintf_r+0x156>
 80090a4:	7863      	ldrb	r3, [r4, #1]
 80090a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80090a8:	d132      	bne.n	8009110 <_vfiprintf_r+0x1ac>
 80090aa:	9b03      	ldr	r3, [sp, #12]
 80090ac:	1d1a      	adds	r2, r3, #4
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	9203      	str	r2, [sp, #12]
 80090b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090b6:	3402      	adds	r4, #2
 80090b8:	9305      	str	r3, [sp, #20]
 80090ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009190 <_vfiprintf_r+0x22c>
 80090be:	7821      	ldrb	r1, [r4, #0]
 80090c0:	2203      	movs	r2, #3
 80090c2:	4650      	mov	r0, sl
 80090c4:	f7f7 f884 	bl	80001d0 <memchr>
 80090c8:	b138      	cbz	r0, 80090da <_vfiprintf_r+0x176>
 80090ca:	9b04      	ldr	r3, [sp, #16]
 80090cc:	eba0 000a 	sub.w	r0, r0, sl
 80090d0:	2240      	movs	r2, #64	@ 0x40
 80090d2:	4082      	lsls	r2, r0
 80090d4:	4313      	orrs	r3, r2
 80090d6:	3401      	adds	r4, #1
 80090d8:	9304      	str	r3, [sp, #16]
 80090da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090de:	4829      	ldr	r0, [pc, #164]	@ (8009184 <_vfiprintf_r+0x220>)
 80090e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090e4:	2206      	movs	r2, #6
 80090e6:	f7f7 f873 	bl	80001d0 <memchr>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d03f      	beq.n	800916e <_vfiprintf_r+0x20a>
 80090ee:	4b26      	ldr	r3, [pc, #152]	@ (8009188 <_vfiprintf_r+0x224>)
 80090f0:	bb1b      	cbnz	r3, 800913a <_vfiprintf_r+0x1d6>
 80090f2:	9b03      	ldr	r3, [sp, #12]
 80090f4:	3307      	adds	r3, #7
 80090f6:	f023 0307 	bic.w	r3, r3, #7
 80090fa:	3308      	adds	r3, #8
 80090fc:	9303      	str	r3, [sp, #12]
 80090fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009100:	443b      	add	r3, r7
 8009102:	9309      	str	r3, [sp, #36]	@ 0x24
 8009104:	e76a      	b.n	8008fdc <_vfiprintf_r+0x78>
 8009106:	fb0c 3202 	mla	r2, ip, r2, r3
 800910a:	460c      	mov	r4, r1
 800910c:	2001      	movs	r0, #1
 800910e:	e7a8      	b.n	8009062 <_vfiprintf_r+0xfe>
 8009110:	2300      	movs	r3, #0
 8009112:	3401      	adds	r4, #1
 8009114:	9305      	str	r3, [sp, #20]
 8009116:	4619      	mov	r1, r3
 8009118:	f04f 0c0a 	mov.w	ip, #10
 800911c:	4620      	mov	r0, r4
 800911e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009122:	3a30      	subs	r2, #48	@ 0x30
 8009124:	2a09      	cmp	r2, #9
 8009126:	d903      	bls.n	8009130 <_vfiprintf_r+0x1cc>
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0c6      	beq.n	80090ba <_vfiprintf_r+0x156>
 800912c:	9105      	str	r1, [sp, #20]
 800912e:	e7c4      	b.n	80090ba <_vfiprintf_r+0x156>
 8009130:	fb0c 2101 	mla	r1, ip, r1, r2
 8009134:	4604      	mov	r4, r0
 8009136:	2301      	movs	r3, #1
 8009138:	e7f0      	b.n	800911c <_vfiprintf_r+0x1b8>
 800913a:	ab03      	add	r3, sp, #12
 800913c:	9300      	str	r3, [sp, #0]
 800913e:	462a      	mov	r2, r5
 8009140:	4b12      	ldr	r3, [pc, #72]	@ (800918c <_vfiprintf_r+0x228>)
 8009142:	a904      	add	r1, sp, #16
 8009144:	4630      	mov	r0, r6
 8009146:	f7fe fbd1 	bl	80078ec <_printf_float>
 800914a:	4607      	mov	r7, r0
 800914c:	1c78      	adds	r0, r7, #1
 800914e:	d1d6      	bne.n	80090fe <_vfiprintf_r+0x19a>
 8009150:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009152:	07d9      	lsls	r1, r3, #31
 8009154:	d405      	bmi.n	8009162 <_vfiprintf_r+0x1fe>
 8009156:	89ab      	ldrh	r3, [r5, #12]
 8009158:	059a      	lsls	r2, r3, #22
 800915a:	d402      	bmi.n	8009162 <_vfiprintf_r+0x1fe>
 800915c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800915e:	f7ff f889 	bl	8008274 <__retarget_lock_release_recursive>
 8009162:	89ab      	ldrh	r3, [r5, #12]
 8009164:	065b      	lsls	r3, r3, #25
 8009166:	f53f af1f 	bmi.w	8008fa8 <_vfiprintf_r+0x44>
 800916a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800916c:	e71e      	b.n	8008fac <_vfiprintf_r+0x48>
 800916e:	ab03      	add	r3, sp, #12
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	462a      	mov	r2, r5
 8009174:	4b05      	ldr	r3, [pc, #20]	@ (800918c <_vfiprintf_r+0x228>)
 8009176:	a904      	add	r1, sp, #16
 8009178:	4630      	mov	r0, r6
 800917a:	f7fe fe4f 	bl	8007e1c <_printf_i>
 800917e:	e7e4      	b.n	800914a <_vfiprintf_r+0x1e6>
 8009180:	0800b145 	.word	0x0800b145
 8009184:	0800b14f 	.word	0x0800b14f
 8009188:	080078ed 	.word	0x080078ed
 800918c:	08008f3f 	.word	0x08008f3f
 8009190:	0800b14b 	.word	0x0800b14b

08009194 <malloc>:
 8009194:	4b02      	ldr	r3, [pc, #8]	@ (80091a0 <malloc+0xc>)
 8009196:	4601      	mov	r1, r0
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	f000 b825 	b.w	80091e8 <_malloc_r>
 800919e:	bf00      	nop
 80091a0:	2000001c 	.word	0x2000001c

080091a4 <sbrk_aligned>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	4e0f      	ldr	r6, [pc, #60]	@ (80091e4 <sbrk_aligned+0x40>)
 80091a8:	460c      	mov	r4, r1
 80091aa:	6831      	ldr	r1, [r6, #0]
 80091ac:	4605      	mov	r5, r0
 80091ae:	b911      	cbnz	r1, 80091b6 <sbrk_aligned+0x12>
 80091b0:	f000 fe64 	bl	8009e7c <_sbrk_r>
 80091b4:	6030      	str	r0, [r6, #0]
 80091b6:	4621      	mov	r1, r4
 80091b8:	4628      	mov	r0, r5
 80091ba:	f000 fe5f 	bl	8009e7c <_sbrk_r>
 80091be:	1c43      	adds	r3, r0, #1
 80091c0:	d103      	bne.n	80091ca <sbrk_aligned+0x26>
 80091c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80091c6:	4620      	mov	r0, r4
 80091c8:	bd70      	pop	{r4, r5, r6, pc}
 80091ca:	1cc4      	adds	r4, r0, #3
 80091cc:	f024 0403 	bic.w	r4, r4, #3
 80091d0:	42a0      	cmp	r0, r4
 80091d2:	d0f8      	beq.n	80091c6 <sbrk_aligned+0x22>
 80091d4:	1a21      	subs	r1, r4, r0
 80091d6:	4628      	mov	r0, r5
 80091d8:	f000 fe50 	bl	8009e7c <_sbrk_r>
 80091dc:	3001      	adds	r0, #1
 80091de:	d1f2      	bne.n	80091c6 <sbrk_aligned+0x22>
 80091e0:	e7ef      	b.n	80091c2 <sbrk_aligned+0x1e>
 80091e2:	bf00      	nop
 80091e4:	20002fc8 	.word	0x20002fc8

080091e8 <_malloc_r>:
 80091e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091ec:	1ccd      	adds	r5, r1, #3
 80091ee:	f025 0503 	bic.w	r5, r5, #3
 80091f2:	3508      	adds	r5, #8
 80091f4:	2d0c      	cmp	r5, #12
 80091f6:	bf38      	it	cc
 80091f8:	250c      	movcc	r5, #12
 80091fa:	2d00      	cmp	r5, #0
 80091fc:	4606      	mov	r6, r0
 80091fe:	db01      	blt.n	8009204 <_malloc_r+0x1c>
 8009200:	42a9      	cmp	r1, r5
 8009202:	d904      	bls.n	800920e <_malloc_r+0x26>
 8009204:	230c      	movs	r3, #12
 8009206:	6033      	str	r3, [r6, #0]
 8009208:	2000      	movs	r0, #0
 800920a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800920e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80092e4 <_malloc_r+0xfc>
 8009212:	f000 f915 	bl	8009440 <__malloc_lock>
 8009216:	f8d8 3000 	ldr.w	r3, [r8]
 800921a:	461c      	mov	r4, r3
 800921c:	bb44      	cbnz	r4, 8009270 <_malloc_r+0x88>
 800921e:	4629      	mov	r1, r5
 8009220:	4630      	mov	r0, r6
 8009222:	f7ff ffbf 	bl	80091a4 <sbrk_aligned>
 8009226:	1c43      	adds	r3, r0, #1
 8009228:	4604      	mov	r4, r0
 800922a:	d158      	bne.n	80092de <_malloc_r+0xf6>
 800922c:	f8d8 4000 	ldr.w	r4, [r8]
 8009230:	4627      	mov	r7, r4
 8009232:	2f00      	cmp	r7, #0
 8009234:	d143      	bne.n	80092be <_malloc_r+0xd6>
 8009236:	2c00      	cmp	r4, #0
 8009238:	d04b      	beq.n	80092d2 <_malloc_r+0xea>
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	4639      	mov	r1, r7
 800923e:	4630      	mov	r0, r6
 8009240:	eb04 0903 	add.w	r9, r4, r3
 8009244:	f000 fe1a 	bl	8009e7c <_sbrk_r>
 8009248:	4581      	cmp	r9, r0
 800924a:	d142      	bne.n	80092d2 <_malloc_r+0xea>
 800924c:	6821      	ldr	r1, [r4, #0]
 800924e:	1a6d      	subs	r5, r5, r1
 8009250:	4629      	mov	r1, r5
 8009252:	4630      	mov	r0, r6
 8009254:	f7ff ffa6 	bl	80091a4 <sbrk_aligned>
 8009258:	3001      	adds	r0, #1
 800925a:	d03a      	beq.n	80092d2 <_malloc_r+0xea>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	442b      	add	r3, r5
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	f8d8 3000 	ldr.w	r3, [r8]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	bb62      	cbnz	r2, 80092c4 <_malloc_r+0xdc>
 800926a:	f8c8 7000 	str.w	r7, [r8]
 800926e:	e00f      	b.n	8009290 <_malloc_r+0xa8>
 8009270:	6822      	ldr	r2, [r4, #0]
 8009272:	1b52      	subs	r2, r2, r5
 8009274:	d420      	bmi.n	80092b8 <_malloc_r+0xd0>
 8009276:	2a0b      	cmp	r2, #11
 8009278:	d917      	bls.n	80092aa <_malloc_r+0xc2>
 800927a:	1961      	adds	r1, r4, r5
 800927c:	42a3      	cmp	r3, r4
 800927e:	6025      	str	r5, [r4, #0]
 8009280:	bf18      	it	ne
 8009282:	6059      	strne	r1, [r3, #4]
 8009284:	6863      	ldr	r3, [r4, #4]
 8009286:	bf08      	it	eq
 8009288:	f8c8 1000 	streq.w	r1, [r8]
 800928c:	5162      	str	r2, [r4, r5]
 800928e:	604b      	str	r3, [r1, #4]
 8009290:	4630      	mov	r0, r6
 8009292:	f000 f8db 	bl	800944c <__malloc_unlock>
 8009296:	f104 000b 	add.w	r0, r4, #11
 800929a:	1d23      	adds	r3, r4, #4
 800929c:	f020 0007 	bic.w	r0, r0, #7
 80092a0:	1ac2      	subs	r2, r0, r3
 80092a2:	bf1c      	itt	ne
 80092a4:	1a1b      	subne	r3, r3, r0
 80092a6:	50a3      	strne	r3, [r4, r2]
 80092a8:	e7af      	b.n	800920a <_malloc_r+0x22>
 80092aa:	6862      	ldr	r2, [r4, #4]
 80092ac:	42a3      	cmp	r3, r4
 80092ae:	bf0c      	ite	eq
 80092b0:	f8c8 2000 	streq.w	r2, [r8]
 80092b4:	605a      	strne	r2, [r3, #4]
 80092b6:	e7eb      	b.n	8009290 <_malloc_r+0xa8>
 80092b8:	4623      	mov	r3, r4
 80092ba:	6864      	ldr	r4, [r4, #4]
 80092bc:	e7ae      	b.n	800921c <_malloc_r+0x34>
 80092be:	463c      	mov	r4, r7
 80092c0:	687f      	ldr	r7, [r7, #4]
 80092c2:	e7b6      	b.n	8009232 <_malloc_r+0x4a>
 80092c4:	461a      	mov	r2, r3
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	42a3      	cmp	r3, r4
 80092ca:	d1fb      	bne.n	80092c4 <_malloc_r+0xdc>
 80092cc:	2300      	movs	r3, #0
 80092ce:	6053      	str	r3, [r2, #4]
 80092d0:	e7de      	b.n	8009290 <_malloc_r+0xa8>
 80092d2:	230c      	movs	r3, #12
 80092d4:	6033      	str	r3, [r6, #0]
 80092d6:	4630      	mov	r0, r6
 80092d8:	f000 f8b8 	bl	800944c <__malloc_unlock>
 80092dc:	e794      	b.n	8009208 <_malloc_r+0x20>
 80092de:	6005      	str	r5, [r0, #0]
 80092e0:	e7d6      	b.n	8009290 <_malloc_r+0xa8>
 80092e2:	bf00      	nop
 80092e4:	20002fcc 	.word	0x20002fcc

080092e8 <__sflush_r>:
 80092e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f0:	0716      	lsls	r6, r2, #28
 80092f2:	4605      	mov	r5, r0
 80092f4:	460c      	mov	r4, r1
 80092f6:	d454      	bmi.n	80093a2 <__sflush_r+0xba>
 80092f8:	684b      	ldr	r3, [r1, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	dc02      	bgt.n	8009304 <__sflush_r+0x1c>
 80092fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009300:	2b00      	cmp	r3, #0
 8009302:	dd48      	ble.n	8009396 <__sflush_r+0xae>
 8009304:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009306:	2e00      	cmp	r6, #0
 8009308:	d045      	beq.n	8009396 <__sflush_r+0xae>
 800930a:	2300      	movs	r3, #0
 800930c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009310:	682f      	ldr	r7, [r5, #0]
 8009312:	6a21      	ldr	r1, [r4, #32]
 8009314:	602b      	str	r3, [r5, #0]
 8009316:	d030      	beq.n	800937a <__sflush_r+0x92>
 8009318:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800931a:	89a3      	ldrh	r3, [r4, #12]
 800931c:	0759      	lsls	r1, r3, #29
 800931e:	d505      	bpl.n	800932c <__sflush_r+0x44>
 8009320:	6863      	ldr	r3, [r4, #4]
 8009322:	1ad2      	subs	r2, r2, r3
 8009324:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009326:	b10b      	cbz	r3, 800932c <__sflush_r+0x44>
 8009328:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800932a:	1ad2      	subs	r2, r2, r3
 800932c:	2300      	movs	r3, #0
 800932e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009330:	6a21      	ldr	r1, [r4, #32]
 8009332:	4628      	mov	r0, r5
 8009334:	47b0      	blx	r6
 8009336:	1c43      	adds	r3, r0, #1
 8009338:	89a3      	ldrh	r3, [r4, #12]
 800933a:	d106      	bne.n	800934a <__sflush_r+0x62>
 800933c:	6829      	ldr	r1, [r5, #0]
 800933e:	291d      	cmp	r1, #29
 8009340:	d82b      	bhi.n	800939a <__sflush_r+0xb2>
 8009342:	4a2a      	ldr	r2, [pc, #168]	@ (80093ec <__sflush_r+0x104>)
 8009344:	410a      	asrs	r2, r1
 8009346:	07d6      	lsls	r6, r2, #31
 8009348:	d427      	bmi.n	800939a <__sflush_r+0xb2>
 800934a:	2200      	movs	r2, #0
 800934c:	6062      	str	r2, [r4, #4]
 800934e:	04d9      	lsls	r1, r3, #19
 8009350:	6922      	ldr	r2, [r4, #16]
 8009352:	6022      	str	r2, [r4, #0]
 8009354:	d504      	bpl.n	8009360 <__sflush_r+0x78>
 8009356:	1c42      	adds	r2, r0, #1
 8009358:	d101      	bne.n	800935e <__sflush_r+0x76>
 800935a:	682b      	ldr	r3, [r5, #0]
 800935c:	b903      	cbnz	r3, 8009360 <__sflush_r+0x78>
 800935e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009362:	602f      	str	r7, [r5, #0]
 8009364:	b1b9      	cbz	r1, 8009396 <__sflush_r+0xae>
 8009366:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800936a:	4299      	cmp	r1, r3
 800936c:	d002      	beq.n	8009374 <__sflush_r+0x8c>
 800936e:	4628      	mov	r0, r5
 8009370:	f000 fde6 	bl	8009f40 <_free_r>
 8009374:	2300      	movs	r3, #0
 8009376:	6363      	str	r3, [r4, #52]	@ 0x34
 8009378:	e00d      	b.n	8009396 <__sflush_r+0xae>
 800937a:	2301      	movs	r3, #1
 800937c:	4628      	mov	r0, r5
 800937e:	47b0      	blx	r6
 8009380:	4602      	mov	r2, r0
 8009382:	1c50      	adds	r0, r2, #1
 8009384:	d1c9      	bne.n	800931a <__sflush_r+0x32>
 8009386:	682b      	ldr	r3, [r5, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d0c6      	beq.n	800931a <__sflush_r+0x32>
 800938c:	2b1d      	cmp	r3, #29
 800938e:	d001      	beq.n	8009394 <__sflush_r+0xac>
 8009390:	2b16      	cmp	r3, #22
 8009392:	d11e      	bne.n	80093d2 <__sflush_r+0xea>
 8009394:	602f      	str	r7, [r5, #0]
 8009396:	2000      	movs	r0, #0
 8009398:	e022      	b.n	80093e0 <__sflush_r+0xf8>
 800939a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800939e:	b21b      	sxth	r3, r3
 80093a0:	e01b      	b.n	80093da <__sflush_r+0xf2>
 80093a2:	690f      	ldr	r7, [r1, #16]
 80093a4:	2f00      	cmp	r7, #0
 80093a6:	d0f6      	beq.n	8009396 <__sflush_r+0xae>
 80093a8:	0793      	lsls	r3, r2, #30
 80093aa:	680e      	ldr	r6, [r1, #0]
 80093ac:	bf08      	it	eq
 80093ae:	694b      	ldreq	r3, [r1, #20]
 80093b0:	600f      	str	r7, [r1, #0]
 80093b2:	bf18      	it	ne
 80093b4:	2300      	movne	r3, #0
 80093b6:	eba6 0807 	sub.w	r8, r6, r7
 80093ba:	608b      	str	r3, [r1, #8]
 80093bc:	f1b8 0f00 	cmp.w	r8, #0
 80093c0:	dde9      	ble.n	8009396 <__sflush_r+0xae>
 80093c2:	6a21      	ldr	r1, [r4, #32]
 80093c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80093c6:	4643      	mov	r3, r8
 80093c8:	463a      	mov	r2, r7
 80093ca:	4628      	mov	r0, r5
 80093cc:	47b0      	blx	r6
 80093ce:	2800      	cmp	r0, #0
 80093d0:	dc08      	bgt.n	80093e4 <__sflush_r+0xfc>
 80093d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093da:	81a3      	strh	r3, [r4, #12]
 80093dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e4:	4407      	add	r7, r0
 80093e6:	eba8 0800 	sub.w	r8, r8, r0
 80093ea:	e7e7      	b.n	80093bc <__sflush_r+0xd4>
 80093ec:	dfbffffe 	.word	0xdfbffffe

080093f0 <_fflush_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	690b      	ldr	r3, [r1, #16]
 80093f4:	4605      	mov	r5, r0
 80093f6:	460c      	mov	r4, r1
 80093f8:	b913      	cbnz	r3, 8009400 <_fflush_r+0x10>
 80093fa:	2500      	movs	r5, #0
 80093fc:	4628      	mov	r0, r5
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	b118      	cbz	r0, 800940a <_fflush_r+0x1a>
 8009402:	6a03      	ldr	r3, [r0, #32]
 8009404:	b90b      	cbnz	r3, 800940a <_fflush_r+0x1a>
 8009406:	f7fe feb5 	bl	8008174 <__sinit>
 800940a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0f3      	beq.n	80093fa <_fflush_r+0xa>
 8009412:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009414:	07d0      	lsls	r0, r2, #31
 8009416:	d404      	bmi.n	8009422 <_fflush_r+0x32>
 8009418:	0599      	lsls	r1, r3, #22
 800941a:	d402      	bmi.n	8009422 <_fflush_r+0x32>
 800941c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800941e:	f7fe ff28 	bl	8008272 <__retarget_lock_acquire_recursive>
 8009422:	4628      	mov	r0, r5
 8009424:	4621      	mov	r1, r4
 8009426:	f7ff ff5f 	bl	80092e8 <__sflush_r>
 800942a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800942c:	07da      	lsls	r2, r3, #31
 800942e:	4605      	mov	r5, r0
 8009430:	d4e4      	bmi.n	80093fc <_fflush_r+0xc>
 8009432:	89a3      	ldrh	r3, [r4, #12]
 8009434:	059b      	lsls	r3, r3, #22
 8009436:	d4e1      	bmi.n	80093fc <_fflush_r+0xc>
 8009438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800943a:	f7fe ff1b 	bl	8008274 <__retarget_lock_release_recursive>
 800943e:	e7dd      	b.n	80093fc <_fflush_r+0xc>

08009440 <__malloc_lock>:
 8009440:	4801      	ldr	r0, [pc, #4]	@ (8009448 <__malloc_lock+0x8>)
 8009442:	f7fe bf16 	b.w	8008272 <__retarget_lock_acquire_recursive>
 8009446:	bf00      	nop
 8009448:	20002fc4 	.word	0x20002fc4

0800944c <__malloc_unlock>:
 800944c:	4801      	ldr	r0, [pc, #4]	@ (8009454 <__malloc_unlock+0x8>)
 800944e:	f7fe bf11 	b.w	8008274 <__retarget_lock_release_recursive>
 8009452:	bf00      	nop
 8009454:	20002fc4 	.word	0x20002fc4

08009458 <_Balloc>:
 8009458:	b570      	push	{r4, r5, r6, lr}
 800945a:	69c6      	ldr	r6, [r0, #28]
 800945c:	4604      	mov	r4, r0
 800945e:	460d      	mov	r5, r1
 8009460:	b976      	cbnz	r6, 8009480 <_Balloc+0x28>
 8009462:	2010      	movs	r0, #16
 8009464:	f7ff fe96 	bl	8009194 <malloc>
 8009468:	4602      	mov	r2, r0
 800946a:	61e0      	str	r0, [r4, #28]
 800946c:	b920      	cbnz	r0, 8009478 <_Balloc+0x20>
 800946e:	4b18      	ldr	r3, [pc, #96]	@ (80094d0 <_Balloc+0x78>)
 8009470:	4818      	ldr	r0, [pc, #96]	@ (80094d4 <_Balloc+0x7c>)
 8009472:	216b      	movs	r1, #107	@ 0x6b
 8009474:	f000 fd32 	bl	8009edc <__assert_func>
 8009478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800947c:	6006      	str	r6, [r0, #0]
 800947e:	60c6      	str	r6, [r0, #12]
 8009480:	69e6      	ldr	r6, [r4, #28]
 8009482:	68f3      	ldr	r3, [r6, #12]
 8009484:	b183      	cbz	r3, 80094a8 <_Balloc+0x50>
 8009486:	69e3      	ldr	r3, [r4, #28]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800948e:	b9b8      	cbnz	r0, 80094c0 <_Balloc+0x68>
 8009490:	2101      	movs	r1, #1
 8009492:	fa01 f605 	lsl.w	r6, r1, r5
 8009496:	1d72      	adds	r2, r6, #5
 8009498:	0092      	lsls	r2, r2, #2
 800949a:	4620      	mov	r0, r4
 800949c:	f000 fd3c 	bl	8009f18 <_calloc_r>
 80094a0:	b160      	cbz	r0, 80094bc <_Balloc+0x64>
 80094a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094a6:	e00e      	b.n	80094c6 <_Balloc+0x6e>
 80094a8:	2221      	movs	r2, #33	@ 0x21
 80094aa:	2104      	movs	r1, #4
 80094ac:	4620      	mov	r0, r4
 80094ae:	f000 fd33 	bl	8009f18 <_calloc_r>
 80094b2:	69e3      	ldr	r3, [r4, #28]
 80094b4:	60f0      	str	r0, [r6, #12]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1e4      	bne.n	8009486 <_Balloc+0x2e>
 80094bc:	2000      	movs	r0, #0
 80094be:	bd70      	pop	{r4, r5, r6, pc}
 80094c0:	6802      	ldr	r2, [r0, #0]
 80094c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80094c6:	2300      	movs	r3, #0
 80094c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094cc:	e7f7      	b.n	80094be <_Balloc+0x66>
 80094ce:	bf00      	nop
 80094d0:	0800b0c5 	.word	0x0800b0c5
 80094d4:	0800b156 	.word	0x0800b156

080094d8 <_Bfree>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	69c6      	ldr	r6, [r0, #28]
 80094dc:	4605      	mov	r5, r0
 80094de:	460c      	mov	r4, r1
 80094e0:	b976      	cbnz	r6, 8009500 <_Bfree+0x28>
 80094e2:	2010      	movs	r0, #16
 80094e4:	f7ff fe56 	bl	8009194 <malloc>
 80094e8:	4602      	mov	r2, r0
 80094ea:	61e8      	str	r0, [r5, #28]
 80094ec:	b920      	cbnz	r0, 80094f8 <_Bfree+0x20>
 80094ee:	4b09      	ldr	r3, [pc, #36]	@ (8009514 <_Bfree+0x3c>)
 80094f0:	4809      	ldr	r0, [pc, #36]	@ (8009518 <_Bfree+0x40>)
 80094f2:	218f      	movs	r1, #143	@ 0x8f
 80094f4:	f000 fcf2 	bl	8009edc <__assert_func>
 80094f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094fc:	6006      	str	r6, [r0, #0]
 80094fe:	60c6      	str	r6, [r0, #12]
 8009500:	b13c      	cbz	r4, 8009512 <_Bfree+0x3a>
 8009502:	69eb      	ldr	r3, [r5, #28]
 8009504:	6862      	ldr	r2, [r4, #4]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800950c:	6021      	str	r1, [r4, #0]
 800950e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009512:	bd70      	pop	{r4, r5, r6, pc}
 8009514:	0800b0c5 	.word	0x0800b0c5
 8009518:	0800b156 	.word	0x0800b156

0800951c <__multadd>:
 800951c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009520:	690d      	ldr	r5, [r1, #16]
 8009522:	4607      	mov	r7, r0
 8009524:	460c      	mov	r4, r1
 8009526:	461e      	mov	r6, r3
 8009528:	f101 0c14 	add.w	ip, r1, #20
 800952c:	2000      	movs	r0, #0
 800952e:	f8dc 3000 	ldr.w	r3, [ip]
 8009532:	b299      	uxth	r1, r3
 8009534:	fb02 6101 	mla	r1, r2, r1, r6
 8009538:	0c1e      	lsrs	r6, r3, #16
 800953a:	0c0b      	lsrs	r3, r1, #16
 800953c:	fb02 3306 	mla	r3, r2, r6, r3
 8009540:	b289      	uxth	r1, r1
 8009542:	3001      	adds	r0, #1
 8009544:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009548:	4285      	cmp	r5, r0
 800954a:	f84c 1b04 	str.w	r1, [ip], #4
 800954e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009552:	dcec      	bgt.n	800952e <__multadd+0x12>
 8009554:	b30e      	cbz	r6, 800959a <__multadd+0x7e>
 8009556:	68a3      	ldr	r3, [r4, #8]
 8009558:	42ab      	cmp	r3, r5
 800955a:	dc19      	bgt.n	8009590 <__multadd+0x74>
 800955c:	6861      	ldr	r1, [r4, #4]
 800955e:	4638      	mov	r0, r7
 8009560:	3101      	adds	r1, #1
 8009562:	f7ff ff79 	bl	8009458 <_Balloc>
 8009566:	4680      	mov	r8, r0
 8009568:	b928      	cbnz	r0, 8009576 <__multadd+0x5a>
 800956a:	4602      	mov	r2, r0
 800956c:	4b0c      	ldr	r3, [pc, #48]	@ (80095a0 <__multadd+0x84>)
 800956e:	480d      	ldr	r0, [pc, #52]	@ (80095a4 <__multadd+0x88>)
 8009570:	21ba      	movs	r1, #186	@ 0xba
 8009572:	f000 fcb3 	bl	8009edc <__assert_func>
 8009576:	6922      	ldr	r2, [r4, #16]
 8009578:	3202      	adds	r2, #2
 800957a:	f104 010c 	add.w	r1, r4, #12
 800957e:	0092      	lsls	r2, r2, #2
 8009580:	300c      	adds	r0, #12
 8009582:	f000 fc9d 	bl	8009ec0 <memcpy>
 8009586:	4621      	mov	r1, r4
 8009588:	4638      	mov	r0, r7
 800958a:	f7ff ffa5 	bl	80094d8 <_Bfree>
 800958e:	4644      	mov	r4, r8
 8009590:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009594:	3501      	adds	r5, #1
 8009596:	615e      	str	r6, [r3, #20]
 8009598:	6125      	str	r5, [r4, #16]
 800959a:	4620      	mov	r0, r4
 800959c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a0:	0800b134 	.word	0x0800b134
 80095a4:	0800b156 	.word	0x0800b156

080095a8 <__hi0bits>:
 80095a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80095ac:	4603      	mov	r3, r0
 80095ae:	bf36      	itet	cc
 80095b0:	0403      	lslcc	r3, r0, #16
 80095b2:	2000      	movcs	r0, #0
 80095b4:	2010      	movcc	r0, #16
 80095b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095ba:	bf3c      	itt	cc
 80095bc:	021b      	lslcc	r3, r3, #8
 80095be:	3008      	addcc	r0, #8
 80095c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095c4:	bf3c      	itt	cc
 80095c6:	011b      	lslcc	r3, r3, #4
 80095c8:	3004      	addcc	r0, #4
 80095ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095ce:	bf3c      	itt	cc
 80095d0:	009b      	lslcc	r3, r3, #2
 80095d2:	3002      	addcc	r0, #2
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	db05      	blt.n	80095e4 <__hi0bits+0x3c>
 80095d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80095dc:	f100 0001 	add.w	r0, r0, #1
 80095e0:	bf08      	it	eq
 80095e2:	2020      	moveq	r0, #32
 80095e4:	4770      	bx	lr

080095e6 <__lo0bits>:
 80095e6:	6803      	ldr	r3, [r0, #0]
 80095e8:	4602      	mov	r2, r0
 80095ea:	f013 0007 	ands.w	r0, r3, #7
 80095ee:	d00b      	beq.n	8009608 <__lo0bits+0x22>
 80095f0:	07d9      	lsls	r1, r3, #31
 80095f2:	d421      	bmi.n	8009638 <__lo0bits+0x52>
 80095f4:	0798      	lsls	r0, r3, #30
 80095f6:	bf49      	itett	mi
 80095f8:	085b      	lsrmi	r3, r3, #1
 80095fa:	089b      	lsrpl	r3, r3, #2
 80095fc:	2001      	movmi	r0, #1
 80095fe:	6013      	strmi	r3, [r2, #0]
 8009600:	bf5c      	itt	pl
 8009602:	6013      	strpl	r3, [r2, #0]
 8009604:	2002      	movpl	r0, #2
 8009606:	4770      	bx	lr
 8009608:	b299      	uxth	r1, r3
 800960a:	b909      	cbnz	r1, 8009610 <__lo0bits+0x2a>
 800960c:	0c1b      	lsrs	r3, r3, #16
 800960e:	2010      	movs	r0, #16
 8009610:	b2d9      	uxtb	r1, r3
 8009612:	b909      	cbnz	r1, 8009618 <__lo0bits+0x32>
 8009614:	3008      	adds	r0, #8
 8009616:	0a1b      	lsrs	r3, r3, #8
 8009618:	0719      	lsls	r1, r3, #28
 800961a:	bf04      	itt	eq
 800961c:	091b      	lsreq	r3, r3, #4
 800961e:	3004      	addeq	r0, #4
 8009620:	0799      	lsls	r1, r3, #30
 8009622:	bf04      	itt	eq
 8009624:	089b      	lsreq	r3, r3, #2
 8009626:	3002      	addeq	r0, #2
 8009628:	07d9      	lsls	r1, r3, #31
 800962a:	d403      	bmi.n	8009634 <__lo0bits+0x4e>
 800962c:	085b      	lsrs	r3, r3, #1
 800962e:	f100 0001 	add.w	r0, r0, #1
 8009632:	d003      	beq.n	800963c <__lo0bits+0x56>
 8009634:	6013      	str	r3, [r2, #0]
 8009636:	4770      	bx	lr
 8009638:	2000      	movs	r0, #0
 800963a:	4770      	bx	lr
 800963c:	2020      	movs	r0, #32
 800963e:	4770      	bx	lr

08009640 <__i2b>:
 8009640:	b510      	push	{r4, lr}
 8009642:	460c      	mov	r4, r1
 8009644:	2101      	movs	r1, #1
 8009646:	f7ff ff07 	bl	8009458 <_Balloc>
 800964a:	4602      	mov	r2, r0
 800964c:	b928      	cbnz	r0, 800965a <__i2b+0x1a>
 800964e:	4b05      	ldr	r3, [pc, #20]	@ (8009664 <__i2b+0x24>)
 8009650:	4805      	ldr	r0, [pc, #20]	@ (8009668 <__i2b+0x28>)
 8009652:	f240 1145 	movw	r1, #325	@ 0x145
 8009656:	f000 fc41 	bl	8009edc <__assert_func>
 800965a:	2301      	movs	r3, #1
 800965c:	6144      	str	r4, [r0, #20]
 800965e:	6103      	str	r3, [r0, #16]
 8009660:	bd10      	pop	{r4, pc}
 8009662:	bf00      	nop
 8009664:	0800b134 	.word	0x0800b134
 8009668:	0800b156 	.word	0x0800b156

0800966c <__multiply>:
 800966c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009670:	4614      	mov	r4, r2
 8009672:	690a      	ldr	r2, [r1, #16]
 8009674:	6923      	ldr	r3, [r4, #16]
 8009676:	429a      	cmp	r2, r3
 8009678:	bfa8      	it	ge
 800967a:	4623      	movge	r3, r4
 800967c:	460f      	mov	r7, r1
 800967e:	bfa4      	itt	ge
 8009680:	460c      	movge	r4, r1
 8009682:	461f      	movge	r7, r3
 8009684:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009688:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800968c:	68a3      	ldr	r3, [r4, #8]
 800968e:	6861      	ldr	r1, [r4, #4]
 8009690:	eb0a 0609 	add.w	r6, sl, r9
 8009694:	42b3      	cmp	r3, r6
 8009696:	b085      	sub	sp, #20
 8009698:	bfb8      	it	lt
 800969a:	3101      	addlt	r1, #1
 800969c:	f7ff fedc 	bl	8009458 <_Balloc>
 80096a0:	b930      	cbnz	r0, 80096b0 <__multiply+0x44>
 80096a2:	4602      	mov	r2, r0
 80096a4:	4b44      	ldr	r3, [pc, #272]	@ (80097b8 <__multiply+0x14c>)
 80096a6:	4845      	ldr	r0, [pc, #276]	@ (80097bc <__multiply+0x150>)
 80096a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80096ac:	f000 fc16 	bl	8009edc <__assert_func>
 80096b0:	f100 0514 	add.w	r5, r0, #20
 80096b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80096b8:	462b      	mov	r3, r5
 80096ba:	2200      	movs	r2, #0
 80096bc:	4543      	cmp	r3, r8
 80096be:	d321      	bcc.n	8009704 <__multiply+0x98>
 80096c0:	f107 0114 	add.w	r1, r7, #20
 80096c4:	f104 0214 	add.w	r2, r4, #20
 80096c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80096cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80096d0:	9302      	str	r3, [sp, #8]
 80096d2:	1b13      	subs	r3, r2, r4
 80096d4:	3b15      	subs	r3, #21
 80096d6:	f023 0303 	bic.w	r3, r3, #3
 80096da:	3304      	adds	r3, #4
 80096dc:	f104 0715 	add.w	r7, r4, #21
 80096e0:	42ba      	cmp	r2, r7
 80096e2:	bf38      	it	cc
 80096e4:	2304      	movcc	r3, #4
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	9b02      	ldr	r3, [sp, #8]
 80096ea:	9103      	str	r1, [sp, #12]
 80096ec:	428b      	cmp	r3, r1
 80096ee:	d80c      	bhi.n	800970a <__multiply+0x9e>
 80096f0:	2e00      	cmp	r6, #0
 80096f2:	dd03      	ble.n	80096fc <__multiply+0x90>
 80096f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d05b      	beq.n	80097b4 <__multiply+0x148>
 80096fc:	6106      	str	r6, [r0, #16]
 80096fe:	b005      	add	sp, #20
 8009700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009704:	f843 2b04 	str.w	r2, [r3], #4
 8009708:	e7d8      	b.n	80096bc <__multiply+0x50>
 800970a:	f8b1 a000 	ldrh.w	sl, [r1]
 800970e:	f1ba 0f00 	cmp.w	sl, #0
 8009712:	d024      	beq.n	800975e <__multiply+0xf2>
 8009714:	f104 0e14 	add.w	lr, r4, #20
 8009718:	46a9      	mov	r9, r5
 800971a:	f04f 0c00 	mov.w	ip, #0
 800971e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009722:	f8d9 3000 	ldr.w	r3, [r9]
 8009726:	fa1f fb87 	uxth.w	fp, r7
 800972a:	b29b      	uxth	r3, r3
 800972c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009730:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009734:	f8d9 7000 	ldr.w	r7, [r9]
 8009738:	4463      	add	r3, ip
 800973a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800973e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009742:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009746:	b29b      	uxth	r3, r3
 8009748:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800974c:	4572      	cmp	r2, lr
 800974e:	f849 3b04 	str.w	r3, [r9], #4
 8009752:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009756:	d8e2      	bhi.n	800971e <__multiply+0xb2>
 8009758:	9b01      	ldr	r3, [sp, #4]
 800975a:	f845 c003 	str.w	ip, [r5, r3]
 800975e:	9b03      	ldr	r3, [sp, #12]
 8009760:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009764:	3104      	adds	r1, #4
 8009766:	f1b9 0f00 	cmp.w	r9, #0
 800976a:	d021      	beq.n	80097b0 <__multiply+0x144>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	f104 0c14 	add.w	ip, r4, #20
 8009772:	46ae      	mov	lr, r5
 8009774:	f04f 0a00 	mov.w	sl, #0
 8009778:	f8bc b000 	ldrh.w	fp, [ip]
 800977c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009780:	fb09 770b 	mla	r7, r9, fp, r7
 8009784:	4457      	add	r7, sl
 8009786:	b29b      	uxth	r3, r3
 8009788:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800978c:	f84e 3b04 	str.w	r3, [lr], #4
 8009790:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009794:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009798:	f8be 3000 	ldrh.w	r3, [lr]
 800979c:	fb09 330a 	mla	r3, r9, sl, r3
 80097a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80097a4:	4562      	cmp	r2, ip
 80097a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097aa:	d8e5      	bhi.n	8009778 <__multiply+0x10c>
 80097ac:	9f01      	ldr	r7, [sp, #4]
 80097ae:	51eb      	str	r3, [r5, r7]
 80097b0:	3504      	adds	r5, #4
 80097b2:	e799      	b.n	80096e8 <__multiply+0x7c>
 80097b4:	3e01      	subs	r6, #1
 80097b6:	e79b      	b.n	80096f0 <__multiply+0x84>
 80097b8:	0800b134 	.word	0x0800b134
 80097bc:	0800b156 	.word	0x0800b156

080097c0 <__pow5mult>:
 80097c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097c4:	4615      	mov	r5, r2
 80097c6:	f012 0203 	ands.w	r2, r2, #3
 80097ca:	4607      	mov	r7, r0
 80097cc:	460e      	mov	r6, r1
 80097ce:	d007      	beq.n	80097e0 <__pow5mult+0x20>
 80097d0:	4c25      	ldr	r4, [pc, #148]	@ (8009868 <__pow5mult+0xa8>)
 80097d2:	3a01      	subs	r2, #1
 80097d4:	2300      	movs	r3, #0
 80097d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097da:	f7ff fe9f 	bl	800951c <__multadd>
 80097de:	4606      	mov	r6, r0
 80097e0:	10ad      	asrs	r5, r5, #2
 80097e2:	d03d      	beq.n	8009860 <__pow5mult+0xa0>
 80097e4:	69fc      	ldr	r4, [r7, #28]
 80097e6:	b97c      	cbnz	r4, 8009808 <__pow5mult+0x48>
 80097e8:	2010      	movs	r0, #16
 80097ea:	f7ff fcd3 	bl	8009194 <malloc>
 80097ee:	4602      	mov	r2, r0
 80097f0:	61f8      	str	r0, [r7, #28]
 80097f2:	b928      	cbnz	r0, 8009800 <__pow5mult+0x40>
 80097f4:	4b1d      	ldr	r3, [pc, #116]	@ (800986c <__pow5mult+0xac>)
 80097f6:	481e      	ldr	r0, [pc, #120]	@ (8009870 <__pow5mult+0xb0>)
 80097f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80097fc:	f000 fb6e 	bl	8009edc <__assert_func>
 8009800:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009804:	6004      	str	r4, [r0, #0]
 8009806:	60c4      	str	r4, [r0, #12]
 8009808:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800980c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009810:	b94c      	cbnz	r4, 8009826 <__pow5mult+0x66>
 8009812:	f240 2171 	movw	r1, #625	@ 0x271
 8009816:	4638      	mov	r0, r7
 8009818:	f7ff ff12 	bl	8009640 <__i2b>
 800981c:	2300      	movs	r3, #0
 800981e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009822:	4604      	mov	r4, r0
 8009824:	6003      	str	r3, [r0, #0]
 8009826:	f04f 0900 	mov.w	r9, #0
 800982a:	07eb      	lsls	r3, r5, #31
 800982c:	d50a      	bpl.n	8009844 <__pow5mult+0x84>
 800982e:	4631      	mov	r1, r6
 8009830:	4622      	mov	r2, r4
 8009832:	4638      	mov	r0, r7
 8009834:	f7ff ff1a 	bl	800966c <__multiply>
 8009838:	4631      	mov	r1, r6
 800983a:	4680      	mov	r8, r0
 800983c:	4638      	mov	r0, r7
 800983e:	f7ff fe4b 	bl	80094d8 <_Bfree>
 8009842:	4646      	mov	r6, r8
 8009844:	106d      	asrs	r5, r5, #1
 8009846:	d00b      	beq.n	8009860 <__pow5mult+0xa0>
 8009848:	6820      	ldr	r0, [r4, #0]
 800984a:	b938      	cbnz	r0, 800985c <__pow5mult+0x9c>
 800984c:	4622      	mov	r2, r4
 800984e:	4621      	mov	r1, r4
 8009850:	4638      	mov	r0, r7
 8009852:	f7ff ff0b 	bl	800966c <__multiply>
 8009856:	6020      	str	r0, [r4, #0]
 8009858:	f8c0 9000 	str.w	r9, [r0]
 800985c:	4604      	mov	r4, r0
 800985e:	e7e4      	b.n	800982a <__pow5mult+0x6a>
 8009860:	4630      	mov	r0, r6
 8009862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009866:	bf00      	nop
 8009868:	0800b1b0 	.word	0x0800b1b0
 800986c:	0800b0c5 	.word	0x0800b0c5
 8009870:	0800b156 	.word	0x0800b156

08009874 <__lshift>:
 8009874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009878:	460c      	mov	r4, r1
 800987a:	6849      	ldr	r1, [r1, #4]
 800987c:	6923      	ldr	r3, [r4, #16]
 800987e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009882:	68a3      	ldr	r3, [r4, #8]
 8009884:	4607      	mov	r7, r0
 8009886:	4691      	mov	r9, r2
 8009888:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800988c:	f108 0601 	add.w	r6, r8, #1
 8009890:	42b3      	cmp	r3, r6
 8009892:	db0b      	blt.n	80098ac <__lshift+0x38>
 8009894:	4638      	mov	r0, r7
 8009896:	f7ff fddf 	bl	8009458 <_Balloc>
 800989a:	4605      	mov	r5, r0
 800989c:	b948      	cbnz	r0, 80098b2 <__lshift+0x3e>
 800989e:	4602      	mov	r2, r0
 80098a0:	4b28      	ldr	r3, [pc, #160]	@ (8009944 <__lshift+0xd0>)
 80098a2:	4829      	ldr	r0, [pc, #164]	@ (8009948 <__lshift+0xd4>)
 80098a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80098a8:	f000 fb18 	bl	8009edc <__assert_func>
 80098ac:	3101      	adds	r1, #1
 80098ae:	005b      	lsls	r3, r3, #1
 80098b0:	e7ee      	b.n	8009890 <__lshift+0x1c>
 80098b2:	2300      	movs	r3, #0
 80098b4:	f100 0114 	add.w	r1, r0, #20
 80098b8:	f100 0210 	add.w	r2, r0, #16
 80098bc:	4618      	mov	r0, r3
 80098be:	4553      	cmp	r3, sl
 80098c0:	db33      	blt.n	800992a <__lshift+0xb6>
 80098c2:	6920      	ldr	r0, [r4, #16]
 80098c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098c8:	f104 0314 	add.w	r3, r4, #20
 80098cc:	f019 091f 	ands.w	r9, r9, #31
 80098d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80098d8:	d02b      	beq.n	8009932 <__lshift+0xbe>
 80098da:	f1c9 0e20 	rsb	lr, r9, #32
 80098de:	468a      	mov	sl, r1
 80098e0:	2200      	movs	r2, #0
 80098e2:	6818      	ldr	r0, [r3, #0]
 80098e4:	fa00 f009 	lsl.w	r0, r0, r9
 80098e8:	4310      	orrs	r0, r2
 80098ea:	f84a 0b04 	str.w	r0, [sl], #4
 80098ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80098f2:	459c      	cmp	ip, r3
 80098f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80098f8:	d8f3      	bhi.n	80098e2 <__lshift+0x6e>
 80098fa:	ebac 0304 	sub.w	r3, ip, r4
 80098fe:	3b15      	subs	r3, #21
 8009900:	f023 0303 	bic.w	r3, r3, #3
 8009904:	3304      	adds	r3, #4
 8009906:	f104 0015 	add.w	r0, r4, #21
 800990a:	4584      	cmp	ip, r0
 800990c:	bf38      	it	cc
 800990e:	2304      	movcc	r3, #4
 8009910:	50ca      	str	r2, [r1, r3]
 8009912:	b10a      	cbz	r2, 8009918 <__lshift+0xa4>
 8009914:	f108 0602 	add.w	r6, r8, #2
 8009918:	3e01      	subs	r6, #1
 800991a:	4638      	mov	r0, r7
 800991c:	612e      	str	r6, [r5, #16]
 800991e:	4621      	mov	r1, r4
 8009920:	f7ff fdda 	bl	80094d8 <_Bfree>
 8009924:	4628      	mov	r0, r5
 8009926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800992a:	f842 0f04 	str.w	r0, [r2, #4]!
 800992e:	3301      	adds	r3, #1
 8009930:	e7c5      	b.n	80098be <__lshift+0x4a>
 8009932:	3904      	subs	r1, #4
 8009934:	f853 2b04 	ldr.w	r2, [r3], #4
 8009938:	f841 2f04 	str.w	r2, [r1, #4]!
 800993c:	459c      	cmp	ip, r3
 800993e:	d8f9      	bhi.n	8009934 <__lshift+0xc0>
 8009940:	e7ea      	b.n	8009918 <__lshift+0xa4>
 8009942:	bf00      	nop
 8009944:	0800b134 	.word	0x0800b134
 8009948:	0800b156 	.word	0x0800b156

0800994c <__mcmp>:
 800994c:	690a      	ldr	r2, [r1, #16]
 800994e:	4603      	mov	r3, r0
 8009950:	6900      	ldr	r0, [r0, #16]
 8009952:	1a80      	subs	r0, r0, r2
 8009954:	b530      	push	{r4, r5, lr}
 8009956:	d10e      	bne.n	8009976 <__mcmp+0x2a>
 8009958:	3314      	adds	r3, #20
 800995a:	3114      	adds	r1, #20
 800995c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009960:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009964:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009968:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800996c:	4295      	cmp	r5, r2
 800996e:	d003      	beq.n	8009978 <__mcmp+0x2c>
 8009970:	d205      	bcs.n	800997e <__mcmp+0x32>
 8009972:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009976:	bd30      	pop	{r4, r5, pc}
 8009978:	42a3      	cmp	r3, r4
 800997a:	d3f3      	bcc.n	8009964 <__mcmp+0x18>
 800997c:	e7fb      	b.n	8009976 <__mcmp+0x2a>
 800997e:	2001      	movs	r0, #1
 8009980:	e7f9      	b.n	8009976 <__mcmp+0x2a>
	...

08009984 <__mdiff>:
 8009984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009988:	4689      	mov	r9, r1
 800998a:	4606      	mov	r6, r0
 800998c:	4611      	mov	r1, r2
 800998e:	4648      	mov	r0, r9
 8009990:	4614      	mov	r4, r2
 8009992:	f7ff ffdb 	bl	800994c <__mcmp>
 8009996:	1e05      	subs	r5, r0, #0
 8009998:	d112      	bne.n	80099c0 <__mdiff+0x3c>
 800999a:	4629      	mov	r1, r5
 800999c:	4630      	mov	r0, r6
 800999e:	f7ff fd5b 	bl	8009458 <_Balloc>
 80099a2:	4602      	mov	r2, r0
 80099a4:	b928      	cbnz	r0, 80099b2 <__mdiff+0x2e>
 80099a6:	4b3f      	ldr	r3, [pc, #252]	@ (8009aa4 <__mdiff+0x120>)
 80099a8:	f240 2137 	movw	r1, #567	@ 0x237
 80099ac:	483e      	ldr	r0, [pc, #248]	@ (8009aa8 <__mdiff+0x124>)
 80099ae:	f000 fa95 	bl	8009edc <__assert_func>
 80099b2:	2301      	movs	r3, #1
 80099b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099b8:	4610      	mov	r0, r2
 80099ba:	b003      	add	sp, #12
 80099bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c0:	bfbc      	itt	lt
 80099c2:	464b      	movlt	r3, r9
 80099c4:	46a1      	movlt	r9, r4
 80099c6:	4630      	mov	r0, r6
 80099c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80099cc:	bfba      	itte	lt
 80099ce:	461c      	movlt	r4, r3
 80099d0:	2501      	movlt	r5, #1
 80099d2:	2500      	movge	r5, #0
 80099d4:	f7ff fd40 	bl	8009458 <_Balloc>
 80099d8:	4602      	mov	r2, r0
 80099da:	b918      	cbnz	r0, 80099e4 <__mdiff+0x60>
 80099dc:	4b31      	ldr	r3, [pc, #196]	@ (8009aa4 <__mdiff+0x120>)
 80099de:	f240 2145 	movw	r1, #581	@ 0x245
 80099e2:	e7e3      	b.n	80099ac <__mdiff+0x28>
 80099e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80099e8:	6926      	ldr	r6, [r4, #16]
 80099ea:	60c5      	str	r5, [r0, #12]
 80099ec:	f109 0310 	add.w	r3, r9, #16
 80099f0:	f109 0514 	add.w	r5, r9, #20
 80099f4:	f104 0e14 	add.w	lr, r4, #20
 80099f8:	f100 0b14 	add.w	fp, r0, #20
 80099fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009a00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009a04:	9301      	str	r3, [sp, #4]
 8009a06:	46d9      	mov	r9, fp
 8009a08:	f04f 0c00 	mov.w	ip, #0
 8009a0c:	9b01      	ldr	r3, [sp, #4]
 8009a0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009a12:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	fa1f f38a 	uxth.w	r3, sl
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	b283      	uxth	r3, r0
 8009a20:	1acb      	subs	r3, r1, r3
 8009a22:	0c00      	lsrs	r0, r0, #16
 8009a24:	4463      	add	r3, ip
 8009a26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009a2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009a34:	4576      	cmp	r6, lr
 8009a36:	f849 3b04 	str.w	r3, [r9], #4
 8009a3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a3e:	d8e5      	bhi.n	8009a0c <__mdiff+0x88>
 8009a40:	1b33      	subs	r3, r6, r4
 8009a42:	3b15      	subs	r3, #21
 8009a44:	f023 0303 	bic.w	r3, r3, #3
 8009a48:	3415      	adds	r4, #21
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	42a6      	cmp	r6, r4
 8009a4e:	bf38      	it	cc
 8009a50:	2304      	movcc	r3, #4
 8009a52:	441d      	add	r5, r3
 8009a54:	445b      	add	r3, fp
 8009a56:	461e      	mov	r6, r3
 8009a58:	462c      	mov	r4, r5
 8009a5a:	4544      	cmp	r4, r8
 8009a5c:	d30e      	bcc.n	8009a7c <__mdiff+0xf8>
 8009a5e:	f108 0103 	add.w	r1, r8, #3
 8009a62:	1b49      	subs	r1, r1, r5
 8009a64:	f021 0103 	bic.w	r1, r1, #3
 8009a68:	3d03      	subs	r5, #3
 8009a6a:	45a8      	cmp	r8, r5
 8009a6c:	bf38      	it	cc
 8009a6e:	2100      	movcc	r1, #0
 8009a70:	440b      	add	r3, r1
 8009a72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a76:	b191      	cbz	r1, 8009a9e <__mdiff+0x11a>
 8009a78:	6117      	str	r7, [r2, #16]
 8009a7a:	e79d      	b.n	80099b8 <__mdiff+0x34>
 8009a7c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009a80:	46e6      	mov	lr, ip
 8009a82:	0c08      	lsrs	r0, r1, #16
 8009a84:	fa1c fc81 	uxtah	ip, ip, r1
 8009a88:	4471      	add	r1, lr
 8009a8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009a8e:	b289      	uxth	r1, r1
 8009a90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a94:	f846 1b04 	str.w	r1, [r6], #4
 8009a98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a9c:	e7dd      	b.n	8009a5a <__mdiff+0xd6>
 8009a9e:	3f01      	subs	r7, #1
 8009aa0:	e7e7      	b.n	8009a72 <__mdiff+0xee>
 8009aa2:	bf00      	nop
 8009aa4:	0800b134 	.word	0x0800b134
 8009aa8:	0800b156 	.word	0x0800b156

08009aac <__d2b>:
 8009aac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ab0:	460f      	mov	r7, r1
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	ec59 8b10 	vmov	r8, r9, d0
 8009ab8:	4616      	mov	r6, r2
 8009aba:	f7ff fccd 	bl	8009458 <_Balloc>
 8009abe:	4604      	mov	r4, r0
 8009ac0:	b930      	cbnz	r0, 8009ad0 <__d2b+0x24>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	4b23      	ldr	r3, [pc, #140]	@ (8009b54 <__d2b+0xa8>)
 8009ac6:	4824      	ldr	r0, [pc, #144]	@ (8009b58 <__d2b+0xac>)
 8009ac8:	f240 310f 	movw	r1, #783	@ 0x30f
 8009acc:	f000 fa06 	bl	8009edc <__assert_func>
 8009ad0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ad4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ad8:	b10d      	cbz	r5, 8009ade <__d2b+0x32>
 8009ada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ade:	9301      	str	r3, [sp, #4]
 8009ae0:	f1b8 0300 	subs.w	r3, r8, #0
 8009ae4:	d023      	beq.n	8009b2e <__d2b+0x82>
 8009ae6:	4668      	mov	r0, sp
 8009ae8:	9300      	str	r3, [sp, #0]
 8009aea:	f7ff fd7c 	bl	80095e6 <__lo0bits>
 8009aee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009af2:	b1d0      	cbz	r0, 8009b2a <__d2b+0x7e>
 8009af4:	f1c0 0320 	rsb	r3, r0, #32
 8009af8:	fa02 f303 	lsl.w	r3, r2, r3
 8009afc:	430b      	orrs	r3, r1
 8009afe:	40c2      	lsrs	r2, r0
 8009b00:	6163      	str	r3, [r4, #20]
 8009b02:	9201      	str	r2, [sp, #4]
 8009b04:	9b01      	ldr	r3, [sp, #4]
 8009b06:	61a3      	str	r3, [r4, #24]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	bf0c      	ite	eq
 8009b0c:	2201      	moveq	r2, #1
 8009b0e:	2202      	movne	r2, #2
 8009b10:	6122      	str	r2, [r4, #16]
 8009b12:	b1a5      	cbz	r5, 8009b3e <__d2b+0x92>
 8009b14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009b18:	4405      	add	r5, r0
 8009b1a:	603d      	str	r5, [r7, #0]
 8009b1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009b20:	6030      	str	r0, [r6, #0]
 8009b22:	4620      	mov	r0, r4
 8009b24:	b003      	add	sp, #12
 8009b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b2a:	6161      	str	r1, [r4, #20]
 8009b2c:	e7ea      	b.n	8009b04 <__d2b+0x58>
 8009b2e:	a801      	add	r0, sp, #4
 8009b30:	f7ff fd59 	bl	80095e6 <__lo0bits>
 8009b34:	9b01      	ldr	r3, [sp, #4]
 8009b36:	6163      	str	r3, [r4, #20]
 8009b38:	3020      	adds	r0, #32
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	e7e8      	b.n	8009b10 <__d2b+0x64>
 8009b3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009b46:	6038      	str	r0, [r7, #0]
 8009b48:	6918      	ldr	r0, [r3, #16]
 8009b4a:	f7ff fd2d 	bl	80095a8 <__hi0bits>
 8009b4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b52:	e7e5      	b.n	8009b20 <__d2b+0x74>
 8009b54:	0800b134 	.word	0x0800b134
 8009b58:	0800b156 	.word	0x0800b156

08009b5c <__sread>:
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	460c      	mov	r4, r1
 8009b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b64:	f000 f978 	bl	8009e58 <_read_r>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	bfab      	itete	ge
 8009b6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b6e:	89a3      	ldrhlt	r3, [r4, #12]
 8009b70:	181b      	addge	r3, r3, r0
 8009b72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b76:	bfac      	ite	ge
 8009b78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b7a:	81a3      	strhlt	r3, [r4, #12]
 8009b7c:	bd10      	pop	{r4, pc}

08009b7e <__swrite>:
 8009b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b82:	461f      	mov	r7, r3
 8009b84:	898b      	ldrh	r3, [r1, #12]
 8009b86:	05db      	lsls	r3, r3, #23
 8009b88:	4605      	mov	r5, r0
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	4616      	mov	r6, r2
 8009b8e:	d505      	bpl.n	8009b9c <__swrite+0x1e>
 8009b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b94:	2302      	movs	r3, #2
 8009b96:	2200      	movs	r2, #0
 8009b98:	f000 f94c 	bl	8009e34 <_lseek_r>
 8009b9c:	89a3      	ldrh	r3, [r4, #12]
 8009b9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ba2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ba6:	81a3      	strh	r3, [r4, #12]
 8009ba8:	4632      	mov	r2, r6
 8009baa:	463b      	mov	r3, r7
 8009bac:	4628      	mov	r0, r5
 8009bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb2:	f000 b973 	b.w	8009e9c <_write_r>

08009bb6 <__sseek>:
 8009bb6:	b510      	push	{r4, lr}
 8009bb8:	460c      	mov	r4, r1
 8009bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bbe:	f000 f939 	bl	8009e34 <_lseek_r>
 8009bc2:	1c43      	adds	r3, r0, #1
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	bf15      	itete	ne
 8009bc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009bca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009bce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009bd2:	81a3      	strheq	r3, [r4, #12]
 8009bd4:	bf18      	it	ne
 8009bd6:	81a3      	strhne	r3, [r4, #12]
 8009bd8:	bd10      	pop	{r4, pc}

08009bda <__sclose>:
 8009bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bde:	f000 b8f7 	b.w	8009dd0 <_close_r>

08009be2 <__swbuf_r>:
 8009be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be4:	460e      	mov	r6, r1
 8009be6:	4614      	mov	r4, r2
 8009be8:	4605      	mov	r5, r0
 8009bea:	b118      	cbz	r0, 8009bf4 <__swbuf_r+0x12>
 8009bec:	6a03      	ldr	r3, [r0, #32]
 8009bee:	b90b      	cbnz	r3, 8009bf4 <__swbuf_r+0x12>
 8009bf0:	f7fe fac0 	bl	8008174 <__sinit>
 8009bf4:	69a3      	ldr	r3, [r4, #24]
 8009bf6:	60a3      	str	r3, [r4, #8]
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	071a      	lsls	r2, r3, #28
 8009bfc:	d501      	bpl.n	8009c02 <__swbuf_r+0x20>
 8009bfe:	6923      	ldr	r3, [r4, #16]
 8009c00:	b943      	cbnz	r3, 8009c14 <__swbuf_r+0x32>
 8009c02:	4621      	mov	r1, r4
 8009c04:	4628      	mov	r0, r5
 8009c06:	f000 f82b 	bl	8009c60 <__swsetup_r>
 8009c0a:	b118      	cbz	r0, 8009c14 <__swbuf_r+0x32>
 8009c0c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009c10:	4638      	mov	r0, r7
 8009c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	6922      	ldr	r2, [r4, #16]
 8009c18:	1a98      	subs	r0, r3, r2
 8009c1a:	6963      	ldr	r3, [r4, #20]
 8009c1c:	b2f6      	uxtb	r6, r6
 8009c1e:	4283      	cmp	r3, r0
 8009c20:	4637      	mov	r7, r6
 8009c22:	dc05      	bgt.n	8009c30 <__swbuf_r+0x4e>
 8009c24:	4621      	mov	r1, r4
 8009c26:	4628      	mov	r0, r5
 8009c28:	f7ff fbe2 	bl	80093f0 <_fflush_r>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d1ed      	bne.n	8009c0c <__swbuf_r+0x2a>
 8009c30:	68a3      	ldr	r3, [r4, #8]
 8009c32:	3b01      	subs	r3, #1
 8009c34:	60a3      	str	r3, [r4, #8]
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	1c5a      	adds	r2, r3, #1
 8009c3a:	6022      	str	r2, [r4, #0]
 8009c3c:	701e      	strb	r6, [r3, #0]
 8009c3e:	6962      	ldr	r2, [r4, #20]
 8009c40:	1c43      	adds	r3, r0, #1
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d004      	beq.n	8009c50 <__swbuf_r+0x6e>
 8009c46:	89a3      	ldrh	r3, [r4, #12]
 8009c48:	07db      	lsls	r3, r3, #31
 8009c4a:	d5e1      	bpl.n	8009c10 <__swbuf_r+0x2e>
 8009c4c:	2e0a      	cmp	r6, #10
 8009c4e:	d1df      	bne.n	8009c10 <__swbuf_r+0x2e>
 8009c50:	4621      	mov	r1, r4
 8009c52:	4628      	mov	r0, r5
 8009c54:	f7ff fbcc 	bl	80093f0 <_fflush_r>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d0d9      	beq.n	8009c10 <__swbuf_r+0x2e>
 8009c5c:	e7d6      	b.n	8009c0c <__swbuf_r+0x2a>
	...

08009c60 <__swsetup_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4b29      	ldr	r3, [pc, #164]	@ (8009d08 <__swsetup_r+0xa8>)
 8009c64:	4605      	mov	r5, r0
 8009c66:	6818      	ldr	r0, [r3, #0]
 8009c68:	460c      	mov	r4, r1
 8009c6a:	b118      	cbz	r0, 8009c74 <__swsetup_r+0x14>
 8009c6c:	6a03      	ldr	r3, [r0, #32]
 8009c6e:	b90b      	cbnz	r3, 8009c74 <__swsetup_r+0x14>
 8009c70:	f7fe fa80 	bl	8008174 <__sinit>
 8009c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c78:	0719      	lsls	r1, r3, #28
 8009c7a:	d422      	bmi.n	8009cc2 <__swsetup_r+0x62>
 8009c7c:	06da      	lsls	r2, r3, #27
 8009c7e:	d407      	bmi.n	8009c90 <__swsetup_r+0x30>
 8009c80:	2209      	movs	r2, #9
 8009c82:	602a      	str	r2, [r5, #0]
 8009c84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c88:	81a3      	strh	r3, [r4, #12]
 8009c8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c8e:	e033      	b.n	8009cf8 <__swsetup_r+0x98>
 8009c90:	0758      	lsls	r0, r3, #29
 8009c92:	d512      	bpl.n	8009cba <__swsetup_r+0x5a>
 8009c94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c96:	b141      	cbz	r1, 8009caa <__swsetup_r+0x4a>
 8009c98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c9c:	4299      	cmp	r1, r3
 8009c9e:	d002      	beq.n	8009ca6 <__swsetup_r+0x46>
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	f000 f94d 	bl	8009f40 <_free_r>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009cb0:	81a3      	strh	r3, [r4, #12]
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	6063      	str	r3, [r4, #4]
 8009cb6:	6923      	ldr	r3, [r4, #16]
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	f043 0308 	orr.w	r3, r3, #8
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	6923      	ldr	r3, [r4, #16]
 8009cc4:	b94b      	cbnz	r3, 8009cda <__swsetup_r+0x7a>
 8009cc6:	89a3      	ldrh	r3, [r4, #12]
 8009cc8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cd0:	d003      	beq.n	8009cda <__swsetup_r+0x7a>
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	f000 f83f 	bl	8009d58 <__smakebuf_r>
 8009cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cde:	f013 0201 	ands.w	r2, r3, #1
 8009ce2:	d00a      	beq.n	8009cfa <__swsetup_r+0x9a>
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	60a2      	str	r2, [r4, #8]
 8009ce8:	6962      	ldr	r2, [r4, #20]
 8009cea:	4252      	negs	r2, r2
 8009cec:	61a2      	str	r2, [r4, #24]
 8009cee:	6922      	ldr	r2, [r4, #16]
 8009cf0:	b942      	cbnz	r2, 8009d04 <__swsetup_r+0xa4>
 8009cf2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009cf6:	d1c5      	bne.n	8009c84 <__swsetup_r+0x24>
 8009cf8:	bd38      	pop	{r3, r4, r5, pc}
 8009cfa:	0799      	lsls	r1, r3, #30
 8009cfc:	bf58      	it	pl
 8009cfe:	6962      	ldrpl	r2, [r4, #20]
 8009d00:	60a2      	str	r2, [r4, #8]
 8009d02:	e7f4      	b.n	8009cee <__swsetup_r+0x8e>
 8009d04:	2000      	movs	r0, #0
 8009d06:	e7f7      	b.n	8009cf8 <__swsetup_r+0x98>
 8009d08:	2000001c 	.word	0x2000001c

08009d0c <__swhatbuf_r>:
 8009d0c:	b570      	push	{r4, r5, r6, lr}
 8009d0e:	460c      	mov	r4, r1
 8009d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d14:	2900      	cmp	r1, #0
 8009d16:	b096      	sub	sp, #88	@ 0x58
 8009d18:	4615      	mov	r5, r2
 8009d1a:	461e      	mov	r6, r3
 8009d1c:	da0d      	bge.n	8009d3a <__swhatbuf_r+0x2e>
 8009d1e:	89a3      	ldrh	r3, [r4, #12]
 8009d20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d24:	f04f 0100 	mov.w	r1, #0
 8009d28:	bf14      	ite	ne
 8009d2a:	2340      	movne	r3, #64	@ 0x40
 8009d2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d30:	2000      	movs	r0, #0
 8009d32:	6031      	str	r1, [r6, #0]
 8009d34:	602b      	str	r3, [r5, #0]
 8009d36:	b016      	add	sp, #88	@ 0x58
 8009d38:	bd70      	pop	{r4, r5, r6, pc}
 8009d3a:	466a      	mov	r2, sp
 8009d3c:	f000 f858 	bl	8009df0 <_fstat_r>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	dbec      	blt.n	8009d1e <__swhatbuf_r+0x12>
 8009d44:	9901      	ldr	r1, [sp, #4]
 8009d46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d4e:	4259      	negs	r1, r3
 8009d50:	4159      	adcs	r1, r3
 8009d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d56:	e7eb      	b.n	8009d30 <__swhatbuf_r+0x24>

08009d58 <__smakebuf_r>:
 8009d58:	898b      	ldrh	r3, [r1, #12]
 8009d5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d5c:	079d      	lsls	r5, r3, #30
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460c      	mov	r4, r1
 8009d62:	d507      	bpl.n	8009d74 <__smakebuf_r+0x1c>
 8009d64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	6123      	str	r3, [r4, #16]
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	6163      	str	r3, [r4, #20]
 8009d70:	b003      	add	sp, #12
 8009d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d74:	ab01      	add	r3, sp, #4
 8009d76:	466a      	mov	r2, sp
 8009d78:	f7ff ffc8 	bl	8009d0c <__swhatbuf_r>
 8009d7c:	9f00      	ldr	r7, [sp, #0]
 8009d7e:	4605      	mov	r5, r0
 8009d80:	4639      	mov	r1, r7
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7ff fa30 	bl	80091e8 <_malloc_r>
 8009d88:	b948      	cbnz	r0, 8009d9e <__smakebuf_r+0x46>
 8009d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8e:	059a      	lsls	r2, r3, #22
 8009d90:	d4ee      	bmi.n	8009d70 <__smakebuf_r+0x18>
 8009d92:	f023 0303 	bic.w	r3, r3, #3
 8009d96:	f043 0302 	orr.w	r3, r3, #2
 8009d9a:	81a3      	strh	r3, [r4, #12]
 8009d9c:	e7e2      	b.n	8009d64 <__smakebuf_r+0xc>
 8009d9e:	89a3      	ldrh	r3, [r4, #12]
 8009da0:	6020      	str	r0, [r4, #0]
 8009da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009da6:	81a3      	strh	r3, [r4, #12]
 8009da8:	9b01      	ldr	r3, [sp, #4]
 8009daa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009dae:	b15b      	cbz	r3, 8009dc8 <__smakebuf_r+0x70>
 8009db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009db4:	4630      	mov	r0, r6
 8009db6:	f000 f82d 	bl	8009e14 <_isatty_r>
 8009dba:	b128      	cbz	r0, 8009dc8 <__smakebuf_r+0x70>
 8009dbc:	89a3      	ldrh	r3, [r4, #12]
 8009dbe:	f023 0303 	bic.w	r3, r3, #3
 8009dc2:	f043 0301 	orr.w	r3, r3, #1
 8009dc6:	81a3      	strh	r3, [r4, #12]
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	431d      	orrs	r5, r3
 8009dcc:	81a5      	strh	r5, [r4, #12]
 8009dce:	e7cf      	b.n	8009d70 <__smakebuf_r+0x18>

08009dd0 <_close_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4d06      	ldr	r5, [pc, #24]	@ (8009dec <_close_r+0x1c>)
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	4608      	mov	r0, r1
 8009dda:	602b      	str	r3, [r5, #0]
 8009ddc:	f7fa fbe3 	bl	80045a6 <_close>
 8009de0:	1c43      	adds	r3, r0, #1
 8009de2:	d102      	bne.n	8009dea <_close_r+0x1a>
 8009de4:	682b      	ldr	r3, [r5, #0]
 8009de6:	b103      	cbz	r3, 8009dea <_close_r+0x1a>
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	bd38      	pop	{r3, r4, r5, pc}
 8009dec:	20002fd0 	.word	0x20002fd0

08009df0 <_fstat_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4d07      	ldr	r5, [pc, #28]	@ (8009e10 <_fstat_r+0x20>)
 8009df4:	2300      	movs	r3, #0
 8009df6:	4604      	mov	r4, r0
 8009df8:	4608      	mov	r0, r1
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	602b      	str	r3, [r5, #0]
 8009dfe:	f7fa fbde 	bl	80045be <_fstat>
 8009e02:	1c43      	adds	r3, r0, #1
 8009e04:	d102      	bne.n	8009e0c <_fstat_r+0x1c>
 8009e06:	682b      	ldr	r3, [r5, #0]
 8009e08:	b103      	cbz	r3, 8009e0c <_fstat_r+0x1c>
 8009e0a:	6023      	str	r3, [r4, #0]
 8009e0c:	bd38      	pop	{r3, r4, r5, pc}
 8009e0e:	bf00      	nop
 8009e10:	20002fd0 	.word	0x20002fd0

08009e14 <_isatty_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4d06      	ldr	r5, [pc, #24]	@ (8009e30 <_isatty_r+0x1c>)
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	602b      	str	r3, [r5, #0]
 8009e20:	f7fa fbdd 	bl	80045de <_isatty>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_isatty_r+0x1a>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_isatty_r+0x1a>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	20002fd0 	.word	0x20002fd0

08009e34 <_lseek_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4d07      	ldr	r5, [pc, #28]	@ (8009e54 <_lseek_r+0x20>)
 8009e38:	4604      	mov	r4, r0
 8009e3a:	4608      	mov	r0, r1
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	2200      	movs	r2, #0
 8009e40:	602a      	str	r2, [r5, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	f7fa fbd6 	bl	80045f4 <_lseek>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_lseek_r+0x1e>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_lseek_r+0x1e>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	20002fd0 	.word	0x20002fd0

08009e58 <_read_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d07      	ldr	r5, [pc, #28]	@ (8009e78 <_read_r+0x20>)
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	4608      	mov	r0, r1
 8009e60:	4611      	mov	r1, r2
 8009e62:	2200      	movs	r2, #0
 8009e64:	602a      	str	r2, [r5, #0]
 8009e66:	461a      	mov	r2, r3
 8009e68:	f7fa fb80 	bl	800456c <_read>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	d102      	bne.n	8009e76 <_read_r+0x1e>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	b103      	cbz	r3, 8009e76 <_read_r+0x1e>
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	bd38      	pop	{r3, r4, r5, pc}
 8009e78:	20002fd0 	.word	0x20002fd0

08009e7c <_sbrk_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4d06      	ldr	r5, [pc, #24]	@ (8009e98 <_sbrk_r+0x1c>)
 8009e80:	2300      	movs	r3, #0
 8009e82:	4604      	mov	r4, r0
 8009e84:	4608      	mov	r0, r1
 8009e86:	602b      	str	r3, [r5, #0]
 8009e88:	f7fa fbc2 	bl	8004610 <_sbrk>
 8009e8c:	1c43      	adds	r3, r0, #1
 8009e8e:	d102      	bne.n	8009e96 <_sbrk_r+0x1a>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	b103      	cbz	r3, 8009e96 <_sbrk_r+0x1a>
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	20002fd0 	.word	0x20002fd0

08009e9c <_write_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4d07      	ldr	r5, [pc, #28]	@ (8009ebc <_write_r+0x20>)
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	4608      	mov	r0, r1
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	602a      	str	r2, [r5, #0]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	f7fa f92a 	bl	8004104 <_write>
 8009eb0:	1c43      	adds	r3, r0, #1
 8009eb2:	d102      	bne.n	8009eba <_write_r+0x1e>
 8009eb4:	682b      	ldr	r3, [r5, #0]
 8009eb6:	b103      	cbz	r3, 8009eba <_write_r+0x1e>
 8009eb8:	6023      	str	r3, [r4, #0]
 8009eba:	bd38      	pop	{r3, r4, r5, pc}
 8009ebc:	20002fd0 	.word	0x20002fd0

08009ec0 <memcpy>:
 8009ec0:	440a      	add	r2, r1
 8009ec2:	4291      	cmp	r1, r2
 8009ec4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009ec8:	d100      	bne.n	8009ecc <memcpy+0xc>
 8009eca:	4770      	bx	lr
 8009ecc:	b510      	push	{r4, lr}
 8009ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ed6:	4291      	cmp	r1, r2
 8009ed8:	d1f9      	bne.n	8009ece <memcpy+0xe>
 8009eda:	bd10      	pop	{r4, pc}

08009edc <__assert_func>:
 8009edc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ede:	4614      	mov	r4, r2
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	4b09      	ldr	r3, [pc, #36]	@ (8009f08 <__assert_func+0x2c>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	68d8      	ldr	r0, [r3, #12]
 8009eea:	b954      	cbnz	r4, 8009f02 <__assert_func+0x26>
 8009eec:	4b07      	ldr	r3, [pc, #28]	@ (8009f0c <__assert_func+0x30>)
 8009eee:	461c      	mov	r4, r3
 8009ef0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ef4:	9100      	str	r1, [sp, #0]
 8009ef6:	462b      	mov	r3, r5
 8009ef8:	4905      	ldr	r1, [pc, #20]	@ (8009f10 <__assert_func+0x34>)
 8009efa:	f000 f87d 	bl	8009ff8 <fiprintf>
 8009efe:	f000 f89a 	bl	800a036 <abort>
 8009f02:	4b04      	ldr	r3, [pc, #16]	@ (8009f14 <__assert_func+0x38>)
 8009f04:	e7f4      	b.n	8009ef0 <__assert_func+0x14>
 8009f06:	bf00      	nop
 8009f08:	2000001c 	.word	0x2000001c
 8009f0c:	0800b3f6 	.word	0x0800b3f6
 8009f10:	0800b3c8 	.word	0x0800b3c8
 8009f14:	0800b3bb 	.word	0x0800b3bb

08009f18 <_calloc_r>:
 8009f18:	b570      	push	{r4, r5, r6, lr}
 8009f1a:	fba1 5402 	umull	r5, r4, r1, r2
 8009f1e:	b93c      	cbnz	r4, 8009f30 <_calloc_r+0x18>
 8009f20:	4629      	mov	r1, r5
 8009f22:	f7ff f961 	bl	80091e8 <_malloc_r>
 8009f26:	4606      	mov	r6, r0
 8009f28:	b928      	cbnz	r0, 8009f36 <_calloc_r+0x1e>
 8009f2a:	2600      	movs	r6, #0
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	bd70      	pop	{r4, r5, r6, pc}
 8009f30:	220c      	movs	r2, #12
 8009f32:	6002      	str	r2, [r0, #0]
 8009f34:	e7f9      	b.n	8009f2a <_calloc_r+0x12>
 8009f36:	462a      	mov	r2, r5
 8009f38:	4621      	mov	r1, r4
 8009f3a:	f7fe f963 	bl	8008204 <memset>
 8009f3e:	e7f5      	b.n	8009f2c <_calloc_r+0x14>

08009f40 <_free_r>:
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	4605      	mov	r5, r0
 8009f44:	2900      	cmp	r1, #0
 8009f46:	d041      	beq.n	8009fcc <_free_r+0x8c>
 8009f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f4c:	1f0c      	subs	r4, r1, #4
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	bfb8      	it	lt
 8009f52:	18e4      	addlt	r4, r4, r3
 8009f54:	f7ff fa74 	bl	8009440 <__malloc_lock>
 8009f58:	4a1d      	ldr	r2, [pc, #116]	@ (8009fd0 <_free_r+0x90>)
 8009f5a:	6813      	ldr	r3, [r2, #0]
 8009f5c:	b933      	cbnz	r3, 8009f6c <_free_r+0x2c>
 8009f5e:	6063      	str	r3, [r4, #4]
 8009f60:	6014      	str	r4, [r2, #0]
 8009f62:	4628      	mov	r0, r5
 8009f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f68:	f7ff ba70 	b.w	800944c <__malloc_unlock>
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	d908      	bls.n	8009f82 <_free_r+0x42>
 8009f70:	6820      	ldr	r0, [r4, #0]
 8009f72:	1821      	adds	r1, r4, r0
 8009f74:	428b      	cmp	r3, r1
 8009f76:	bf01      	itttt	eq
 8009f78:	6819      	ldreq	r1, [r3, #0]
 8009f7a:	685b      	ldreq	r3, [r3, #4]
 8009f7c:	1809      	addeq	r1, r1, r0
 8009f7e:	6021      	streq	r1, [r4, #0]
 8009f80:	e7ed      	b.n	8009f5e <_free_r+0x1e>
 8009f82:	461a      	mov	r2, r3
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	b10b      	cbz	r3, 8009f8c <_free_r+0x4c>
 8009f88:	42a3      	cmp	r3, r4
 8009f8a:	d9fa      	bls.n	8009f82 <_free_r+0x42>
 8009f8c:	6811      	ldr	r1, [r2, #0]
 8009f8e:	1850      	adds	r0, r2, r1
 8009f90:	42a0      	cmp	r0, r4
 8009f92:	d10b      	bne.n	8009fac <_free_r+0x6c>
 8009f94:	6820      	ldr	r0, [r4, #0]
 8009f96:	4401      	add	r1, r0
 8009f98:	1850      	adds	r0, r2, r1
 8009f9a:	4283      	cmp	r3, r0
 8009f9c:	6011      	str	r1, [r2, #0]
 8009f9e:	d1e0      	bne.n	8009f62 <_free_r+0x22>
 8009fa0:	6818      	ldr	r0, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	6053      	str	r3, [r2, #4]
 8009fa6:	4408      	add	r0, r1
 8009fa8:	6010      	str	r0, [r2, #0]
 8009faa:	e7da      	b.n	8009f62 <_free_r+0x22>
 8009fac:	d902      	bls.n	8009fb4 <_free_r+0x74>
 8009fae:	230c      	movs	r3, #12
 8009fb0:	602b      	str	r3, [r5, #0]
 8009fb2:	e7d6      	b.n	8009f62 <_free_r+0x22>
 8009fb4:	6820      	ldr	r0, [r4, #0]
 8009fb6:	1821      	adds	r1, r4, r0
 8009fb8:	428b      	cmp	r3, r1
 8009fba:	bf04      	itt	eq
 8009fbc:	6819      	ldreq	r1, [r3, #0]
 8009fbe:	685b      	ldreq	r3, [r3, #4]
 8009fc0:	6063      	str	r3, [r4, #4]
 8009fc2:	bf04      	itt	eq
 8009fc4:	1809      	addeq	r1, r1, r0
 8009fc6:	6021      	streq	r1, [r4, #0]
 8009fc8:	6054      	str	r4, [r2, #4]
 8009fca:	e7ca      	b.n	8009f62 <_free_r+0x22>
 8009fcc:	bd38      	pop	{r3, r4, r5, pc}
 8009fce:	bf00      	nop
 8009fd0:	20002fcc 	.word	0x20002fcc

08009fd4 <__ascii_mbtowc>:
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	b901      	cbnz	r1, 8009fda <__ascii_mbtowc+0x6>
 8009fd8:	a901      	add	r1, sp, #4
 8009fda:	b142      	cbz	r2, 8009fee <__ascii_mbtowc+0x1a>
 8009fdc:	b14b      	cbz	r3, 8009ff2 <__ascii_mbtowc+0x1e>
 8009fde:	7813      	ldrb	r3, [r2, #0]
 8009fe0:	600b      	str	r3, [r1, #0]
 8009fe2:	7812      	ldrb	r2, [r2, #0]
 8009fe4:	1e10      	subs	r0, r2, #0
 8009fe6:	bf18      	it	ne
 8009fe8:	2001      	movne	r0, #1
 8009fea:	b002      	add	sp, #8
 8009fec:	4770      	bx	lr
 8009fee:	4610      	mov	r0, r2
 8009ff0:	e7fb      	b.n	8009fea <__ascii_mbtowc+0x16>
 8009ff2:	f06f 0001 	mvn.w	r0, #1
 8009ff6:	e7f8      	b.n	8009fea <__ascii_mbtowc+0x16>

08009ff8 <fiprintf>:
 8009ff8:	b40e      	push	{r1, r2, r3}
 8009ffa:	b503      	push	{r0, r1, lr}
 8009ffc:	4601      	mov	r1, r0
 8009ffe:	ab03      	add	r3, sp, #12
 800a000:	4805      	ldr	r0, [pc, #20]	@ (800a018 <fiprintf+0x20>)
 800a002:	f853 2b04 	ldr.w	r2, [r3], #4
 800a006:	6800      	ldr	r0, [r0, #0]
 800a008:	9301      	str	r3, [sp, #4]
 800a00a:	f7fe ffab 	bl	8008f64 <_vfiprintf_r>
 800a00e:	b002      	add	sp, #8
 800a010:	f85d eb04 	ldr.w	lr, [sp], #4
 800a014:	b003      	add	sp, #12
 800a016:	4770      	bx	lr
 800a018:	2000001c 	.word	0x2000001c

0800a01c <__ascii_wctomb>:
 800a01c:	4603      	mov	r3, r0
 800a01e:	4608      	mov	r0, r1
 800a020:	b141      	cbz	r1, 800a034 <__ascii_wctomb+0x18>
 800a022:	2aff      	cmp	r2, #255	@ 0xff
 800a024:	d904      	bls.n	800a030 <__ascii_wctomb+0x14>
 800a026:	228a      	movs	r2, #138	@ 0x8a
 800a028:	601a      	str	r2, [r3, #0]
 800a02a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a02e:	4770      	bx	lr
 800a030:	700a      	strb	r2, [r1, #0]
 800a032:	2001      	movs	r0, #1
 800a034:	4770      	bx	lr

0800a036 <abort>:
 800a036:	b508      	push	{r3, lr}
 800a038:	2006      	movs	r0, #6
 800a03a:	f000 f82b 	bl	800a094 <raise>
 800a03e:	2001      	movs	r0, #1
 800a040:	f7fa fa89 	bl	8004556 <_exit>

0800a044 <_raise_r>:
 800a044:	291f      	cmp	r1, #31
 800a046:	b538      	push	{r3, r4, r5, lr}
 800a048:	4605      	mov	r5, r0
 800a04a:	460c      	mov	r4, r1
 800a04c:	d904      	bls.n	800a058 <_raise_r+0x14>
 800a04e:	2316      	movs	r3, #22
 800a050:	6003      	str	r3, [r0, #0]
 800a052:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a056:	bd38      	pop	{r3, r4, r5, pc}
 800a058:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a05a:	b112      	cbz	r2, 800a062 <_raise_r+0x1e>
 800a05c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a060:	b94b      	cbnz	r3, 800a076 <_raise_r+0x32>
 800a062:	4628      	mov	r0, r5
 800a064:	f000 f830 	bl	800a0c8 <_getpid_r>
 800a068:	4622      	mov	r2, r4
 800a06a:	4601      	mov	r1, r0
 800a06c:	4628      	mov	r0, r5
 800a06e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a072:	f000 b817 	b.w	800a0a4 <_kill_r>
 800a076:	2b01      	cmp	r3, #1
 800a078:	d00a      	beq.n	800a090 <_raise_r+0x4c>
 800a07a:	1c59      	adds	r1, r3, #1
 800a07c:	d103      	bne.n	800a086 <_raise_r+0x42>
 800a07e:	2316      	movs	r3, #22
 800a080:	6003      	str	r3, [r0, #0]
 800a082:	2001      	movs	r0, #1
 800a084:	e7e7      	b.n	800a056 <_raise_r+0x12>
 800a086:	2100      	movs	r1, #0
 800a088:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a08c:	4620      	mov	r0, r4
 800a08e:	4798      	blx	r3
 800a090:	2000      	movs	r0, #0
 800a092:	e7e0      	b.n	800a056 <_raise_r+0x12>

0800a094 <raise>:
 800a094:	4b02      	ldr	r3, [pc, #8]	@ (800a0a0 <raise+0xc>)
 800a096:	4601      	mov	r1, r0
 800a098:	6818      	ldr	r0, [r3, #0]
 800a09a:	f7ff bfd3 	b.w	800a044 <_raise_r>
 800a09e:	bf00      	nop
 800a0a0:	2000001c 	.word	0x2000001c

0800a0a4 <_kill_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4d07      	ldr	r5, [pc, #28]	@ (800a0c4 <_kill_r+0x20>)
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4604      	mov	r4, r0
 800a0ac:	4608      	mov	r0, r1
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	602b      	str	r3, [r5, #0]
 800a0b2:	f7fa fa40 	bl	8004536 <_kill>
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	d102      	bne.n	800a0c0 <_kill_r+0x1c>
 800a0ba:	682b      	ldr	r3, [r5, #0]
 800a0bc:	b103      	cbz	r3, 800a0c0 <_kill_r+0x1c>
 800a0be:	6023      	str	r3, [r4, #0]
 800a0c0:	bd38      	pop	{r3, r4, r5, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20002fd0 	.word	0x20002fd0

0800a0c8 <_getpid_r>:
 800a0c8:	f7fa ba2d 	b.w	8004526 <_getpid>

0800a0cc <pow>:
 800a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ce:	ed2d 8b02 	vpush	{d8}
 800a0d2:	eeb0 8a40 	vmov.f32	s16, s0
 800a0d6:	eef0 8a60 	vmov.f32	s17, s1
 800a0da:	ec55 4b11 	vmov	r4, r5, d1
 800a0de:	f000 f977 	bl	800a3d0 <__ieee754_pow>
 800a0e2:	4622      	mov	r2, r4
 800a0e4:	462b      	mov	r3, r5
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	ec57 6b10 	vmov	r6, r7, d0
 800a0ee:	f7f6 fd1d 	bl	8000b2c <__aeabi_dcmpun>
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	d13b      	bne.n	800a16e <pow+0xa2>
 800a0f6:	ec51 0b18 	vmov	r0, r1, d8
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	f7f6 fce3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a102:	b1b8      	cbz	r0, 800a134 <pow+0x68>
 800a104:	2200      	movs	r2, #0
 800a106:	2300      	movs	r3, #0
 800a108:	4620      	mov	r0, r4
 800a10a:	4629      	mov	r1, r5
 800a10c:	f7f6 fcdc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a110:	2800      	cmp	r0, #0
 800a112:	d146      	bne.n	800a1a2 <pow+0xd6>
 800a114:	ec45 4b10 	vmov	d0, r4, r5
 800a118:	f000 f874 	bl	800a204 <finite>
 800a11c:	b338      	cbz	r0, 800a16e <pow+0xa2>
 800a11e:	2200      	movs	r2, #0
 800a120:	2300      	movs	r3, #0
 800a122:	4620      	mov	r0, r4
 800a124:	4629      	mov	r1, r5
 800a126:	f7f6 fcd9 	bl	8000adc <__aeabi_dcmplt>
 800a12a:	b300      	cbz	r0, 800a16e <pow+0xa2>
 800a12c:	f7fe f876 	bl	800821c <__errno>
 800a130:	2322      	movs	r3, #34	@ 0x22
 800a132:	e01b      	b.n	800a16c <pow+0xa0>
 800a134:	ec47 6b10 	vmov	d0, r6, r7
 800a138:	f000 f864 	bl	800a204 <finite>
 800a13c:	b9e0      	cbnz	r0, 800a178 <pow+0xac>
 800a13e:	eeb0 0a48 	vmov.f32	s0, s16
 800a142:	eef0 0a68 	vmov.f32	s1, s17
 800a146:	f000 f85d 	bl	800a204 <finite>
 800a14a:	b1a8      	cbz	r0, 800a178 <pow+0xac>
 800a14c:	ec45 4b10 	vmov	d0, r4, r5
 800a150:	f000 f858 	bl	800a204 <finite>
 800a154:	b180      	cbz	r0, 800a178 <pow+0xac>
 800a156:	4632      	mov	r2, r6
 800a158:	463b      	mov	r3, r7
 800a15a:	4630      	mov	r0, r6
 800a15c:	4639      	mov	r1, r7
 800a15e:	f7f6 fce5 	bl	8000b2c <__aeabi_dcmpun>
 800a162:	2800      	cmp	r0, #0
 800a164:	d0e2      	beq.n	800a12c <pow+0x60>
 800a166:	f7fe f859 	bl	800821c <__errno>
 800a16a:	2321      	movs	r3, #33	@ 0x21
 800a16c:	6003      	str	r3, [r0, #0]
 800a16e:	ecbd 8b02 	vpop	{d8}
 800a172:	ec47 6b10 	vmov	d0, r6, r7
 800a176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a178:	2200      	movs	r2, #0
 800a17a:	2300      	movs	r3, #0
 800a17c:	4630      	mov	r0, r6
 800a17e:	4639      	mov	r1, r7
 800a180:	f7f6 fca2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a184:	2800      	cmp	r0, #0
 800a186:	d0f2      	beq.n	800a16e <pow+0xa2>
 800a188:	eeb0 0a48 	vmov.f32	s0, s16
 800a18c:	eef0 0a68 	vmov.f32	s1, s17
 800a190:	f000 f838 	bl	800a204 <finite>
 800a194:	2800      	cmp	r0, #0
 800a196:	d0ea      	beq.n	800a16e <pow+0xa2>
 800a198:	ec45 4b10 	vmov	d0, r4, r5
 800a19c:	f000 f832 	bl	800a204 <finite>
 800a1a0:	e7c3      	b.n	800a12a <pow+0x5e>
 800a1a2:	4f01      	ldr	r7, [pc, #4]	@ (800a1a8 <pow+0xdc>)
 800a1a4:	2600      	movs	r6, #0
 800a1a6:	e7e2      	b.n	800a16e <pow+0xa2>
 800a1a8:	3ff00000 	.word	0x3ff00000

0800a1ac <sqrt>:
 800a1ac:	b538      	push	{r3, r4, r5, lr}
 800a1ae:	ed2d 8b02 	vpush	{d8}
 800a1b2:	ec55 4b10 	vmov	r4, r5, d0
 800a1b6:	f000 f831 	bl	800a21c <__ieee754_sqrt>
 800a1ba:	4622      	mov	r2, r4
 800a1bc:	462b      	mov	r3, r5
 800a1be:	4620      	mov	r0, r4
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	eeb0 8a40 	vmov.f32	s16, s0
 800a1c6:	eef0 8a60 	vmov.f32	s17, s1
 800a1ca:	f7f6 fcaf 	bl	8000b2c <__aeabi_dcmpun>
 800a1ce:	b990      	cbnz	r0, 800a1f6 <sqrt+0x4a>
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	f7f6 fc80 	bl	8000adc <__aeabi_dcmplt>
 800a1dc:	b158      	cbz	r0, 800a1f6 <sqrt+0x4a>
 800a1de:	f7fe f81d 	bl	800821c <__errno>
 800a1e2:	2321      	movs	r3, #33	@ 0x21
 800a1e4:	6003      	str	r3, [r0, #0]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	f7f6 fb2d 	bl	800084c <__aeabi_ddiv>
 800a1f2:	ec41 0b18 	vmov	d8, r0, r1
 800a1f6:	eeb0 0a48 	vmov.f32	s0, s16
 800a1fa:	eef0 0a68 	vmov.f32	s1, s17
 800a1fe:	ecbd 8b02 	vpop	{d8}
 800a202:	bd38      	pop	{r3, r4, r5, pc}

0800a204 <finite>:
 800a204:	b082      	sub	sp, #8
 800a206:	ed8d 0b00 	vstr	d0, [sp]
 800a20a:	9801      	ldr	r0, [sp, #4]
 800a20c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a210:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a214:	0fc0      	lsrs	r0, r0, #31
 800a216:	b002      	add	sp, #8
 800a218:	4770      	bx	lr
	...

0800a21c <__ieee754_sqrt>:
 800a21c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a220:	4a68      	ldr	r2, [pc, #416]	@ (800a3c4 <__ieee754_sqrt+0x1a8>)
 800a222:	ec55 4b10 	vmov	r4, r5, d0
 800a226:	43aa      	bics	r2, r5
 800a228:	462b      	mov	r3, r5
 800a22a:	4621      	mov	r1, r4
 800a22c:	d110      	bne.n	800a250 <__ieee754_sqrt+0x34>
 800a22e:	4622      	mov	r2, r4
 800a230:	4620      	mov	r0, r4
 800a232:	4629      	mov	r1, r5
 800a234:	f7f6 f9e0 	bl	80005f8 <__aeabi_dmul>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4620      	mov	r0, r4
 800a23e:	4629      	mov	r1, r5
 800a240:	f7f6 f824 	bl	800028c <__adddf3>
 800a244:	4604      	mov	r4, r0
 800a246:	460d      	mov	r5, r1
 800a248:	ec45 4b10 	vmov	d0, r4, r5
 800a24c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a250:	2d00      	cmp	r5, #0
 800a252:	dc0e      	bgt.n	800a272 <__ieee754_sqrt+0x56>
 800a254:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a258:	4322      	orrs	r2, r4
 800a25a:	d0f5      	beq.n	800a248 <__ieee754_sqrt+0x2c>
 800a25c:	b19d      	cbz	r5, 800a286 <__ieee754_sqrt+0x6a>
 800a25e:	4622      	mov	r2, r4
 800a260:	4620      	mov	r0, r4
 800a262:	4629      	mov	r1, r5
 800a264:	f7f6 f810 	bl	8000288 <__aeabi_dsub>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	f7f6 faee 	bl	800084c <__aeabi_ddiv>
 800a270:	e7e8      	b.n	800a244 <__ieee754_sqrt+0x28>
 800a272:	152a      	asrs	r2, r5, #20
 800a274:	d115      	bne.n	800a2a2 <__ieee754_sqrt+0x86>
 800a276:	2000      	movs	r0, #0
 800a278:	e009      	b.n	800a28e <__ieee754_sqrt+0x72>
 800a27a:	0acb      	lsrs	r3, r1, #11
 800a27c:	3a15      	subs	r2, #21
 800a27e:	0549      	lsls	r1, r1, #21
 800a280:	2b00      	cmp	r3, #0
 800a282:	d0fa      	beq.n	800a27a <__ieee754_sqrt+0x5e>
 800a284:	e7f7      	b.n	800a276 <__ieee754_sqrt+0x5a>
 800a286:	462a      	mov	r2, r5
 800a288:	e7fa      	b.n	800a280 <__ieee754_sqrt+0x64>
 800a28a:	005b      	lsls	r3, r3, #1
 800a28c:	3001      	adds	r0, #1
 800a28e:	02dc      	lsls	r4, r3, #11
 800a290:	d5fb      	bpl.n	800a28a <__ieee754_sqrt+0x6e>
 800a292:	1e44      	subs	r4, r0, #1
 800a294:	1b12      	subs	r2, r2, r4
 800a296:	f1c0 0420 	rsb	r4, r0, #32
 800a29a:	fa21 f404 	lsr.w	r4, r1, r4
 800a29e:	4323      	orrs	r3, r4
 800a2a0:	4081      	lsls	r1, r0
 800a2a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2a6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a2aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a2ae:	07d2      	lsls	r2, r2, #31
 800a2b0:	bf5c      	itt	pl
 800a2b2:	005b      	lslpl	r3, r3, #1
 800a2b4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a2b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a2bc:	bf58      	it	pl
 800a2be:	0049      	lslpl	r1, r1, #1
 800a2c0:	2600      	movs	r6, #0
 800a2c2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a2c6:	106d      	asrs	r5, r5, #1
 800a2c8:	0049      	lsls	r1, r1, #1
 800a2ca:	2016      	movs	r0, #22
 800a2cc:	4632      	mov	r2, r6
 800a2ce:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a2d2:	1917      	adds	r7, r2, r4
 800a2d4:	429f      	cmp	r7, r3
 800a2d6:	bfde      	ittt	le
 800a2d8:	193a      	addle	r2, r7, r4
 800a2da:	1bdb      	suble	r3, r3, r7
 800a2dc:	1936      	addle	r6, r6, r4
 800a2de:	0fcf      	lsrs	r7, r1, #31
 800a2e0:	3801      	subs	r0, #1
 800a2e2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a2e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a2ea:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a2ee:	d1f0      	bne.n	800a2d2 <__ieee754_sqrt+0xb6>
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	2720      	movs	r7, #32
 800a2f4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	eb00 0e0c 	add.w	lr, r0, ip
 800a2fe:	db02      	blt.n	800a306 <__ieee754_sqrt+0xea>
 800a300:	d113      	bne.n	800a32a <__ieee754_sqrt+0x10e>
 800a302:	458e      	cmp	lr, r1
 800a304:	d811      	bhi.n	800a32a <__ieee754_sqrt+0x10e>
 800a306:	f1be 0f00 	cmp.w	lr, #0
 800a30a:	eb0e 000c 	add.w	r0, lr, ip
 800a30e:	da42      	bge.n	800a396 <__ieee754_sqrt+0x17a>
 800a310:	2800      	cmp	r0, #0
 800a312:	db40      	blt.n	800a396 <__ieee754_sqrt+0x17a>
 800a314:	f102 0801 	add.w	r8, r2, #1
 800a318:	1a9b      	subs	r3, r3, r2
 800a31a:	458e      	cmp	lr, r1
 800a31c:	bf88      	it	hi
 800a31e:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800a322:	eba1 010e 	sub.w	r1, r1, lr
 800a326:	4464      	add	r4, ip
 800a328:	4642      	mov	r2, r8
 800a32a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a32e:	3f01      	subs	r7, #1
 800a330:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a334:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a338:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a33c:	d1dc      	bne.n	800a2f8 <__ieee754_sqrt+0xdc>
 800a33e:	4319      	orrs	r1, r3
 800a340:	d01b      	beq.n	800a37a <__ieee754_sqrt+0x15e>
 800a342:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a3c8 <__ieee754_sqrt+0x1ac>
 800a346:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a3cc <__ieee754_sqrt+0x1b0>
 800a34a:	e9da 0100 	ldrd	r0, r1, [sl]
 800a34e:	e9db 2300 	ldrd	r2, r3, [fp]
 800a352:	f7f5 ff99 	bl	8000288 <__aeabi_dsub>
 800a356:	e9da 8900 	ldrd	r8, r9, [sl]
 800a35a:	4602      	mov	r2, r0
 800a35c:	460b      	mov	r3, r1
 800a35e:	4640      	mov	r0, r8
 800a360:	4649      	mov	r1, r9
 800a362:	f7f6 fbc5 	bl	8000af0 <__aeabi_dcmple>
 800a366:	b140      	cbz	r0, 800a37a <__ieee754_sqrt+0x15e>
 800a368:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800a36c:	e9da 0100 	ldrd	r0, r1, [sl]
 800a370:	e9db 2300 	ldrd	r2, r3, [fp]
 800a374:	d111      	bne.n	800a39a <__ieee754_sqrt+0x17e>
 800a376:	3601      	adds	r6, #1
 800a378:	463c      	mov	r4, r7
 800a37a:	1072      	asrs	r2, r6, #1
 800a37c:	0863      	lsrs	r3, r4, #1
 800a37e:	07f1      	lsls	r1, r6, #31
 800a380:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a384:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a388:	bf48      	it	mi
 800a38a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a38e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a392:	4618      	mov	r0, r3
 800a394:	e756      	b.n	800a244 <__ieee754_sqrt+0x28>
 800a396:	4690      	mov	r8, r2
 800a398:	e7be      	b.n	800a318 <__ieee754_sqrt+0xfc>
 800a39a:	f7f5 ff77 	bl	800028c <__adddf3>
 800a39e:	e9da 8900 	ldrd	r8, r9, [sl]
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	4649      	mov	r1, r9
 800a3aa:	f7f6 fb97 	bl	8000adc <__aeabi_dcmplt>
 800a3ae:	b120      	cbz	r0, 800a3ba <__ieee754_sqrt+0x19e>
 800a3b0:	1ca0      	adds	r0, r4, #2
 800a3b2:	bf08      	it	eq
 800a3b4:	3601      	addeq	r6, #1
 800a3b6:	3402      	adds	r4, #2
 800a3b8:	e7df      	b.n	800a37a <__ieee754_sqrt+0x15e>
 800a3ba:	1c63      	adds	r3, r4, #1
 800a3bc:	f023 0401 	bic.w	r4, r3, #1
 800a3c0:	e7db      	b.n	800a37a <__ieee754_sqrt+0x15e>
 800a3c2:	bf00      	nop
 800a3c4:	7ff00000 	.word	0x7ff00000
 800a3c8:	200001e0 	.word	0x200001e0
 800a3cc:	200001d8 	.word	0x200001d8

0800a3d0 <__ieee754_pow>:
 800a3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d4:	b091      	sub	sp, #68	@ 0x44
 800a3d6:	ed8d 1b00 	vstr	d1, [sp]
 800a3da:	e9dd 1900 	ldrd	r1, r9, [sp]
 800a3de:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800a3e2:	ea5a 0001 	orrs.w	r0, sl, r1
 800a3e6:	ec57 6b10 	vmov	r6, r7, d0
 800a3ea:	d113      	bne.n	800a414 <__ieee754_pow+0x44>
 800a3ec:	19b3      	adds	r3, r6, r6
 800a3ee:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800a3f2:	4152      	adcs	r2, r2
 800a3f4:	4298      	cmp	r0, r3
 800a3f6:	4b98      	ldr	r3, [pc, #608]	@ (800a658 <__ieee754_pow+0x288>)
 800a3f8:	4193      	sbcs	r3, r2
 800a3fa:	f080 84ea 	bcs.w	800add2 <__ieee754_pow+0xa02>
 800a3fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a402:	4630      	mov	r0, r6
 800a404:	4639      	mov	r1, r7
 800a406:	f7f5 ff41 	bl	800028c <__adddf3>
 800a40a:	ec41 0b10 	vmov	d0, r0, r1
 800a40e:	b011      	add	sp, #68	@ 0x44
 800a410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a414:	4a91      	ldr	r2, [pc, #580]	@ (800a65c <__ieee754_pow+0x28c>)
 800a416:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a41a:	4590      	cmp	r8, r2
 800a41c:	463d      	mov	r5, r7
 800a41e:	4633      	mov	r3, r6
 800a420:	d806      	bhi.n	800a430 <__ieee754_pow+0x60>
 800a422:	d101      	bne.n	800a428 <__ieee754_pow+0x58>
 800a424:	2e00      	cmp	r6, #0
 800a426:	d1ea      	bne.n	800a3fe <__ieee754_pow+0x2e>
 800a428:	4592      	cmp	sl, r2
 800a42a:	d801      	bhi.n	800a430 <__ieee754_pow+0x60>
 800a42c:	d10e      	bne.n	800a44c <__ieee754_pow+0x7c>
 800a42e:	b169      	cbz	r1, 800a44c <__ieee754_pow+0x7c>
 800a430:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a434:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a438:	431d      	orrs	r5, r3
 800a43a:	d1e0      	bne.n	800a3fe <__ieee754_pow+0x2e>
 800a43c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a440:	18db      	adds	r3, r3, r3
 800a442:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a446:	4152      	adcs	r2, r2
 800a448:	429d      	cmp	r5, r3
 800a44a:	e7d4      	b.n	800a3f6 <__ieee754_pow+0x26>
 800a44c:	2d00      	cmp	r5, #0
 800a44e:	46c3      	mov	fp, r8
 800a450:	da3a      	bge.n	800a4c8 <__ieee754_pow+0xf8>
 800a452:	4a83      	ldr	r2, [pc, #524]	@ (800a660 <__ieee754_pow+0x290>)
 800a454:	4592      	cmp	sl, r2
 800a456:	d84d      	bhi.n	800a4f4 <__ieee754_pow+0x124>
 800a458:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a45c:	4592      	cmp	sl, r2
 800a45e:	f240 84c7 	bls.w	800adf0 <__ieee754_pow+0xa20>
 800a462:	ea4f 522a 	mov.w	r2, sl, asr #20
 800a466:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a46a:	2a14      	cmp	r2, #20
 800a46c:	dd0f      	ble.n	800a48e <__ieee754_pow+0xbe>
 800a46e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a472:	fa21 f402 	lsr.w	r4, r1, r2
 800a476:	fa04 f202 	lsl.w	r2, r4, r2
 800a47a:	428a      	cmp	r2, r1
 800a47c:	f040 84b8 	bne.w	800adf0 <__ieee754_pow+0xa20>
 800a480:	f004 0401 	and.w	r4, r4, #1
 800a484:	f1c4 0402 	rsb	r4, r4, #2
 800a488:	2900      	cmp	r1, #0
 800a48a:	d158      	bne.n	800a53e <__ieee754_pow+0x16e>
 800a48c:	e00e      	b.n	800a4ac <__ieee754_pow+0xdc>
 800a48e:	2900      	cmp	r1, #0
 800a490:	d154      	bne.n	800a53c <__ieee754_pow+0x16c>
 800a492:	f1c2 0214 	rsb	r2, r2, #20
 800a496:	fa4a f402 	asr.w	r4, sl, r2
 800a49a:	fa04 f202 	lsl.w	r2, r4, r2
 800a49e:	4552      	cmp	r2, sl
 800a4a0:	f040 84a3 	bne.w	800adea <__ieee754_pow+0xa1a>
 800a4a4:	f004 0401 	and.w	r4, r4, #1
 800a4a8:	f1c4 0402 	rsb	r4, r4, #2
 800a4ac:	4a6d      	ldr	r2, [pc, #436]	@ (800a664 <__ieee754_pow+0x294>)
 800a4ae:	4592      	cmp	sl, r2
 800a4b0:	d12e      	bne.n	800a510 <__ieee754_pow+0x140>
 800a4b2:	f1b9 0f00 	cmp.w	r9, #0
 800a4b6:	f280 8494 	bge.w	800ade2 <__ieee754_pow+0xa12>
 800a4ba:	496a      	ldr	r1, [pc, #424]	@ (800a664 <__ieee754_pow+0x294>)
 800a4bc:	4632      	mov	r2, r6
 800a4be:	463b      	mov	r3, r7
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	f7f6 f9c3 	bl	800084c <__aeabi_ddiv>
 800a4c6:	e7a0      	b.n	800a40a <__ieee754_pow+0x3a>
 800a4c8:	2400      	movs	r4, #0
 800a4ca:	bbc1      	cbnz	r1, 800a53e <__ieee754_pow+0x16e>
 800a4cc:	4a63      	ldr	r2, [pc, #396]	@ (800a65c <__ieee754_pow+0x28c>)
 800a4ce:	4592      	cmp	sl, r2
 800a4d0:	d1ec      	bne.n	800a4ac <__ieee754_pow+0xdc>
 800a4d2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800a4d6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	f000 8479 	beq.w	800add2 <__ieee754_pow+0xa02>
 800a4e0:	4b61      	ldr	r3, [pc, #388]	@ (800a668 <__ieee754_pow+0x298>)
 800a4e2:	4598      	cmp	r8, r3
 800a4e4:	d908      	bls.n	800a4f8 <__ieee754_pow+0x128>
 800a4e6:	f1b9 0f00 	cmp.w	r9, #0
 800a4ea:	f2c0 8476 	blt.w	800adda <__ieee754_pow+0xa0a>
 800a4ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4f2:	e78a      	b.n	800a40a <__ieee754_pow+0x3a>
 800a4f4:	2402      	movs	r4, #2
 800a4f6:	e7e8      	b.n	800a4ca <__ieee754_pow+0xfa>
 800a4f8:	f1b9 0f00 	cmp.w	r9, #0
 800a4fc:	f04f 0000 	mov.w	r0, #0
 800a500:	f04f 0100 	mov.w	r1, #0
 800a504:	da81      	bge.n	800a40a <__ieee754_pow+0x3a>
 800a506:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a50a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a50e:	e77c      	b.n	800a40a <__ieee754_pow+0x3a>
 800a510:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800a514:	d106      	bne.n	800a524 <__ieee754_pow+0x154>
 800a516:	4632      	mov	r2, r6
 800a518:	463b      	mov	r3, r7
 800a51a:	4630      	mov	r0, r6
 800a51c:	4639      	mov	r1, r7
 800a51e:	f7f6 f86b 	bl	80005f8 <__aeabi_dmul>
 800a522:	e772      	b.n	800a40a <__ieee754_pow+0x3a>
 800a524:	4a51      	ldr	r2, [pc, #324]	@ (800a66c <__ieee754_pow+0x29c>)
 800a526:	4591      	cmp	r9, r2
 800a528:	d109      	bne.n	800a53e <__ieee754_pow+0x16e>
 800a52a:	2d00      	cmp	r5, #0
 800a52c:	db07      	blt.n	800a53e <__ieee754_pow+0x16e>
 800a52e:	ec47 6b10 	vmov	d0, r6, r7
 800a532:	b011      	add	sp, #68	@ 0x44
 800a534:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a538:	f7ff be70 	b.w	800a21c <__ieee754_sqrt>
 800a53c:	2400      	movs	r4, #0
 800a53e:	ec47 6b10 	vmov	d0, r6, r7
 800a542:	9302      	str	r3, [sp, #8]
 800a544:	f000 fcc4 	bl	800aed0 <fabs>
 800a548:	9b02      	ldr	r3, [sp, #8]
 800a54a:	ec51 0b10 	vmov	r0, r1, d0
 800a54e:	bb53      	cbnz	r3, 800a5a6 <__ieee754_pow+0x1d6>
 800a550:	4b44      	ldr	r3, [pc, #272]	@ (800a664 <__ieee754_pow+0x294>)
 800a552:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800a556:	429a      	cmp	r2, r3
 800a558:	d002      	beq.n	800a560 <__ieee754_pow+0x190>
 800a55a:	f1b8 0f00 	cmp.w	r8, #0
 800a55e:	d122      	bne.n	800a5a6 <__ieee754_pow+0x1d6>
 800a560:	f1b9 0f00 	cmp.w	r9, #0
 800a564:	da05      	bge.n	800a572 <__ieee754_pow+0x1a2>
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	2000      	movs	r0, #0
 800a56c:	493d      	ldr	r1, [pc, #244]	@ (800a664 <__ieee754_pow+0x294>)
 800a56e:	f7f6 f96d 	bl	800084c <__aeabi_ddiv>
 800a572:	2d00      	cmp	r5, #0
 800a574:	f6bf af49 	bge.w	800a40a <__ieee754_pow+0x3a>
 800a578:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800a57c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800a580:	ea58 0804 	orrs.w	r8, r8, r4
 800a584:	d108      	bne.n	800a598 <__ieee754_pow+0x1c8>
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	4610      	mov	r0, r2
 800a58c:	4619      	mov	r1, r3
 800a58e:	f7f5 fe7b 	bl	8000288 <__aeabi_dsub>
 800a592:	4602      	mov	r2, r0
 800a594:	460b      	mov	r3, r1
 800a596:	e794      	b.n	800a4c2 <__ieee754_pow+0xf2>
 800a598:	2c01      	cmp	r4, #1
 800a59a:	f47f af36 	bne.w	800a40a <__ieee754_pow+0x3a>
 800a59e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	e731      	b.n	800a40a <__ieee754_pow+0x3a>
 800a5a6:	0feb      	lsrs	r3, r5, #31
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	ea53 0204 	orrs.w	r2, r3, r4
 800a5ae:	d102      	bne.n	800a5b6 <__ieee754_pow+0x1e6>
 800a5b0:	4632      	mov	r2, r6
 800a5b2:	463b      	mov	r3, r7
 800a5b4:	e7e9      	b.n	800a58a <__ieee754_pow+0x1ba>
 800a5b6:	3c01      	subs	r4, #1
 800a5b8:	431c      	orrs	r4, r3
 800a5ba:	d016      	beq.n	800a5ea <__ieee754_pow+0x21a>
 800a5bc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800a648 <__ieee754_pow+0x278>
 800a5c0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a5c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5c8:	f240 8112 	bls.w	800a7f0 <__ieee754_pow+0x420>
 800a5cc:	4b28      	ldr	r3, [pc, #160]	@ (800a670 <__ieee754_pow+0x2a0>)
 800a5ce:	459a      	cmp	sl, r3
 800a5d0:	4b25      	ldr	r3, [pc, #148]	@ (800a668 <__ieee754_pow+0x298>)
 800a5d2:	d916      	bls.n	800a602 <__ieee754_pow+0x232>
 800a5d4:	4598      	cmp	r8, r3
 800a5d6:	d80b      	bhi.n	800a5f0 <__ieee754_pow+0x220>
 800a5d8:	f1b9 0f00 	cmp.w	r9, #0
 800a5dc:	da0b      	bge.n	800a5f6 <__ieee754_pow+0x226>
 800a5de:	2000      	movs	r0, #0
 800a5e0:	b011      	add	sp, #68	@ 0x44
 800a5e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e6:	f000 bc6b 	b.w	800aec0 <__math_oflow>
 800a5ea:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800a650 <__ieee754_pow+0x280>
 800a5ee:	e7e7      	b.n	800a5c0 <__ieee754_pow+0x1f0>
 800a5f0:	f1b9 0f00 	cmp.w	r9, #0
 800a5f4:	dcf3      	bgt.n	800a5de <__ieee754_pow+0x20e>
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	b011      	add	sp, #68	@ 0x44
 800a5fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fe:	f000 bc57 	b.w	800aeb0 <__math_uflow>
 800a602:	4598      	cmp	r8, r3
 800a604:	d20c      	bcs.n	800a620 <__ieee754_pow+0x250>
 800a606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a60a:	2200      	movs	r2, #0
 800a60c:	2300      	movs	r3, #0
 800a60e:	f7f6 fa65 	bl	8000adc <__aeabi_dcmplt>
 800a612:	3800      	subs	r0, #0
 800a614:	bf18      	it	ne
 800a616:	2001      	movne	r0, #1
 800a618:	f1b9 0f00 	cmp.w	r9, #0
 800a61c:	daec      	bge.n	800a5f8 <__ieee754_pow+0x228>
 800a61e:	e7df      	b.n	800a5e0 <__ieee754_pow+0x210>
 800a620:	4b10      	ldr	r3, [pc, #64]	@ (800a664 <__ieee754_pow+0x294>)
 800a622:	4598      	cmp	r8, r3
 800a624:	f04f 0200 	mov.w	r2, #0
 800a628:	d924      	bls.n	800a674 <__ieee754_pow+0x2a4>
 800a62a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a62e:	2300      	movs	r3, #0
 800a630:	f7f6 fa54 	bl	8000adc <__aeabi_dcmplt>
 800a634:	3800      	subs	r0, #0
 800a636:	bf18      	it	ne
 800a638:	2001      	movne	r0, #1
 800a63a:	f1b9 0f00 	cmp.w	r9, #0
 800a63e:	dccf      	bgt.n	800a5e0 <__ieee754_pow+0x210>
 800a640:	e7da      	b.n	800a5f8 <__ieee754_pow+0x228>
 800a642:	bf00      	nop
 800a644:	f3af 8000 	nop.w
 800a648:	00000000 	.word	0x00000000
 800a64c:	3ff00000 	.word	0x3ff00000
 800a650:	00000000 	.word	0x00000000
 800a654:	bff00000 	.word	0xbff00000
 800a658:	fff00000 	.word	0xfff00000
 800a65c:	7ff00000 	.word	0x7ff00000
 800a660:	433fffff 	.word	0x433fffff
 800a664:	3ff00000 	.word	0x3ff00000
 800a668:	3fefffff 	.word	0x3fefffff
 800a66c:	3fe00000 	.word	0x3fe00000
 800a670:	43f00000 	.word	0x43f00000
 800a674:	4b5a      	ldr	r3, [pc, #360]	@ (800a7e0 <__ieee754_pow+0x410>)
 800a676:	f7f5 fe07 	bl	8000288 <__aeabi_dsub>
 800a67a:	a351      	add	r3, pc, #324	@ (adr r3, 800a7c0 <__ieee754_pow+0x3f0>)
 800a67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a680:	4604      	mov	r4, r0
 800a682:	460d      	mov	r5, r1
 800a684:	f7f5 ffb8 	bl	80005f8 <__aeabi_dmul>
 800a688:	a34f      	add	r3, pc, #316	@ (adr r3, 800a7c8 <__ieee754_pow+0x3f8>)
 800a68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68e:	4606      	mov	r6, r0
 800a690:	460f      	mov	r7, r1
 800a692:	4620      	mov	r0, r4
 800a694:	4629      	mov	r1, r5
 800a696:	f7f5 ffaf 	bl	80005f8 <__aeabi_dmul>
 800a69a:	4b52      	ldr	r3, [pc, #328]	@ (800a7e4 <__ieee754_pow+0x414>)
 800a69c:	4682      	mov	sl, r0
 800a69e:	468b      	mov	fp, r1
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	f7f5 ffa7 	bl	80005f8 <__aeabi_dmul>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	a148      	add	r1, pc, #288	@ (adr r1, 800a7d0 <__ieee754_pow+0x400>)
 800a6b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6b4:	f7f5 fde8 	bl	8000288 <__aeabi_dsub>
 800a6b8:	4622      	mov	r2, r4
 800a6ba:	462b      	mov	r3, r5
 800a6bc:	f7f5 ff9c 	bl	80005f8 <__aeabi_dmul>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	4948      	ldr	r1, [pc, #288]	@ (800a7e8 <__ieee754_pow+0x418>)
 800a6c8:	f7f5 fdde 	bl	8000288 <__aeabi_dsub>
 800a6cc:	4622      	mov	r2, r4
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	4689      	mov	r9, r1
 800a6d2:	462b      	mov	r3, r5
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	f7f5 ff8e 	bl	80005f8 <__aeabi_dmul>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	4649      	mov	r1, r9
 800a6e4:	f7f5 ff88 	bl	80005f8 <__aeabi_dmul>
 800a6e8:	a33b      	add	r3, pc, #236	@ (adr r3, 800a7d8 <__ieee754_pow+0x408>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	f7f5 ff83 	bl	80005f8 <__aeabi_dmul>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	4650      	mov	r0, sl
 800a6f8:	4659      	mov	r1, fp
 800a6fa:	f7f5 fdc5 	bl	8000288 <__aeabi_dsub>
 800a6fe:	4602      	mov	r2, r0
 800a700:	460b      	mov	r3, r1
 800a702:	4680      	mov	r8, r0
 800a704:	4689      	mov	r9, r1
 800a706:	4630      	mov	r0, r6
 800a708:	4639      	mov	r1, r7
 800a70a:	f7f5 fdbf 	bl	800028c <__adddf3>
 800a70e:	2400      	movs	r4, #0
 800a710:	4632      	mov	r2, r6
 800a712:	463b      	mov	r3, r7
 800a714:	4620      	mov	r0, r4
 800a716:	460d      	mov	r5, r1
 800a718:	f7f5 fdb6 	bl	8000288 <__aeabi_dsub>
 800a71c:	4602      	mov	r2, r0
 800a71e:	460b      	mov	r3, r1
 800a720:	4640      	mov	r0, r8
 800a722:	4649      	mov	r1, r9
 800a724:	f7f5 fdb0 	bl	8000288 <__aeabi_dsub>
 800a728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a72c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a730:	2300      	movs	r3, #0
 800a732:	9304      	str	r3, [sp, #16]
 800a734:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a738:	4606      	mov	r6, r0
 800a73a:	460f      	mov	r7, r1
 800a73c:	4652      	mov	r2, sl
 800a73e:	465b      	mov	r3, fp
 800a740:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a744:	f7f5 fda0 	bl	8000288 <__aeabi_dsub>
 800a748:	4622      	mov	r2, r4
 800a74a:	462b      	mov	r3, r5
 800a74c:	f7f5 ff54 	bl	80005f8 <__aeabi_dmul>
 800a750:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a754:	4680      	mov	r8, r0
 800a756:	4689      	mov	r9, r1
 800a758:	4630      	mov	r0, r6
 800a75a:	4639      	mov	r1, r7
 800a75c:	f7f5 ff4c 	bl	80005f8 <__aeabi_dmul>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	4640      	mov	r0, r8
 800a766:	4649      	mov	r1, r9
 800a768:	f7f5 fd90 	bl	800028c <__adddf3>
 800a76c:	4652      	mov	r2, sl
 800a76e:	465b      	mov	r3, fp
 800a770:	4606      	mov	r6, r0
 800a772:	460f      	mov	r7, r1
 800a774:	4620      	mov	r0, r4
 800a776:	4629      	mov	r1, r5
 800a778:	f7f5 ff3e 	bl	80005f8 <__aeabi_dmul>
 800a77c:	460b      	mov	r3, r1
 800a77e:	4602      	mov	r2, r0
 800a780:	4680      	mov	r8, r0
 800a782:	4689      	mov	r9, r1
 800a784:	4630      	mov	r0, r6
 800a786:	4639      	mov	r1, r7
 800a788:	f7f5 fd80 	bl	800028c <__adddf3>
 800a78c:	4b17      	ldr	r3, [pc, #92]	@ (800a7ec <__ieee754_pow+0x41c>)
 800a78e:	4299      	cmp	r1, r3
 800a790:	4604      	mov	r4, r0
 800a792:	460d      	mov	r5, r1
 800a794:	468a      	mov	sl, r1
 800a796:	468b      	mov	fp, r1
 800a798:	f340 82ef 	ble.w	800ad7a <__ieee754_pow+0x9aa>
 800a79c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a7a0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a7a4:	4303      	orrs	r3, r0
 800a7a6:	f000 81e8 	beq.w	800ab7a <__ieee754_pow+0x7aa>
 800a7aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	f7f6 f993 	bl	8000adc <__aeabi_dcmplt>
 800a7b6:	3800      	subs	r0, #0
 800a7b8:	bf18      	it	ne
 800a7ba:	2001      	movne	r0, #1
 800a7bc:	e710      	b.n	800a5e0 <__ieee754_pow+0x210>
 800a7be:	bf00      	nop
 800a7c0:	60000000 	.word	0x60000000
 800a7c4:	3ff71547 	.word	0x3ff71547
 800a7c8:	f85ddf44 	.word	0xf85ddf44
 800a7cc:	3e54ae0b 	.word	0x3e54ae0b
 800a7d0:	55555555 	.word	0x55555555
 800a7d4:	3fd55555 	.word	0x3fd55555
 800a7d8:	652b82fe 	.word	0x652b82fe
 800a7dc:	3ff71547 	.word	0x3ff71547
 800a7e0:	3ff00000 	.word	0x3ff00000
 800a7e4:	3fd00000 	.word	0x3fd00000
 800a7e8:	3fe00000 	.word	0x3fe00000
 800a7ec:	408fffff 	.word	0x408fffff
 800a7f0:	4bd5      	ldr	r3, [pc, #852]	@ (800ab48 <__ieee754_pow+0x778>)
 800a7f2:	402b      	ands	r3, r5
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	b92b      	cbnz	r3, 800a804 <__ieee754_pow+0x434>
 800a7f8:	4bd4      	ldr	r3, [pc, #848]	@ (800ab4c <__ieee754_pow+0x77c>)
 800a7fa:	f7f5 fefd 	bl	80005f8 <__aeabi_dmul>
 800a7fe:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a802:	468b      	mov	fp, r1
 800a804:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a808:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a80c:	4413      	add	r3, r2
 800a80e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a810:	4bcf      	ldr	r3, [pc, #828]	@ (800ab50 <__ieee754_pow+0x780>)
 800a812:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a816:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a81a:	459b      	cmp	fp, r3
 800a81c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a820:	dd08      	ble.n	800a834 <__ieee754_pow+0x464>
 800a822:	4bcc      	ldr	r3, [pc, #816]	@ (800ab54 <__ieee754_pow+0x784>)
 800a824:	459b      	cmp	fp, r3
 800a826:	f340 81a5 	ble.w	800ab74 <__ieee754_pow+0x7a4>
 800a82a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a82c:	3301      	adds	r3, #1
 800a82e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a830:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a834:	f04f 0a00 	mov.w	sl, #0
 800a838:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a83c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a83e:	4bc6      	ldr	r3, [pc, #792]	@ (800ab58 <__ieee754_pow+0x788>)
 800a840:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a844:	ed93 7b00 	vldr	d7, [r3]
 800a848:	4629      	mov	r1, r5
 800a84a:	ec53 2b17 	vmov	r2, r3, d7
 800a84e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a852:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a856:	f7f5 fd17 	bl	8000288 <__aeabi_dsub>
 800a85a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a85e:	4606      	mov	r6, r0
 800a860:	460f      	mov	r7, r1
 800a862:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a866:	f7f5 fd11 	bl	800028c <__adddf3>
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	2000      	movs	r0, #0
 800a870:	49ba      	ldr	r1, [pc, #744]	@ (800ab5c <__ieee754_pow+0x78c>)
 800a872:	f7f5 ffeb 	bl	800084c <__aeabi_ddiv>
 800a876:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	4630      	mov	r0, r6
 800a880:	4639      	mov	r1, r7
 800a882:	f7f5 feb9 	bl	80005f8 <__aeabi_dmul>
 800a886:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a88a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a88e:	106d      	asrs	r5, r5, #1
 800a890:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a894:	f04f 0b00 	mov.w	fp, #0
 800a898:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a89c:	4661      	mov	r1, ip
 800a89e:	2200      	movs	r2, #0
 800a8a0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a8a4:	4658      	mov	r0, fp
 800a8a6:	46e1      	mov	r9, ip
 800a8a8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a8ac:	4614      	mov	r4, r2
 800a8ae:	461d      	mov	r5, r3
 800a8b0:	f7f5 fea2 	bl	80005f8 <__aeabi_dmul>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	f7f5 fce4 	bl	8000288 <__aeabi_dsub>
 800a8c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	460f      	mov	r7, r1
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	4629      	mov	r1, r5
 800a8cc:	f7f5 fcdc 	bl	8000288 <__aeabi_dsub>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a8d8:	f7f5 fcd6 	bl	8000288 <__aeabi_dsub>
 800a8dc:	465a      	mov	r2, fp
 800a8de:	464b      	mov	r3, r9
 800a8e0:	f7f5 fe8a 	bl	80005f8 <__aeabi_dmul>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	f7f5 fccc 	bl	8000288 <__aeabi_dsub>
 800a8f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a8f4:	f7f5 fe80 	bl	80005f8 <__aeabi_dmul>
 800a8f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a900:	4610      	mov	r0, r2
 800a902:	4619      	mov	r1, r3
 800a904:	f7f5 fe78 	bl	80005f8 <__aeabi_dmul>
 800a908:	a37d      	add	r3, pc, #500	@ (adr r3, 800ab00 <__ieee754_pow+0x730>)
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	4604      	mov	r4, r0
 800a910:	460d      	mov	r5, r1
 800a912:	f7f5 fe71 	bl	80005f8 <__aeabi_dmul>
 800a916:	a37c      	add	r3, pc, #496	@ (adr r3, 800ab08 <__ieee754_pow+0x738>)
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	f7f5 fcb6 	bl	800028c <__adddf3>
 800a920:	4622      	mov	r2, r4
 800a922:	462b      	mov	r3, r5
 800a924:	f7f5 fe68 	bl	80005f8 <__aeabi_dmul>
 800a928:	a379      	add	r3, pc, #484	@ (adr r3, 800ab10 <__ieee754_pow+0x740>)
 800a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92e:	f7f5 fcad 	bl	800028c <__adddf3>
 800a932:	4622      	mov	r2, r4
 800a934:	462b      	mov	r3, r5
 800a936:	f7f5 fe5f 	bl	80005f8 <__aeabi_dmul>
 800a93a:	a377      	add	r3, pc, #476	@ (adr r3, 800ab18 <__ieee754_pow+0x748>)
 800a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a940:	f7f5 fca4 	bl	800028c <__adddf3>
 800a944:	4622      	mov	r2, r4
 800a946:	462b      	mov	r3, r5
 800a948:	f7f5 fe56 	bl	80005f8 <__aeabi_dmul>
 800a94c:	a374      	add	r3, pc, #464	@ (adr r3, 800ab20 <__ieee754_pow+0x750>)
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	f7f5 fc9b 	bl	800028c <__adddf3>
 800a956:	4622      	mov	r2, r4
 800a958:	462b      	mov	r3, r5
 800a95a:	f7f5 fe4d 	bl	80005f8 <__aeabi_dmul>
 800a95e:	a372      	add	r3, pc, #456	@ (adr r3, 800ab28 <__ieee754_pow+0x758>)
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	f7f5 fc92 	bl	800028c <__adddf3>
 800a968:	4622      	mov	r2, r4
 800a96a:	4606      	mov	r6, r0
 800a96c:	460f      	mov	r7, r1
 800a96e:	462b      	mov	r3, r5
 800a970:	4620      	mov	r0, r4
 800a972:	4629      	mov	r1, r5
 800a974:	f7f5 fe40 	bl	80005f8 <__aeabi_dmul>
 800a978:	4602      	mov	r2, r0
 800a97a:	460b      	mov	r3, r1
 800a97c:	4630      	mov	r0, r6
 800a97e:	4639      	mov	r1, r7
 800a980:	f7f5 fe3a 	bl	80005f8 <__aeabi_dmul>
 800a984:	465a      	mov	r2, fp
 800a986:	4604      	mov	r4, r0
 800a988:	460d      	mov	r5, r1
 800a98a:	464b      	mov	r3, r9
 800a98c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a990:	f7f5 fc7c 	bl	800028c <__adddf3>
 800a994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a998:	f7f5 fe2e 	bl	80005f8 <__aeabi_dmul>
 800a99c:	4622      	mov	r2, r4
 800a99e:	462b      	mov	r3, r5
 800a9a0:	f7f5 fc74 	bl	800028c <__adddf3>
 800a9a4:	465a      	mov	r2, fp
 800a9a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a9aa:	464b      	mov	r3, r9
 800a9ac:	4658      	mov	r0, fp
 800a9ae:	4649      	mov	r1, r9
 800a9b0:	f7f5 fe22 	bl	80005f8 <__aeabi_dmul>
 800a9b4:	4b6a      	ldr	r3, [pc, #424]	@ (800ab60 <__ieee754_pow+0x790>)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	4606      	mov	r6, r0
 800a9ba:	460f      	mov	r7, r1
 800a9bc:	f7f5 fc66 	bl	800028c <__adddf3>
 800a9c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a9c4:	f7f5 fc62 	bl	800028c <__adddf3>
 800a9c8:	46d8      	mov	r8, fp
 800a9ca:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a9ce:	460d      	mov	r5, r1
 800a9d0:	465a      	mov	r2, fp
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	4640      	mov	r0, r8
 800a9d6:	4649      	mov	r1, r9
 800a9d8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a9dc:	f7f5 fe0c 	bl	80005f8 <__aeabi_dmul>
 800a9e0:	465c      	mov	r4, fp
 800a9e2:	4680      	mov	r8, r0
 800a9e4:	4689      	mov	r9, r1
 800a9e6:	4b5e      	ldr	r3, [pc, #376]	@ (800ab60 <__ieee754_pow+0x790>)
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	f7f5 fc4b 	bl	8000288 <__aeabi_dsub>
 800a9f2:	4632      	mov	r2, r6
 800a9f4:	463b      	mov	r3, r7
 800a9f6:	f7f5 fc47 	bl	8000288 <__aeabi_dsub>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa02:	f7f5 fc41 	bl	8000288 <__aeabi_dsub>
 800aa06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa0a:	f7f5 fdf5 	bl	80005f8 <__aeabi_dmul>
 800aa0e:	4622      	mov	r2, r4
 800aa10:	4606      	mov	r6, r0
 800aa12:	460f      	mov	r7, r1
 800aa14:	462b      	mov	r3, r5
 800aa16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa1a:	f7f5 fded 	bl	80005f8 <__aeabi_dmul>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	460b      	mov	r3, r1
 800aa22:	4630      	mov	r0, r6
 800aa24:	4639      	mov	r1, r7
 800aa26:	f7f5 fc31 	bl	800028c <__adddf3>
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	460f      	mov	r7, r1
 800aa2e:	4602      	mov	r2, r0
 800aa30:	460b      	mov	r3, r1
 800aa32:	4640      	mov	r0, r8
 800aa34:	4649      	mov	r1, r9
 800aa36:	f7f5 fc29 	bl	800028c <__adddf3>
 800aa3a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800aa3e:	a33c      	add	r3, pc, #240	@ (adr r3, 800ab30 <__ieee754_pow+0x760>)
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	4658      	mov	r0, fp
 800aa46:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800aa4a:	460d      	mov	r5, r1
 800aa4c:	f7f5 fdd4 	bl	80005f8 <__aeabi_dmul>
 800aa50:	465c      	mov	r4, fp
 800aa52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa56:	4642      	mov	r2, r8
 800aa58:	464b      	mov	r3, r9
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	f7f5 fc13 	bl	8000288 <__aeabi_dsub>
 800aa62:	4602      	mov	r2, r0
 800aa64:	460b      	mov	r3, r1
 800aa66:	4630      	mov	r0, r6
 800aa68:	4639      	mov	r1, r7
 800aa6a:	f7f5 fc0d 	bl	8000288 <__aeabi_dsub>
 800aa6e:	a332      	add	r3, pc, #200	@ (adr r3, 800ab38 <__ieee754_pow+0x768>)
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	f7f5 fdc0 	bl	80005f8 <__aeabi_dmul>
 800aa78:	a331      	add	r3, pc, #196	@ (adr r3, 800ab40 <__ieee754_pow+0x770>)
 800aa7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7e:	4606      	mov	r6, r0
 800aa80:	460f      	mov	r7, r1
 800aa82:	4620      	mov	r0, r4
 800aa84:	4629      	mov	r1, r5
 800aa86:	f7f5 fdb7 	bl	80005f8 <__aeabi_dmul>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	4630      	mov	r0, r6
 800aa90:	4639      	mov	r1, r7
 800aa92:	f7f5 fbfb 	bl	800028c <__adddf3>
 800aa96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aa98:	4b32      	ldr	r3, [pc, #200]	@ (800ab64 <__ieee754_pow+0x794>)
 800aa9a:	4413      	add	r3, r2
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	f7f5 fbf4 	bl	800028c <__adddf3>
 800aaa4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aaa8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aaaa:	f7f5 fd3b 	bl	8000524 <__aeabi_i2d>
 800aaae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aab0:	4b2d      	ldr	r3, [pc, #180]	@ (800ab68 <__ieee754_pow+0x798>)
 800aab2:	4413      	add	r3, r2
 800aab4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aab8:	4606      	mov	r6, r0
 800aaba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aabe:	460f      	mov	r7, r1
 800aac0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aac4:	f7f5 fbe2 	bl	800028c <__adddf3>
 800aac8:	4642      	mov	r2, r8
 800aaca:	464b      	mov	r3, r9
 800aacc:	f7f5 fbde 	bl	800028c <__adddf3>
 800aad0:	4632      	mov	r2, r6
 800aad2:	463b      	mov	r3, r7
 800aad4:	f7f5 fbda 	bl	800028c <__adddf3>
 800aad8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800aadc:	4632      	mov	r2, r6
 800aade:	463b      	mov	r3, r7
 800aae0:	4658      	mov	r0, fp
 800aae2:	460d      	mov	r5, r1
 800aae4:	f7f5 fbd0 	bl	8000288 <__aeabi_dsub>
 800aae8:	4642      	mov	r2, r8
 800aaea:	464b      	mov	r3, r9
 800aaec:	f7f5 fbcc 	bl	8000288 <__aeabi_dsub>
 800aaf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaf4:	f7f5 fbc8 	bl	8000288 <__aeabi_dsub>
 800aaf8:	465c      	mov	r4, fp
 800aafa:	4602      	mov	r2, r0
 800aafc:	e036      	b.n	800ab6c <__ieee754_pow+0x79c>
 800aafe:	bf00      	nop
 800ab00:	4a454eef 	.word	0x4a454eef
 800ab04:	3fca7e28 	.word	0x3fca7e28
 800ab08:	93c9db65 	.word	0x93c9db65
 800ab0c:	3fcd864a 	.word	0x3fcd864a
 800ab10:	a91d4101 	.word	0xa91d4101
 800ab14:	3fd17460 	.word	0x3fd17460
 800ab18:	518f264d 	.word	0x518f264d
 800ab1c:	3fd55555 	.word	0x3fd55555
 800ab20:	db6fabff 	.word	0xdb6fabff
 800ab24:	3fdb6db6 	.word	0x3fdb6db6
 800ab28:	33333303 	.word	0x33333303
 800ab2c:	3fe33333 	.word	0x3fe33333
 800ab30:	e0000000 	.word	0xe0000000
 800ab34:	3feec709 	.word	0x3feec709
 800ab38:	dc3a03fd 	.word	0xdc3a03fd
 800ab3c:	3feec709 	.word	0x3feec709
 800ab40:	145b01f5 	.word	0x145b01f5
 800ab44:	be3e2fe0 	.word	0xbe3e2fe0
 800ab48:	7ff00000 	.word	0x7ff00000
 800ab4c:	43400000 	.word	0x43400000
 800ab50:	0003988e 	.word	0x0003988e
 800ab54:	000bb679 	.word	0x000bb679
 800ab58:	0800b418 	.word	0x0800b418
 800ab5c:	3ff00000 	.word	0x3ff00000
 800ab60:	40080000 	.word	0x40080000
 800ab64:	0800b3f8 	.word	0x0800b3f8
 800ab68:	0800b408 	.word	0x0800b408
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab72:	e5d7      	b.n	800a724 <__ieee754_pow+0x354>
 800ab74:	f04f 0a01 	mov.w	sl, #1
 800ab78:	e65e      	b.n	800a838 <__ieee754_pow+0x468>
 800ab7a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800ae4c <__ieee754_pow+0xa7c>)
 800ab7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab80:	4630      	mov	r0, r6
 800ab82:	4639      	mov	r1, r7
 800ab84:	f7f5 fb82 	bl	800028c <__adddf3>
 800ab88:	4642      	mov	r2, r8
 800ab8a:	e9cd 0100 	strd	r0, r1, [sp]
 800ab8e:	464b      	mov	r3, r9
 800ab90:	4620      	mov	r0, r4
 800ab92:	4629      	mov	r1, r5
 800ab94:	f7f5 fb78 	bl	8000288 <__aeabi_dsub>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aba0:	f7f5 ffba 	bl	8000b18 <__aeabi_dcmpgt>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	f47f ae00 	bne.w	800a7aa <__ieee754_pow+0x3da>
 800abaa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800abae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800abb2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800abb6:	fa43 fa0a 	asr.w	sl, r3, sl
 800abba:	44da      	add	sl, fp
 800abbc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800abc0:	489d      	ldr	r0, [pc, #628]	@ (800ae38 <__ieee754_pow+0xa68>)
 800abc2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800abc6:	4108      	asrs	r0, r1
 800abc8:	ea00 030a 	and.w	r3, r0, sl
 800abcc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800abd0:	f1c1 0114 	rsb	r1, r1, #20
 800abd4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800abd8:	fa4a fa01 	asr.w	sl, sl, r1
 800abdc:	f1bb 0f00 	cmp.w	fp, #0
 800abe0:	4640      	mov	r0, r8
 800abe2:	4649      	mov	r1, r9
 800abe4:	f04f 0200 	mov.w	r2, #0
 800abe8:	bfb8      	it	lt
 800abea:	f1ca 0a00 	rsblt	sl, sl, #0
 800abee:	f7f5 fb4b 	bl	8000288 <__aeabi_dsub>
 800abf2:	4680      	mov	r8, r0
 800abf4:	4689      	mov	r9, r1
 800abf6:	4632      	mov	r2, r6
 800abf8:	463b      	mov	r3, r7
 800abfa:	4640      	mov	r0, r8
 800abfc:	4649      	mov	r1, r9
 800abfe:	f7f5 fb45 	bl	800028c <__adddf3>
 800ac02:	2400      	movs	r4, #0
 800ac04:	a37c      	add	r3, pc, #496	@ (adr r3, 800adf8 <__ieee754_pow+0xa28>)
 800ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	460d      	mov	r5, r1
 800ac0e:	f7f5 fcf3 	bl	80005f8 <__aeabi_dmul>
 800ac12:	4642      	mov	r2, r8
 800ac14:	e9cd 0100 	strd	r0, r1, [sp]
 800ac18:	464b      	mov	r3, r9
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	4629      	mov	r1, r5
 800ac1e:	f7f5 fb33 	bl	8000288 <__aeabi_dsub>
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	4630      	mov	r0, r6
 800ac28:	4639      	mov	r1, r7
 800ac2a:	f7f5 fb2d 	bl	8000288 <__aeabi_dsub>
 800ac2e:	a374      	add	r3, pc, #464	@ (adr r3, 800ae00 <__ieee754_pow+0xa30>)
 800ac30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac34:	f7f5 fce0 	bl	80005f8 <__aeabi_dmul>
 800ac38:	a373      	add	r3, pc, #460	@ (adr r3, 800ae08 <__ieee754_pow+0xa38>)
 800ac3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3e:	4680      	mov	r8, r0
 800ac40:	4689      	mov	r9, r1
 800ac42:	4620      	mov	r0, r4
 800ac44:	4629      	mov	r1, r5
 800ac46:	f7f5 fcd7 	bl	80005f8 <__aeabi_dmul>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4640      	mov	r0, r8
 800ac50:	4649      	mov	r1, r9
 800ac52:	f7f5 fb1b 	bl	800028c <__adddf3>
 800ac56:	4604      	mov	r4, r0
 800ac58:	460d      	mov	r5, r1
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac62:	f7f5 fb13 	bl	800028c <__adddf3>
 800ac66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac6a:	4680      	mov	r8, r0
 800ac6c:	4689      	mov	r9, r1
 800ac6e:	f7f5 fb0b 	bl	8000288 <__aeabi_dsub>
 800ac72:	4602      	mov	r2, r0
 800ac74:	460b      	mov	r3, r1
 800ac76:	4620      	mov	r0, r4
 800ac78:	4629      	mov	r1, r5
 800ac7a:	f7f5 fb05 	bl	8000288 <__aeabi_dsub>
 800ac7e:	4642      	mov	r2, r8
 800ac80:	4606      	mov	r6, r0
 800ac82:	460f      	mov	r7, r1
 800ac84:	464b      	mov	r3, r9
 800ac86:	4640      	mov	r0, r8
 800ac88:	4649      	mov	r1, r9
 800ac8a:	f7f5 fcb5 	bl	80005f8 <__aeabi_dmul>
 800ac8e:	a360      	add	r3, pc, #384	@ (adr r3, 800ae10 <__ieee754_pow+0xa40>)
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	4604      	mov	r4, r0
 800ac96:	460d      	mov	r5, r1
 800ac98:	f7f5 fcae 	bl	80005f8 <__aeabi_dmul>
 800ac9c:	a35e      	add	r3, pc, #376	@ (adr r3, 800ae18 <__ieee754_pow+0xa48>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f7f5 faf1 	bl	8000288 <__aeabi_dsub>
 800aca6:	4622      	mov	r2, r4
 800aca8:	462b      	mov	r3, r5
 800acaa:	f7f5 fca5 	bl	80005f8 <__aeabi_dmul>
 800acae:	a35c      	add	r3, pc, #368	@ (adr r3, 800ae20 <__ieee754_pow+0xa50>)
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	f7f5 faea 	bl	800028c <__adddf3>
 800acb8:	4622      	mov	r2, r4
 800acba:	462b      	mov	r3, r5
 800acbc:	f7f5 fc9c 	bl	80005f8 <__aeabi_dmul>
 800acc0:	a359      	add	r3, pc, #356	@ (adr r3, 800ae28 <__ieee754_pow+0xa58>)
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	f7f5 fadf 	bl	8000288 <__aeabi_dsub>
 800acca:	4622      	mov	r2, r4
 800accc:	462b      	mov	r3, r5
 800acce:	f7f5 fc93 	bl	80005f8 <__aeabi_dmul>
 800acd2:	a357      	add	r3, pc, #348	@ (adr r3, 800ae30 <__ieee754_pow+0xa60>)
 800acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd8:	f7f5 fad8 	bl	800028c <__adddf3>
 800acdc:	4622      	mov	r2, r4
 800acde:	462b      	mov	r3, r5
 800ace0:	f7f5 fc8a 	bl	80005f8 <__aeabi_dmul>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	4640      	mov	r0, r8
 800acea:	4649      	mov	r1, r9
 800acec:	f7f5 facc 	bl	8000288 <__aeabi_dsub>
 800acf0:	4604      	mov	r4, r0
 800acf2:	460d      	mov	r5, r1
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	4640      	mov	r0, r8
 800acfa:	4649      	mov	r1, r9
 800acfc:	f7f5 fc7c 	bl	80005f8 <__aeabi_dmul>
 800ad00:	2200      	movs	r2, #0
 800ad02:	e9cd 0100 	strd	r0, r1, [sp]
 800ad06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	f7f5 fabb 	bl	8000288 <__aeabi_dsub>
 800ad12:	4602      	mov	r2, r0
 800ad14:	460b      	mov	r3, r1
 800ad16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad1a:	f7f5 fd97 	bl	800084c <__aeabi_ddiv>
 800ad1e:	4632      	mov	r2, r6
 800ad20:	4604      	mov	r4, r0
 800ad22:	460d      	mov	r5, r1
 800ad24:	463b      	mov	r3, r7
 800ad26:	4640      	mov	r0, r8
 800ad28:	4649      	mov	r1, r9
 800ad2a:	f7f5 fc65 	bl	80005f8 <__aeabi_dmul>
 800ad2e:	4632      	mov	r2, r6
 800ad30:	463b      	mov	r3, r7
 800ad32:	f7f5 faab 	bl	800028c <__adddf3>
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	f7f5 faa3 	bl	8000288 <__aeabi_dsub>
 800ad42:	4642      	mov	r2, r8
 800ad44:	464b      	mov	r3, r9
 800ad46:	f7f5 fa9f 	bl	8000288 <__aeabi_dsub>
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	493b      	ldr	r1, [pc, #236]	@ (800ae3c <__ieee754_pow+0xa6c>)
 800ad50:	2000      	movs	r0, #0
 800ad52:	f7f5 fa99 	bl	8000288 <__aeabi_dsub>
 800ad56:	ec41 0b10 	vmov	d0, r0, r1
 800ad5a:	ee10 3a90 	vmov	r3, s1
 800ad5e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ad62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad66:	da30      	bge.n	800adca <__ieee754_pow+0x9fa>
 800ad68:	4650      	mov	r0, sl
 800ad6a:	f000 f8b9 	bl	800aee0 <scalbn>
 800ad6e:	ec51 0b10 	vmov	r0, r1, d0
 800ad72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad76:	f7ff bbd2 	b.w	800a51e <__ieee754_pow+0x14e>
 800ad7a:	4c31      	ldr	r4, [pc, #196]	@ (800ae40 <__ieee754_pow+0xa70>)
 800ad7c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ad80:	42a3      	cmp	r3, r4
 800ad82:	d91a      	bls.n	800adba <__ieee754_pow+0x9ea>
 800ad84:	4b2f      	ldr	r3, [pc, #188]	@ (800ae44 <__ieee754_pow+0xa74>)
 800ad86:	440b      	add	r3, r1
 800ad88:	4303      	orrs	r3, r0
 800ad8a:	d009      	beq.n	800ada0 <__ieee754_pow+0x9d0>
 800ad8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad90:	2200      	movs	r2, #0
 800ad92:	2300      	movs	r3, #0
 800ad94:	f7f5 fea2 	bl	8000adc <__aeabi_dcmplt>
 800ad98:	3800      	subs	r0, #0
 800ad9a:	bf18      	it	ne
 800ad9c:	2001      	movne	r0, #1
 800ad9e:	e42b      	b.n	800a5f8 <__ieee754_pow+0x228>
 800ada0:	4642      	mov	r2, r8
 800ada2:	464b      	mov	r3, r9
 800ada4:	f7f5 fa70 	bl	8000288 <__aeabi_dsub>
 800ada8:	4632      	mov	r2, r6
 800adaa:	463b      	mov	r3, r7
 800adac:	f7f5 feaa 	bl	8000b04 <__aeabi_dcmpge>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d1eb      	bne.n	800ad8c <__ieee754_pow+0x9bc>
 800adb4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800ae54 <__ieee754_pow+0xa84>
 800adb8:	e6f7      	b.n	800abaa <__ieee754_pow+0x7da>
 800adba:	469a      	mov	sl, r3
 800adbc:	4b22      	ldr	r3, [pc, #136]	@ (800ae48 <__ieee754_pow+0xa78>)
 800adbe:	459a      	cmp	sl, r3
 800adc0:	f63f aef3 	bhi.w	800abaa <__ieee754_pow+0x7da>
 800adc4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800adc8:	e715      	b.n	800abf6 <__ieee754_pow+0x826>
 800adca:	ec51 0b10 	vmov	r0, r1, d0
 800adce:	4619      	mov	r1, r3
 800add0:	e7cf      	b.n	800ad72 <__ieee754_pow+0x9a2>
 800add2:	491a      	ldr	r1, [pc, #104]	@ (800ae3c <__ieee754_pow+0xa6c>)
 800add4:	2000      	movs	r0, #0
 800add6:	f7ff bb18 	b.w	800a40a <__ieee754_pow+0x3a>
 800adda:	2000      	movs	r0, #0
 800addc:	2100      	movs	r1, #0
 800adde:	f7ff bb14 	b.w	800a40a <__ieee754_pow+0x3a>
 800ade2:	4630      	mov	r0, r6
 800ade4:	4639      	mov	r1, r7
 800ade6:	f7ff bb10 	b.w	800a40a <__ieee754_pow+0x3a>
 800adea:	460c      	mov	r4, r1
 800adec:	f7ff bb5e 	b.w	800a4ac <__ieee754_pow+0xdc>
 800adf0:	2400      	movs	r4, #0
 800adf2:	f7ff bb49 	b.w	800a488 <__ieee754_pow+0xb8>
 800adf6:	bf00      	nop
 800adf8:	00000000 	.word	0x00000000
 800adfc:	3fe62e43 	.word	0x3fe62e43
 800ae00:	fefa39ef 	.word	0xfefa39ef
 800ae04:	3fe62e42 	.word	0x3fe62e42
 800ae08:	0ca86c39 	.word	0x0ca86c39
 800ae0c:	be205c61 	.word	0xbe205c61
 800ae10:	72bea4d0 	.word	0x72bea4d0
 800ae14:	3e663769 	.word	0x3e663769
 800ae18:	c5d26bf1 	.word	0xc5d26bf1
 800ae1c:	3ebbbd41 	.word	0x3ebbbd41
 800ae20:	af25de2c 	.word	0xaf25de2c
 800ae24:	3f11566a 	.word	0x3f11566a
 800ae28:	16bebd93 	.word	0x16bebd93
 800ae2c:	3f66c16c 	.word	0x3f66c16c
 800ae30:	5555553e 	.word	0x5555553e
 800ae34:	3fc55555 	.word	0x3fc55555
 800ae38:	fff00000 	.word	0xfff00000
 800ae3c:	3ff00000 	.word	0x3ff00000
 800ae40:	4090cbff 	.word	0x4090cbff
 800ae44:	3f6f3400 	.word	0x3f6f3400
 800ae48:	3fe00000 	.word	0x3fe00000
 800ae4c:	652b82fe 	.word	0x652b82fe
 800ae50:	3c971547 	.word	0x3c971547
 800ae54:	4090cc00 	.word	0x4090cc00

0800ae58 <with_errno>:
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	ed2d 8b02 	vpush	{d8}
 800ae5e:	eeb0 8a40 	vmov.f32	s16, s0
 800ae62:	eef0 8a60 	vmov.f32	s17, s1
 800ae66:	4604      	mov	r4, r0
 800ae68:	f7fd f9d8 	bl	800821c <__errno>
 800ae6c:	eeb0 0a48 	vmov.f32	s0, s16
 800ae70:	eef0 0a68 	vmov.f32	s1, s17
 800ae74:	ecbd 8b02 	vpop	{d8}
 800ae78:	6004      	str	r4, [r0, #0]
 800ae7a:	bd10      	pop	{r4, pc}

0800ae7c <xflow>:
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	b507      	push	{r0, r1, r2, lr}
 800ae80:	ec51 0b10 	vmov	r0, r1, d0
 800ae84:	b183      	cbz	r3, 800aea8 <xflow+0x2c>
 800ae86:	4602      	mov	r2, r0
 800ae88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae8c:	e9cd 2300 	strd	r2, r3, [sp]
 800ae90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae94:	f7f5 fbb0 	bl	80005f8 <__aeabi_dmul>
 800ae98:	ec41 0b10 	vmov	d0, r0, r1
 800ae9c:	2022      	movs	r0, #34	@ 0x22
 800ae9e:	b003      	add	sp, #12
 800aea0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aea4:	f7ff bfd8 	b.w	800ae58 <with_errno>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	e7ee      	b.n	800ae8c <xflow+0x10>
	...

0800aeb0 <__math_uflow>:
 800aeb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aeb8 <__math_uflow+0x8>
 800aeb4:	f7ff bfe2 	b.w	800ae7c <xflow>
 800aeb8:	00000000 	.word	0x00000000
 800aebc:	10000000 	.word	0x10000000

0800aec0 <__math_oflow>:
 800aec0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800aec8 <__math_oflow+0x8>
 800aec4:	f7ff bfda 	b.w	800ae7c <xflow>
 800aec8:	00000000 	.word	0x00000000
 800aecc:	70000000 	.word	0x70000000

0800aed0 <fabs>:
 800aed0:	ec51 0b10 	vmov	r0, r1, d0
 800aed4:	4602      	mov	r2, r0
 800aed6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aeda:	ec43 2b10 	vmov	d0, r2, r3
 800aede:	4770      	bx	lr

0800aee0 <scalbn>:
 800aee0:	b570      	push	{r4, r5, r6, lr}
 800aee2:	ec55 4b10 	vmov	r4, r5, d0
 800aee6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800aeea:	4606      	mov	r6, r0
 800aeec:	462b      	mov	r3, r5
 800aeee:	b991      	cbnz	r1, 800af16 <scalbn+0x36>
 800aef0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800aef4:	4323      	orrs	r3, r4
 800aef6:	d03d      	beq.n	800af74 <scalbn+0x94>
 800aef8:	4b35      	ldr	r3, [pc, #212]	@ (800afd0 <scalbn+0xf0>)
 800aefa:	4620      	mov	r0, r4
 800aefc:	4629      	mov	r1, r5
 800aefe:	2200      	movs	r2, #0
 800af00:	f7f5 fb7a 	bl	80005f8 <__aeabi_dmul>
 800af04:	4b33      	ldr	r3, [pc, #204]	@ (800afd4 <scalbn+0xf4>)
 800af06:	429e      	cmp	r6, r3
 800af08:	4604      	mov	r4, r0
 800af0a:	460d      	mov	r5, r1
 800af0c:	da0f      	bge.n	800af2e <scalbn+0x4e>
 800af0e:	a328      	add	r3, pc, #160	@ (adr r3, 800afb0 <scalbn+0xd0>)
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	e01e      	b.n	800af54 <scalbn+0x74>
 800af16:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800af1a:	4291      	cmp	r1, r2
 800af1c:	d10b      	bne.n	800af36 <scalbn+0x56>
 800af1e:	4622      	mov	r2, r4
 800af20:	4620      	mov	r0, r4
 800af22:	4629      	mov	r1, r5
 800af24:	f7f5 f9b2 	bl	800028c <__adddf3>
 800af28:	4604      	mov	r4, r0
 800af2a:	460d      	mov	r5, r1
 800af2c:	e022      	b.n	800af74 <scalbn+0x94>
 800af2e:	460b      	mov	r3, r1
 800af30:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800af34:	3936      	subs	r1, #54	@ 0x36
 800af36:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800af3a:	4296      	cmp	r6, r2
 800af3c:	dd0d      	ble.n	800af5a <scalbn+0x7a>
 800af3e:	2d00      	cmp	r5, #0
 800af40:	a11d      	add	r1, pc, #116	@ (adr r1, 800afb8 <scalbn+0xd8>)
 800af42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af46:	da02      	bge.n	800af4e <scalbn+0x6e>
 800af48:	a11d      	add	r1, pc, #116	@ (adr r1, 800afc0 <scalbn+0xe0>)
 800af4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af4e:	a31a      	add	r3, pc, #104	@ (adr r3, 800afb8 <scalbn+0xd8>)
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	f7f5 fb50 	bl	80005f8 <__aeabi_dmul>
 800af58:	e7e6      	b.n	800af28 <scalbn+0x48>
 800af5a:	1872      	adds	r2, r6, r1
 800af5c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800af60:	428a      	cmp	r2, r1
 800af62:	dcec      	bgt.n	800af3e <scalbn+0x5e>
 800af64:	2a00      	cmp	r2, #0
 800af66:	dd08      	ble.n	800af7a <scalbn+0x9a>
 800af68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800af6c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800af70:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af74:	ec45 4b10 	vmov	d0, r4, r5
 800af78:	bd70      	pop	{r4, r5, r6, pc}
 800af7a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800af7e:	da08      	bge.n	800af92 <scalbn+0xb2>
 800af80:	2d00      	cmp	r5, #0
 800af82:	a10b      	add	r1, pc, #44	@ (adr r1, 800afb0 <scalbn+0xd0>)
 800af84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af88:	dac1      	bge.n	800af0e <scalbn+0x2e>
 800af8a:	a10f      	add	r1, pc, #60	@ (adr r1, 800afc8 <scalbn+0xe8>)
 800af8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af90:	e7bd      	b.n	800af0e <scalbn+0x2e>
 800af92:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800af96:	3236      	adds	r2, #54	@ 0x36
 800af98:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800af9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800afa0:	4620      	mov	r0, r4
 800afa2:	4b0d      	ldr	r3, [pc, #52]	@ (800afd8 <scalbn+0xf8>)
 800afa4:	4629      	mov	r1, r5
 800afa6:	2200      	movs	r2, #0
 800afa8:	e7d4      	b.n	800af54 <scalbn+0x74>
 800afaa:	bf00      	nop
 800afac:	f3af 8000 	nop.w
 800afb0:	c2f8f359 	.word	0xc2f8f359
 800afb4:	01a56e1f 	.word	0x01a56e1f
 800afb8:	8800759c 	.word	0x8800759c
 800afbc:	7e37e43c 	.word	0x7e37e43c
 800afc0:	8800759c 	.word	0x8800759c
 800afc4:	fe37e43c 	.word	0xfe37e43c
 800afc8:	c2f8f359 	.word	0xc2f8f359
 800afcc:	81a56e1f 	.word	0x81a56e1f
 800afd0:	43500000 	.word	0x43500000
 800afd4:	ffff3cb0 	.word	0xffff3cb0
 800afd8:	3c900000 	.word	0x3c900000

0800afdc <_init>:
 800afdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afde:	bf00      	nop
 800afe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afe2:	bc08      	pop	{r3}
 800afe4:	469e      	mov	lr, r3
 800afe6:	4770      	bx	lr

0800afe8 <_fini>:
 800afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afea:	bf00      	nop
 800afec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afee:	bc08      	pop	{r3}
 800aff0:	469e      	mov	lr, r3
 800aff2:	4770      	bx	lr
