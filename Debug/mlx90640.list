
mlx90640.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e0c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08009fa0  08009fa0  0000afa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a398  0800a398  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a398  0800a398  0000b398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3a0  0800a3a0  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3a0  0800a3a0  0000b3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3a4  0800a3a4  0000b3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a3a8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dcc  200001d8  0800a580  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002fa4  0800a580  0000cfa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1e8  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242d  00000000  00000000  000183f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  0001a820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000953  00000000  00000000  0001b480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000213eb  00000000  00000000  0001bdd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5f5  00000000  00000000  0003d1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c08ad  00000000  00000000  0004c7b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d060  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004408  00000000  00000000  0010d0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001114ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f84 	.word	0x08009f84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08009f84 	.word	0x08009f84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MLX90640_DumpEE>:
static int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
static int ValidateFrameData(uint16_t *frameData);
static int ValidateAuxData(uint16_t *auxData);

int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
     return MLX90640_I2CRead(slaveAddr, MLX90640_EEPROM_START_ADDRESS, MLX90640_EEPROM_DUMP_NUM, eeData);
 8000c94:	79f8      	ldrb	r0, [r7, #7]
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8000c9c:	f44f 5110 	mov.w	r1, #9216	@ 0x2400
 8000ca0:	f002 ff1e 	bl	8003ae0 <MLX90640_I2CRead>
 8000ca4:	4603      	mov	r3, r0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <MLX90640_GetFrameData>:

    return MLX90640_NO_ERROR;
}

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b0a6      	sub	sp, #152	@ 0x98
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	6039      	str	r1, [r7, #0]
 8000cb8:	71fb      	strb	r3, [r7, #7]
    uint16_t dataReady = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    uint16_t data[64];
    uint8_t cnt = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95

    while(dataReady == 0)
 8000ccc:	e016      	b.n	8000cfc <MLX90640_GetFrameData+0x4e>
    {
        error = MLX90640_I2CRead(slaveAddr, MLX90640_STATUS_REG, 1, &statusRegister);
 8000cce:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000cd2:	79f8      	ldrb	r0, [r7, #7]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cda:	f002 ff01 	bl	8003ae0 <MLX90640_I2CRead>
 8000cde:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
        if(error != MLX90640_NO_ERROR)
 8000ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <MLX90640_GetFrameData+0x42>
        {
            return error;
 8000cea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000cee:	e093      	b.n	8000e18 <MLX90640_GetFrameData+0x16a>
        }
        //dataReady = statusRegister & 0x0008;
        dataReady = MLX90640_GET_DATA_READY(statusRegister);
 8000cf0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    while(dataReady == 0)
 8000cfc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d0e4      	beq.n	8000cce <MLX90640_GetFrameData+0x20>
    }

    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	2230      	movs	r2, #48	@ 0x30
 8000d08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 ff33 	bl	8003b78 <MLX90640_I2CWrite>
 8000d12:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error == -MLX90640_I2C_NACK_ERROR)
 8000d16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d1e:	d102      	bne.n	8000d26 <MLX90640_GetFrameData+0x78>
    {
        return error;
 8000d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d24:	e078      	b.n	8000e18 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_PIXEL_DATA_START_ADDRESS, MLX90640_PIXEL_NUM, frameData);
 8000d26:	79f8      	ldrb	r0, [r7, #7]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000d2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d32:	f002 fed5 	bl	8003ae0 <MLX90640_I2CRead>
 8000d36:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error != MLX90640_NO_ERROR)
 8000d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d002      	beq.n	8000d48 <MLX90640_GetFrameData+0x9a>
    {
        return error;
 8000d42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d46:	e067      	b.n	8000e18 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_AUX_DATA_START_ADDRESS, MLX90640_AUX_NUM, data);
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	79f8      	ldrb	r0, [r7, #7]
 8000d4e:	2240      	movs	r2, #64	@ 0x40
 8000d50:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000d54:	f002 fec4 	bl	8003ae0 <MLX90640_I2CRead>
 8000d58:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error != MLX90640_NO_ERROR)
 8000d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <MLX90640_GetFrameData+0xbc>
    {
        return error;
 8000d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000d68:	e056      	b.n	8000e18 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 8000d6a:	f107 038e 	add.w	r3, r7, #142	@ 0x8e
 8000d6e:	79f8      	ldrb	r0, [r7, #7]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f248 010d 	movw	r1, #32781	@ 0x800d
 8000d76:	f002 feb3 	bl	8003ae0 <MLX90640_I2CRead>
 8000d7a:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    frameData[832] = controlRegister1;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8000d84:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8000d88:	801a      	strh	r2, [r3, #0]
    //frameData[833] = statusRegister & 0x0001;
    frameData[833] = MLX90640_GET_FRAME(statusRegister);
 8000d8a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	f203 6382 	addw	r3, r3, #1666	@ 0x682
 8000d94:	f002 0201 	and.w	r2, r2, #1
 8000d98:	b292      	uxth	r2, r2
 8000d9a:	801a      	strh	r2, [r3, #0]

    if(error != MLX90640_NO_ERROR)
 8000d9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <MLX90640_GetFrameData+0xfc>
    {
        return error;
 8000da4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000da8:	e036      	b.n	8000e18 <MLX90640_GetFrameData+0x16a>
    }

    error = ValidateAuxData(data);
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f867 	bl	8000e82 <ValidateAuxData>
 8000db4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if(error == MLX90640_NO_ERROR)
 8000db8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d11b      	bne.n	8000df8 <MLX90640_GetFrameData+0x14a>
    {
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 8000dc6:	e013      	b.n	8000df0 <MLX90640_GetFrameData+0x142>
        {
            frameData[cnt+MLX90640_PIXEL_NUM] = data[cnt];
 8000dc8:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000dcc:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
 8000dd0:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8000dd4:	0052      	lsls	r2, r2, #1
 8000dd6:	6839      	ldr	r1, [r7, #0]
 8000dd8:	440a      	add	r2, r1
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	3398      	adds	r3, #152	@ 0x98
 8000dde:	443b      	add	r3, r7
 8000de0:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8000de4:	8013      	strh	r3, [r2, #0]
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 8000de6:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000dea:	3301      	adds	r3, #1
 8000dec:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 8000df0:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000df4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000df6:	d9e7      	bls.n	8000dc8 <MLX90640_GetFrameData+0x11a>
        }
    }

    error = ValidateFrameData(frameData);
 8000df8:	6838      	ldr	r0, [r7, #0]
 8000dfa:	f000 f811 	bl	8000e20 <ValidateFrameData>
 8000dfe:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
    if (error != MLX90640_NO_ERROR)
 8000e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <MLX90640_GetFrameData+0x162>
    {
        return error;
 8000e0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e0e:	e003      	b.n	8000e18 <MLX90640_GetFrameData+0x16a>
    }

    return frameData[833];
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f203 6382 	addw	r3, r3, #1666	@ 0x682
 8000e16:	881b      	ldrh	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3798      	adds	r7, #152	@ 0x98
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <ValidateFrameData>:

static int ValidateFrameData(uint16_t *frameData)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
    uint8_t line = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]

    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	e01c      	b.n	8000e6c <ValidateFrameData+0x4c>
    {
        if((frameData[i] == 0x7FFF) && (line%2 == frameData[833])) return -MLX90640_FRAME_DATA_ERROR;
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d10d      	bne.n	8000e60 <ValidateFrameData+0x40>
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f203 6382 	addw	r3, r3, #1666	@ 0x682
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d102      	bne.n	8000e60 <ValidateFrameData+0x40>
 8000e5a:	f06f 0307 	mvn.w	r3, #7
 8000e5e:	e00a      	b.n	8000e76 <ValidateFrameData+0x56>
        line = line + 1;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	3301      	adds	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	3320      	adds	r3, #32
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000e72:	dbde      	blt.n	8000e32 <ValidateFrameData+0x12>
    }

    return MLX90640_NO_ERROR;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <ValidateAuxData>:

static int ValidateAuxData(uint16_t *auxData)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b089      	sub	sp, #36	@ 0x24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]

    if(auxData[0] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d102      	bne.n	8000e9c <ValidateAuxData+0x1a>
 8000e96:	f06f 0307 	mvn.w	r3, #7
 8000e9a:	e07e      	b.n	8000f9a <ValidateAuxData+0x118>

    for(int i=8; i<19; i++)
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	61fb      	str	r3, [r7, #28]
 8000ea0:	e00e      	b.n	8000ec0 <ValidateAuxData+0x3e>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d102      	bne.n	8000eba <ValidateAuxData+0x38>
 8000eb4:	f06f 0307 	mvn.w	r3, #7
 8000eb8:	e06f      	b.n	8000f9a <ValidateAuxData+0x118>
    for(int i=8; i<19; i++)
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	61fb      	str	r3, [r7, #28]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	2b12      	cmp	r3, #18
 8000ec4:	dded      	ble.n	8000ea2 <ValidateAuxData+0x20>
    }

    for(int i=20; i<23; i++)
 8000ec6:	2314      	movs	r3, #20
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	e00e      	b.n	8000eea <ValidateAuxData+0x68>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d102      	bne.n	8000ee4 <ValidateAuxData+0x62>
 8000ede:	f06f 0307 	mvn.w	r3, #7
 8000ee2:	e05a      	b.n	8000f9a <ValidateAuxData+0x118>
    for(int i=20; i<23; i++)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	2b16      	cmp	r3, #22
 8000eee:	dded      	ble.n	8000ecc <ValidateAuxData+0x4a>
    }

    for(int i=24; i<33; i++)
 8000ef0:	2318      	movs	r3, #24
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	e00e      	b.n	8000f14 <ValidateAuxData+0x92>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d102      	bne.n	8000f0e <ValidateAuxData+0x8c>
 8000f08:	f06f 0307 	mvn.w	r3, #7
 8000f0c:	e045      	b.n	8000f9a <ValidateAuxData+0x118>
    for(int i=24; i<33; i++)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	2b20      	cmp	r3, #32
 8000f18:	dded      	ble.n	8000ef6 <ValidateAuxData+0x74>
    }

    for(int i=40; i<51; i++)
 8000f1a:	2328      	movs	r3, #40	@ 0x28
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	e00e      	b.n	8000f3e <ValidateAuxData+0xbc>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	4413      	add	r3, r2
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d102      	bne.n	8000f38 <ValidateAuxData+0xb6>
 8000f32:	f06f 0307 	mvn.w	r3, #7
 8000f36:	e030      	b.n	8000f9a <ValidateAuxData+0x118>
    for(int i=40; i<51; i++)
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	2b32      	cmp	r3, #50	@ 0x32
 8000f42:	dded      	ble.n	8000f20 <ValidateAuxData+0x9e>
    }

    for(int i=52; i<55; i++)
 8000f44:	2334      	movs	r3, #52	@ 0x34
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	e00e      	b.n	8000f68 <ValidateAuxData+0xe6>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d102      	bne.n	8000f62 <ValidateAuxData+0xe0>
 8000f5c:	f06f 0307 	mvn.w	r3, #7
 8000f60:	e01b      	b.n	8000f9a <ValidateAuxData+0x118>
    for(int i=52; i<55; i++)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b36      	cmp	r3, #54	@ 0x36
 8000f6c:	dded      	ble.n	8000f4a <ValidateAuxData+0xc8>
    }

    for(int i=56; i<64; i++)
 8000f6e:	2338      	movs	r3, #56	@ 0x38
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	e00e      	b.n	8000f92 <ValidateAuxData+0x110>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d102      	bne.n	8000f8c <ValidateAuxData+0x10a>
 8000f86:	f06f 0307 	mvn.w	r3, #7
 8000f8a:	e006      	b.n	8000f9a <ValidateAuxData+0x118>
    for(int i=56; i<64; i++)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f96:	dded      	ble.n	8000f74 <ValidateAuxData+0xf2>
    }

    return MLX90640_NO_ERROR;
 8000f98:	2300      	movs	r3, #0

}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	@ 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <MLX90640_ExtractParameters>:

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
    int error = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]

    ExtractVDDParameters(eeData, mlx90640);
 8000fb4:	6839      	ldr	r1, [r7, #0]
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 fe82 	bl	8001cc0 <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 8000fbc:	6839      	ldr	r1, [r7, #0]
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 feaa 	bl	8001d18 <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 8000fc4:	6839      	ldr	r1, [r7, #0]
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 ff32 	bl	8001e30 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 8000fcc:	6839      	ldr	r1, [r7, #0]
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 ff40 	bl	8001e54 <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 8000fd4:	6839      	ldr	r1, [r7, #0]
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 ff58 	bl	8001e8c <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 8000fdc:	6839      	ldr	r1, [r7, #0]
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 ff6c 	bl	8001ebc <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 8000fe4:	6839      	ldr	r1, [r7, #0]
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 ff86 	bl	8001ef8 <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 8000fec:	6839      	ldr	r1, [r7, #0]
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f002 fa52 	bl	8003498 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 8000ff4:	6839      	ldr	r1, [r7, #0]
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f001 f83a 	bl	8002070 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 8000ffc:	6839      	ldr	r1, [r7, #0]
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f001 fbbe 	bl	8002780 <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 8001004:	6839      	ldr	r1, [r7, #0]
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f001 fdf6 	bl	8002bf8 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 800100c:	6839      	ldr	r1, [r7, #0]
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f002 f83a 	bl	8003088 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 8001014:	6839      	ldr	r1, [r7, #0]
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f002 fb7a 	bl	8003710 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);
 800101c:	6839      	ldr	r1, [r7, #0]
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f002 fc16 	bl	8003850 <ExtractDeviatingPixels>
 8001024:	60f8      	str	r0, [r7, #12]

    return error;
 8001026:	68fb      	ldr	r3, [r7, #12]

}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    uint16_t value;
    int error;

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	79f8      	ldrb	r0, [r7, #7]
 8001040:	2201      	movs	r2, #1
 8001042:	f248 010d 	movw	r1, #32781	@ 0x800d
 8001046:	f002 fd4b 	bl	8003ae0 <MLX90640_I2CRead>
 800104a:	60f8      	str	r0, [r7, #12]

    if(error == 0)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10b      	bne.n	800106a <MLX90640_SetChessMode+0x3a>
    {
        value = (controlRegister1 | MLX90640_CTRL_MEAS_MODE_MASK);
 8001052:	893b      	ldrh	r3, [r7, #8]
 8001054:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001058:	817b      	strh	r3, [r7, #10]
        error = MLX90640_I2CWrite(slaveAddr, MLX90640_CTRL_REG, value);
 800105a:	897a      	ldrh	r2, [r7, #10]
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f248 010d 	movw	r1, #32781	@ 0x800d
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fd88 	bl	8003b78 <MLX90640_I2CWrite>
 8001068:	60f8      	str	r0, [r7, #12]
    }

    return error;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	0000      	movs	r0, r0
	...

08001078 <MLX90640_CalculateTo>:
}

//------------------------------------------------------------------------------

void MLX90640_CalculateTo(uint16_t *frameData, const paramsMLX90640 *params, float emissivity, float tr, float *result)
{
 8001078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800107c:	b0a0      	sub	sp, #128	@ 0x80
 800107e:	af00      	add	r7, sp, #0
 8001080:	6178      	str	r0, [r7, #20]
 8001082:	6139      	str	r1, [r7, #16]
 8001084:	ed87 0a03 	vstr	s0, [r7, #12]
 8001088:	edc7 0a02 	vstr	s1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
    float kvScale;
    float alphaScale;
    float kta;
    float kv;

    subPage = frameData[833];
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	@ 0x682
 8001094:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    vdd = MLX90640_GetVdd(frameData, params);
 8001098:	6939      	ldr	r1, [r7, #16]
 800109a:	6978      	ldr	r0, [r7, #20]
 800109c:	f000 fd04 	bl	8001aa8 <MLX90640_GetVdd>
 80010a0:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
    ta = MLX90640_GetTa(frameData, params);
 80010a4:	6939      	ldr	r1, [r7, #16]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f000 fd76 	bl	8001b98 <MLX90640_GetTa>
 80010ac:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68

    ta4 = (ta + 273.15);
 80010b0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80010b2:	f7ff fa49 	bl	8000548 <__aeabi_f2d>
 80010b6:	a3e6      	add	r3, pc, #920	@ (adr r3, 8001450 <MLX90640_CalculateTo+0x3d8>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff f8e6 	bl	800028c <__adddf3>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fd8e 	bl	8000be8 <__aeabi_d2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	667b      	str	r3, [r7, #100]	@ 0x64
    ta4 = ta4 * ta4;
 80010d0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80010d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010d8:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    ta4 = ta4 * ta4;
 80010dc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80010e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010e4:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    tr4 = (tr + 273.15);
 80010e8:	68b8      	ldr	r0, [r7, #8]
 80010ea:	f7ff fa2d 	bl	8000548 <__aeabi_f2d>
 80010ee:	a3d8      	add	r3, pc, #864	@ (adr r3, 8001450 <MLX90640_CalculateTo+0x3d8>)
 80010f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f4:	f7ff f8ca 	bl	800028c <__adddf3>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	f7ff fd72 	bl	8000be8 <__aeabi_d2f>
 8001104:	4603      	mov	r3, r0
 8001106:	663b      	str	r3, [r7, #96]	@ 0x60
    tr4 = tr4 * tr4;
 8001108:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800110c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001110:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    tr4 = tr4 * tr4;
 8001114:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001118:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800111c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    taTr = tr4 - (tr4-ta4)/emissivity;
 8001120:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001124:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001128:	ee77 6a67 	vsub.f32	s13, s14, s15
 800112c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001134:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    ktaScale = POW2(params->ktaScale);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	@ 0xf4c
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9dc 	bl	8000504 <__aeabi_ui2d>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	ec43 2b11 	vmov	d1, r2, r3
 8001154:	ed9f 0bb8 	vldr	d0, [pc, #736]	@ 8001438 <MLX90640_CalculateTo+0x3c0>
 8001158:	f007 ff8c 	bl	8009074 <pow>
 800115c:	ec53 2b10 	vmov	r2, r3, d0
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f7ff fd40 	bl	8000be8 <__aeabi_d2f>
 8001168:	4603      	mov	r3, r0
 800116a:	65bb      	str	r3, [r7, #88]	@ 0x58
    kvScale = POW2(params->kvScale);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001172:	f893 324d 	ldrb.w	r3, [r3, #589]	@ 0x24d
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9c4 	bl	8000504 <__aeabi_ui2d>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	ec43 2b11 	vmov	d1, r2, r3
 8001184:	ed9f 0bac 	vldr	d0, [pc, #688]	@ 8001438 <MLX90640_CalculateTo+0x3c0>
 8001188:	f007 ff74 	bl	8009074 <pow>
 800118c:	ec53 2b10 	vmov	r2, r3, d0
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fd28 	bl	8000be8 <__aeabi_d2f>
 8001198:	4603      	mov	r3, r0
 800119a:	657b      	str	r3, [r7, #84]	@ 0x54
    alphaScale = POW2(params->alphaScale);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	f893 364a 	ldrb.w	r3, [r3, #1610]	@ 0x64a
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f9ae 	bl	8000504 <__aeabi_ui2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	ec43 2b11 	vmov	d1, r2, r3
 80011b0:	ed9f 0ba1 	vldr	d0, [pc, #644]	@ 8001438 <MLX90640_CalculateTo+0x3c0>
 80011b4:	f007 ff5e 	bl	8009074 <pow>
 80011b8:	ec53 2b10 	vmov	r2, r3, d0
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fd12 	bl	8000be8 <__aeabi_d2f>
 80011c4:	4603      	mov	r3, r0
 80011c6:	653b      	str	r3, [r7, #80]	@ 0x50

    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80011ce:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8001448 <MLX90640_CalculateTo+0x3d0>
 80011d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80011e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e6:	edc7 7a07 	vstr	s15, [r7, #28]
    alphaCorrR[1] = 1 ;
 80011ea:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80011ee:	623b      	str	r3, [r7, #32]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001208:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800120c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001210:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 8001214:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001224:	461a      	mov	r2, r3
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	ee07 3a90 	vmov	s15, r3
 8001232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001236:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800123e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

//------------------------- Gain calculation -----------------------------------

    gain = (float)params->gainEE / (int16_t)frameData[778];
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f203 6314 	addw	r3, r3, #1556	@ 0x614
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	b21b      	sxth	r3, r3
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800126e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

//------------------------- To calculation -------------------------------------
    mode = (frameData[832] & MLX90640_CTRL_MEAS_MODE_MASK) >> 5;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001282:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    irDataCP[0] = (int16_t)frameData[776] * gain;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f503 63c2 	add.w	r3, r3, #1552	@ 0x610
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	b21b      	sxth	r3, r3
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001298:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800129c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    irDataCP[1] = (int16_t)frameData[808] * gain;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80012ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012be:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 80012c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f93f 	bl	8000548 <__aeabi_f2d>
 80012ca:	4604      	mov	r4, r0
 80012cc:	460d      	mov	r5, r1
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012d4:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	@ 0x258
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	edd3 6a08 	vldr	s13, [r3, #32]
 80012e6:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80012ea:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 80012ee:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80012f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80012fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001302:	ee17 0a90 	vmov	r0, s15
 8001306:	f7ff f91f 	bl	8000548 <__aeabi_f2d>
 800130a:	4680      	mov	r8, r0
 800130c:	4689      	mov	r9, r1
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f918 	bl	8000548 <__aeabi_f2d>
 8001318:	4682      	mov	sl, r0
 800131a:	468b      	mov	fp, r1
 800131c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800131e:	f7ff f913 	bl	8000548 <__aeabi_f2d>
 8001322:	a347      	add	r3, pc, #284	@ (adr r3, 8001440 <MLX90640_CalculateTo+0x3c8>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7fe ffae 	bl	8000288 <__aeabi_dsub>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4650      	mov	r0, sl
 8001332:	4659      	mov	r1, fp
 8001334:	f7ff f960 	bl	80005f8 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4610      	mov	r0, r2
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	4b41      	ldr	r3, [pc, #260]	@ (800144c <MLX90640_CalculateTo+0x3d4>)
 8001346:	f7fe ffa1 	bl	800028c <__adddf3>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4640      	mov	r0, r8
 8001350:	4649      	mov	r1, r9
 8001352:	f7ff f951 	bl	80005f8 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4620      	mov	r0, r4
 800135c:	4629      	mov	r1, r5
 800135e:	f7fe ff93 	bl	8000288 <__aeabi_dsub>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fc3d 	bl	8000be8 <__aeabi_d2f>
 800136e:	4603      	mov	r3, r0
 8001370:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if( mode ==  params->calibrationModeEE)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001378:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800137c:	429a      	cmp	r2, r3
 800137e:	d16b      	bne.n	8001458 <MLX90640_CalculateTo+0x3e0>
    {
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 8001380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8e0 	bl	8000548 <__aeabi_f2d>
 8001388:	4604      	mov	r4, r0
 800138a:	460d      	mov	r5, r1
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001392:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	@ 0x25a
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	edd3 6a08 	vldr	s13, [r3, #32]
 80013a4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80013a8:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 80013ac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80013b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80013b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	ee17 0a90 	vmov	r0, s15
 80013c4:	f7ff f8c0 	bl	8000548 <__aeabi_f2d>
 80013c8:	4680      	mov	r8, r0
 80013ca:	4689      	mov	r9, r1
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8b9 	bl	8000548 <__aeabi_f2d>
 80013d6:	4682      	mov	sl, r0
 80013d8:	468b      	mov	fp, r1
 80013da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80013dc:	f7ff f8b4 	bl	8000548 <__aeabi_f2d>
 80013e0:	a317      	add	r3, pc, #92	@ (adr r3, 8001440 <MLX90640_CalculateTo+0x3c8>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f7fe ff4f 	bl	8000288 <__aeabi_dsub>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4650      	mov	r0, sl
 80013f0:	4659      	mov	r1, fp
 80013f2:	f7ff f901 	bl	80005f8 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b12      	ldr	r3, [pc, #72]	@ (800144c <MLX90640_CalculateTo+0x3d4>)
 8001404:	f7fe ff42 	bl	800028c <__adddf3>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4640      	mov	r0, r8
 800140e:	4649      	mov	r1, r9
 8001410:	f7ff f8f2 	bl	80005f8 <__aeabi_dmul>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4620      	mov	r0, r4
 800141a:	4629      	mov	r1, r5
 800141c:	f7fe ff34 	bl	8000288 <__aeabi_dsub>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fbde 	bl	8000be8 <__aeabi_d2f>
 800142c:	4603      	mov	r3, r0
 800142e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001430:	e071      	b.n	8001516 <MLX90640_CalculateTo+0x49e>
 8001432:	bf00      	nop
 8001434:	f3af 8000 	nop.w
 8001438:	00000000 	.word	0x00000000
 800143c:	40000000 	.word	0x40000000
 8001440:	66666666 	.word	0x66666666
 8001444:	400a6666 	.word	0x400a6666
 8001448:	42200000 	.word	0x42200000
 800144c:	3ff00000 	.word	0x3ff00000
 8001450:	66666666 	.word	0x66666666
 8001454:	40711266 	.word	0x40711266
    }
    else
    {
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 8001458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f874 	bl	8000548 <__aeabi_f2d>
 8001460:	4604      	mov	r4, r0
 8001462:	460d      	mov	r5, r1
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800146a:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	@ 0x25a
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800147c:	edd3 7a97 	vldr	s15, [r3, #604]	@ 0x25c
 8001480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	edd3 6a08 	vldr	s13, [r3, #32]
 800148a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800148e:	eeb3 6a09 	vmov.f32	s12, #57	@ 0x41c80000  25.0
 8001492:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800149e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80014a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a6:	ee17 0a90 	vmov	r0, s15
 80014aa:	f7ff f84d 	bl	8000548 <__aeabi_f2d>
 80014ae:	4680      	mov	r8, r0
 80014b0:	4689      	mov	r9, r1
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f846 	bl	8000548 <__aeabi_f2d>
 80014bc:	4682      	mov	sl, r0
 80014be:	468b      	mov	fp, r1
 80014c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80014c2:	f7ff f841 	bl	8000548 <__aeabi_f2d>
 80014c6:	a33e      	add	r3, pc, #248	@ (adr r3, 80015c0 <MLX90640_CalculateTo+0x548>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7fe fedc 	bl	8000288 <__aeabi_dsub>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4650      	mov	r0, sl
 80014d6:	4659      	mov	r1, fp
 80014d8:	f7ff f88e 	bl	80005f8 <__aeabi_dmul>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	4b37      	ldr	r3, [pc, #220]	@ (80015c8 <MLX90640_CalculateTo+0x550>)
 80014ea:	f7fe fecf 	bl	800028c <__adddf3>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4640      	mov	r0, r8
 80014f4:	4649      	mov	r1, r9
 80014f6:	f7ff f87f 	bl	80005f8 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4620      	mov	r0, r4
 8001500:	4629      	mov	r1, r5
 8001502:	f7fe fec1 	bl	8000288 <__aeabi_dsub>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fb6b 	bl	8000be8 <__aeabi_d2f>
 8001512:	4603      	mov	r3, r0
 8001514:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8001516:	2300      	movs	r3, #0
 8001518:	677b      	str	r3, [r7, #116]	@ 0x74
 800151a:	e2b5      	b.n	8001a88 <MLX90640_CalculateTo+0xa10>
    {
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2;
 800151c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800151e:	2b00      	cmp	r3, #0
 8001520:	da00      	bge.n	8001524 <MLX90640_CalculateTo+0x4ac>
 8001522:	331f      	adds	r3, #31
 8001524:	115b      	asrs	r3, r3, #5
 8001526:	b2da      	uxtb	r2, r3
 8001528:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800152a:	2b00      	cmp	r3, #0
 800152c:	da00      	bge.n	8001530 <MLX90640_CalculateTo+0x4b8>
 800152e:	333f      	adds	r3, #63	@ 0x3f
 8001530:	119b      	asrs	r3, r3, #6
 8001532:	b2db      	uxtb	r3, r3
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	b2db      	uxtb	r3, r3
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2);
 8001540:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001542:	2b00      	cmp	r3, #0
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	bfb8      	it	lt
 800154a:	425b      	neglt	r3, r3
 800154c:	b25a      	sxtb	r2, r3
 800154e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001552:	4053      	eors	r3, r2
 8001554:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8001558:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800155a:	3302      	adds	r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	da00      	bge.n	8001562 <MLX90640_CalculateTo+0x4ea>
 8001560:	3303      	adds	r3, #3
 8001562:	109b      	asrs	r3, r3, #2
 8001564:	461a      	mov	r2, r3
 8001566:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001568:	3303      	adds	r3, #3
 800156a:	2b00      	cmp	r3, #0
 800156c:	da00      	bge.n	8001570 <MLX90640_CalculateTo+0x4f8>
 800156e:	3303      	adds	r3, #3
 8001570:	109b      	asrs	r3, r3, #2
 8001572:	425b      	negs	r3, r3
 8001574:	441a      	add	r2, r3
 8001576:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001578:	3301      	adds	r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	da00      	bge.n	8001580 <MLX90640_CalculateTo+0x508>
 800157e:	3303      	adds	r3, #3
 8001580:	109b      	asrs	r3, r3, #2
 8001582:	441a      	add	r2, r3
 8001584:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001586:	2b00      	cmp	r3, #0
 8001588:	da00      	bge.n	800158c <MLX90640_CalculateTo+0x514>
 800158a:	3303      	adds	r3, #3
 800158c:	109b      	asrs	r3, r3, #2
 800158e:	425b      	negs	r3, r3
 8001590:	4413      	add	r3, r2
 8001592:	b2da      	uxtb	r2, r3
 8001594:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	f1c3 0301 	rsb	r3, r3, #1
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	fb12 f303 	smulbb	r3, r2, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

        if(mode == 0)
 80015aa:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10c      	bne.n	80015cc <MLX90640_CalculateTo+0x554>
        {
          pattern = ilPattern;
 80015b2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80015b6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 80015ba:	e00b      	b.n	80015d4 <MLX90640_CalculateTo+0x55c>
 80015bc:	f3af 8000 	nop.w
 80015c0:	66666666 	.word	0x66666666
 80015c4:	400a6666 	.word	0x400a6666
 80015c8:	3ff00000 	.word	0x3ff00000
        }
        else
        {
          pattern = chessPattern;
 80015cc:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80015d0:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
        }

        if(pattern == frameData[833])
 80015d4:	f997 307b 	ldrsb.w	r3, [r7, #123]	@ 0x7b
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	f202 6282 	addw	r2, r2, #1666	@ 0x682
 80015de:	8812      	ldrh	r2, [r2, #0]
 80015e0:	4293      	cmp	r3, r2
 80015e2:	f040 824e 	bne.w	8001a82 <MLX90640_CalculateTo+0xa0a>
        {
            irData = (int16_t)frameData[pixelNumber] * gain;
 80015e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4413      	add	r3, r2
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	ee07 3a90 	vmov	s15, r3
 80015f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fa:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80015fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001602:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

            kta = params->kta[pixelNumber]/ktaScale;
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800160a:	4413      	add	r3, r2
 800160c:	f603 434c 	addw	r3, r3, #3148	@ 0xc4c
 8001610:	f993 3000 	ldrsb.w	r3, [r3]
 8001614:	ee07 3a90 	vmov	s15, r3
 8001618:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800161c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001624:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            kv = params->kv[pixelNumber]/kvScale;
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800162c:	4413      	add	r3, r2
 800162e:	f603 734d 	addw	r3, r3, #3917	@ 0xf4d
 8001632:	f993 3000 	ldrsb.w	r3, [r3]
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800163e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001646:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
 800164a:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800164c:	f7fe ff7c 	bl	8000548 <__aeabi_f2d>
 8001650:	4604      	mov	r4, r0
 8001652:	460d      	mov	r5, r1
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001658:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800166c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001670:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 8001674:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001678:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800167c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001680:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168c:	ee17 0a90 	vmov	r0, s15
 8001690:	f7fe ff5a 	bl	8000548 <__aeabi_f2d>
 8001694:	4680      	mov	r8, r0
 8001696:	4689      	mov	r9, r1
 8001698:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800169a:	f7fe ff55 	bl	8000548 <__aeabi_f2d>
 800169e:	4682      	mov	sl, r0
 80016a0:	468b      	mov	fp, r1
 80016a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80016a4:	f7fe ff50 	bl	8000548 <__aeabi_f2d>
 80016a8:	a3c4      	add	r3, pc, #784	@ (adr r3, 80019bc <MLX90640_CalculateTo+0x944>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	f7fe fdeb 	bl	8000288 <__aeabi_dsub>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4650      	mov	r0, sl
 80016b8:	4659      	mov	r1, fp
 80016ba:	f7fe ff9d 	bl	80005f8 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4bbb      	ldr	r3, [pc, #748]	@ (80019b8 <MLX90640_CalculateTo+0x940>)
 80016cc:	f7fe fdde 	bl	800028c <__adddf3>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4640      	mov	r0, r8
 80016d6:	4649      	mov	r1, r9
 80016d8:	f7fe ff8e 	bl	80005f8 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4620      	mov	r0, r4
 80016e2:	4629      	mov	r1, r5
 80016e4:	f7fe fdd0 	bl	8000288 <__aeabi_dsub>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff fa7a 	bl	8000be8 <__aeabi_d2f>
 80016f4:	4603      	mov	r3, r0
 80016f6:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if(mode !=  params->calibrationModeEE)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016fe:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8001702:	429a      	cmp	r2, r3
 8001704:	d023      	beq.n	800174e <MLX90640_CalculateTo+0x6d6>
            {
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern;
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800170c:	ed93 7a99 	vldr	s14, [r3, #612]	@ 0x264
 8001710:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	3b01      	subs	r3, #1
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001724:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001728:	ee37 7a27 	vadd.f32	s14, s14, s15
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001732:	edd3 6a98 	vldr	s13, [r3, #608]	@ 0x260
 8001736:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174a:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
            }

            irData = irData - params->tgc * irDataCP[subPage];
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	ed93 7a06 	vldr	s14, [r3, #24]
 8001754:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	3380      	adds	r3, #128	@ 0x80
 800175c:	443b      	add	r3, r7
 800175e:	3b54      	subs	r3, #84	@ 0x54
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001768:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800176c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001770:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
            irData = irData / emissivity;
 8001774:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8001778:	ed97 7a03 	vldr	s14, [r7, #12]
 800177c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001780:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 8001784:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001786:	f7fe fedf 	bl	8000548 <__aeabi_f2d>
 800178a:	a387      	add	r3, pc, #540	@ (adr r3, 80019a8 <MLX90640_CalculateTo+0x930>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe ff32 	bl	80005f8 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4614      	mov	r4, r2
 800179a:	461d      	mov	r5, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80017a0:	3324      	adds	r3, #36	@ 0x24
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	885b      	ldrh	r3, [r3, #2]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe febb 	bl	8000524 <__aeabi_i2d>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4620      	mov	r0, r4
 80017b4:	4629      	mov	r1, r5
 80017b6:	f7ff f849 	bl	800084c <__aeabi_ddiv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f7ff fa11 	bl	8000be8 <__aeabi_d2f>
 80017c6:	4603      	mov	r3, r0
 80017c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80017d0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80017d4:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 80017d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80017dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017e8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80017ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 80017f4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80017f8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017fc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001800:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001804:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001808:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800180c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001810:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];
 8001820:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001822:	f7fe fe91 	bl	8000548 <__aeabi_f2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	ec43 2b10 	vmov	d0, r2, r3
 800182e:	f007 fc91 	bl	8009154 <sqrt>
 8001832:	eeb0 7a40 	vmov.f32	s14, s0
 8001836:	eef0 7a60 	vmov.f32	s15, s1
 800183a:	eeb0 0a47 	vmov.f32	s0, s14
 800183e:	eef0 0a67 	vmov.f32	s1, s15
 8001842:	f007 fc87 	bl	8009154 <sqrt>
 8001846:	ec55 4b10 	vmov	r4, r5, d0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe7a 	bl	8000548 <__aeabi_f2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4620      	mov	r0, r4
 800185a:	4629      	mov	r1, r5
 800185c:	f7fe fecc 	bl	80005f8 <__aeabi_dmul>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f9be 	bl	8000be8 <__aeabi_d2f>
 800186c:	4603      	mov	r3, r0
 800186e:	63bb      	str	r3, [r7, #56]	@ 0x38

            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;
 8001870:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001872:	f7fe fe69 	bl	8000548 <__aeabi_f2d>
 8001876:	4604      	mov	r4, r0
 8001878:	460d      	mov	r5, r1
 800187a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800187c:	f7fe fe64 	bl	8000548 <__aeabi_f2d>
 8001880:	4680      	mov	r8, r0
 8001882:	4689      	mov	r9, r1
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe5d 	bl	8000548 <__aeabi_f2d>
 800188e:	a348      	add	r3, pc, #288	@ (adr r3, 80019b0 <MLX90640_CalculateTo+0x938>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe feb0 	bl	80005f8 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	f04f 0000 	mov.w	r0, #0
 80018a0:	4945      	ldr	r1, [pc, #276]	@ (80019b8 <MLX90640_CalculateTo+0x940>)
 80018a2:	f7fe fcf1 	bl	8000288 <__aeabi_dsub>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4640      	mov	r0, r8
 80018ac:	4649      	mov	r1, r9
 80018ae:	f7fe fea3 	bl	80005f8 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4690      	mov	r8, r2
 80018b8:	4699      	mov	r9, r3
 80018ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80018bc:	f7fe fe44 	bl	8000548 <__aeabi_f2d>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4640      	mov	r0, r8
 80018c6:	4649      	mov	r1, r9
 80018c8:	f7fe fce0 	bl	800028c <__adddf3>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4620      	mov	r0, r4
 80018d2:	4629      	mov	r1, r5
 80018d4:	f7fe ffba 	bl	800084c <__aeabi_ddiv>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4614      	mov	r4, r2
 80018de:	461d      	mov	r5, r3
 80018e0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80018e2:	f7fe fe31 	bl	8000548 <__aeabi_f2d>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4620      	mov	r0, r4
 80018ec:	4629      	mov	r1, r5
 80018ee:	f7fe fccd 	bl	800028c <__adddf3>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	ec43 2b17 	vmov	d7, r2, r3
 80018fa:	eeb0 0a47 	vmov.f32	s0, s14
 80018fe:	eef0 0a67 	vmov.f32	s1, s15
 8001902:	f007 fc27 	bl	8009154 <sqrt>
 8001906:	eeb0 7a40 	vmov.f32	s14, s0
 800190a:	eef0 7a60 	vmov.f32	s15, s1
 800190e:	eeb0 0a47 	vmov.f32	s0, s14
 8001912:	eef0 0a67 	vmov.f32	s1, s15
 8001916:	f007 fc1d 	bl	8009154 <sqrt>
 800191a:	ec51 0b10 	vmov	r0, r1, d0
 800191e:	a324      	add	r3, pc, #144	@ (adr r3, 80019b0 <MLX90640_CalculateTo+0x938>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fcb0 	bl	8000288 <__aeabi_dsub>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff f95a 	bl	8000be8 <__aeabi_d2f>
 8001934:	4603      	mov	r3, r0
 8001936:	637b      	str	r3, [r7, #52]	@ 0x34

            if(To < params->ct[1])
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001946:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800194a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	d503      	bpl.n	800195c <MLX90640_CalculateTo+0x8e4>
            {
                range = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 800195a:	e036      	b.n	80019ca <MLX90640_CalculateTo+0x952>
            }
            else if(To < params->ct[2])
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001962:	ee07 3a90 	vmov	s15, r3
 8001966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800196e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	d503      	bpl.n	8001980 <MLX90640_CalculateTo+0x908>
            {
                range = 1;
 8001978:	2301      	movs	r3, #1
 800197a:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 800197e:	e024      	b.n	80019ca <MLX90640_CalculateTo+0x952>
            }
            else if(To < params->ct[3])
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199a:	d513      	bpl.n	80019c4 <MLX90640_CalculateTo+0x94c>
            {
                range = 2;
 800199c:	2302      	movs	r3, #2
 800199e:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 80019a2:	e012      	b.n	80019ca <MLX90640_CalculateTo+0x952>
 80019a4:	f3af 8000 	nop.w
 80019a8:	a0b5ed8d 	.word	0xa0b5ed8d
 80019ac:	3eb0c6f7 	.word	0x3eb0c6f7
 80019b0:	66666666 	.word	0x66666666
 80019b4:	40711266 	.word	0x40711266
 80019b8:	3ff00000 	.word	0x3ff00000
 80019bc:	66666666 	.word	0x66666666
 80019c0:	400a6666 	.word	0x400a6666
            }
            else
            {
                range = 3;
 80019c4:	2303      	movs	r3, #3
 80019c6:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
            }

            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15;
 80019ca:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	3380      	adds	r3, #128	@ 0x80
 80019d2:	443b      	add	r3, r7
 80019d4:	3b64      	subs	r3, #100	@ 0x64
 80019d6:	ed93 7a00 	vldr	s14, [r3]
 80019da:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80019de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e2:	f997 307a 	ldrsb.w	r3, [r7, #122]	@ 0x7a
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	330a      	adds	r3, #10
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	3304      	adds	r3, #4
 80019f0:	edd3 6a00 	vldr	s13, [r3]
 80019f4:	f997 207a 	ldrsb.w	r2, [r7, #122]	@ 0x7a
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	3220      	adds	r2, #32
 80019fc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a08:	ed97 6a0d 	vldr	s12, [r7, #52]	@ 0x34
 8001a0c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a20:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8001a24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a28:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a30:	ee17 0a90 	vmov	r0, s15
 8001a34:	f7fe fd88 	bl	8000548 <__aeabi_f2d>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	ec43 2b10 	vmov	d0, r2, r3
 8001a40:	f007 fb88 	bl	8009154 <sqrt>
 8001a44:	eeb0 7a40 	vmov.f32	s14, s0
 8001a48:	eef0 7a60 	vmov.f32	s15, s1
 8001a4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a50:	eef0 0a67 	vmov.f32	s1, s15
 8001a54:	f007 fb7e 	bl	8009154 <sqrt>
 8001a58:	ec51 0b10 	vmov	r0, r1, d0
 8001a5c:	a310      	add	r3, pc, #64	@ (adr r3, 8001aa0 <MLX90640_CalculateTo+0xa28>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe fc11 	bl	8000288 <__aeabi_dsub>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f7ff f8bb 	bl	8000be8 <__aeabi_d2f>
 8001a72:	4603      	mov	r3, r0
 8001a74:	637b      	str	r3, [r7, #52]	@ 0x34

            result[pixelNumber] = To;
 8001a76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a80:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8001a82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a84:	3301      	adds	r3, #1
 8001a86:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001a8e:	f6ff ad45 	blt.w	800151c <MLX90640_CalculateTo+0x4a4>
        }
    }
}
 8001a92:	bf00      	nop
 8001a94:	bf00      	nop
 8001a96:	3780      	adds	r7, #128	@ 0x80
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a9e:	bf00      	nop
 8001aa0:	66666666 	.word	0x66666666
 8001aa4:	40711266 	.word	0x40711266

08001aa8 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    uint16_t resolutionRAM;

    resolutionRAM = (frameData[832] & ~MLX90640_CTRL_RESOLUTION_MASK) >> MLX90640_CTRL_RESOLUTION_SHIFT;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f503 63d0 	add.w	r3, r3, #1664	@ 0x680
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	0a9b      	lsrs	r3, r3, #10
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	82fb      	strh	r3, [r7, #22]
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd1a 	bl	8000504 <__aeabi_ui2d>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	ec43 2b11 	vmov	d1, r2, r3
 8001ad8:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8001b88 <MLX90640_GetVdd+0xe0>
 8001adc:	f007 faca 	bl	8009074 <pow>
 8001ae0:	ec55 4b10 	vmov	r4, r5, d0
 8001ae4:	8afb      	ldrh	r3, [r7, #22]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd0c 	bl	8000504 <__aeabi_ui2d>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	ec43 2b11 	vmov	d1, r2, r3
 8001af4:	ed9f 0b24 	vldr	d0, [pc, #144]	@ 8001b88 <MLX90640_GetVdd+0xe0>
 8001af8:	f007 fabc 	bl	8009074 <pow>
 8001afc:	ec53 2b10 	vmov	r2, r3, d0
 8001b00:	4620      	mov	r0, r4
 8001b02:	4629      	mov	r1, r5
 8001b04:	f7fe fea2 	bl	800084c <__aeabi_ddiv>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7ff f86a 	bl	8000be8 <__aeabi_d2f>
 8001b14:	4603      	mov	r3, r0
 8001b16:	613b      	str	r3, [r7, #16]
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f203 6354 	addw	r3, r3, #1620	@ 0x654
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b21b      	sxth	r3, r3
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b52:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b56:	ee16 0a90 	vmov	r0, s13
 8001b5a:	f7fe fcf5 	bl	8000548 <__aeabi_f2d>
 8001b5e:	a30c      	add	r3, pc, #48	@ (adr r3, 8001b90 <MLX90640_GetVdd+0xe8>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fb92 	bl	800028c <__adddf3>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7ff f83a 	bl	8000be8 <__aeabi_d2f>
 8001b74:	4603      	mov	r3, r0
 8001b76:	60fb      	str	r3, [r7, #12]

    return vdd;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	ee07 3a90 	vmov	s15, r3
}
 8001b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bdb0      	pop	{r4, r5, r7, pc}
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	40000000 	.word	0x40000000
 8001b90:	66666666 	.word	0x66666666
 8001b94:	400a6666 	.word	0x400a6666

08001b98 <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 8001b98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
    int16_t ptat;
    float ptatArt;
    float vdd;
    float ta;

    vdd = MLX90640_GetVdd(frameData, params);
 8001ba4:	6839      	ldr	r1, [r7, #0]
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ff7e 	bl	8001aa8 <MLX90640_GetVdd>
 8001bac:	ed87 0a05 	vstr	s0, [r7, #20]

    ptat = (int16_t)frameData[800];
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	827b      	strh	r3, [r7, #18]

    ptatArt = (ptat / (ptat * params->alphaPTAT + (int16_t)frameData[768])) * POW2(18);
 8001bba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	ee07 3a90 	vmov	s15, r3
 8001bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bf6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001cb8 <MLX90640_GetTa+0x120>
 8001bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bfe:	edc7 7a03 	vstr	s15, [r7, #12]

    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3)) - params->vPTAT25);
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f7fe fca0 	bl	8000548 <__aeabi_f2d>
 8001c08:	4604      	mov	r4, r0
 8001c0a:	460d      	mov	r5, r1
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc99 	bl	8000548 <__aeabi_f2d>
 8001c16:	4680      	mov	r8, r0
 8001c18:	4689      	mov	r9, r1
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f7fe fc94 	bl	8000548 <__aeabi_f2d>
 8001c20:	a323      	add	r3, pc, #140	@ (adr r3, 8001cb0 <MLX90640_GetTa+0x118>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	f7fe fb2f 	bl	8000288 <__aeabi_dsub>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4640      	mov	r0, r8
 8001c30:	4649      	mov	r1, r9
 8001c32:	f7fe fce1 	bl	80005f8 <__aeabi_dmul>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	4b1e      	ldr	r3, [pc, #120]	@ (8001cbc <MLX90640_GetTa+0x124>)
 8001c44:	f7fe fb22 	bl	800028c <__adddf3>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe fdfc 	bl	800084c <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4614      	mov	r4, r2
 8001c5a:	461d      	mov	r5, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	899b      	ldrh	r3, [r3, #12]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fc5f 	bl	8000524 <__aeabi_i2d>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	f7fe fb0b 	bl	8000288 <__aeabi_dsub>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe ffb5 	bl	8000be8 <__aeabi_d2f>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	60bb      	str	r3, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c88:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c90:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001c94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c98:	edc7 7a02 	vstr	s15, [r7, #8]

    return ta;
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	ee07 3a90 	vmov	s15, r3
}
 8001ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cae:	bf00      	nop
 8001cb0:	66666666 	.word	0x66666666
 8001cb4:	400a6666 	.word	0x400a6666
 8001cb8:	48800000 	.word	0x48800000
 8001cbc:	3ff00000 	.word	0x3ff00000

08001cc0 <ExtractVDDParameters>:
}

//------------------------------------------------------------------------------

static void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
    int8_t kVdd;
    int16_t vdd25;

    kVdd = MLX90640_MS_BYTE(eeData[51]);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3366      	adds	r3, #102	@ 0x66
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	73fb      	strb	r3, [r7, #15]

    vdd25 = MLX90640_LS_BYTE(eeData[51]);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3366      	adds	r3, #102	@ 0x66
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8001ce2:	89bb      	ldrh	r3, [r7, #12]
 8001ce4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	015b      	lsls	r3, r3, #5
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	81bb      	strh	r3, [r7, #12]

    mlx90640->kVdd = 32 * kVdd;
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	015b      	lsls	r3, r3, #5
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	89ba      	ldrh	r2, [r7, #12]
 8001d0a:	805a      	strh	r2, [r3, #2]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

static void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;

    KvPTAT = (eeData[50] & MLX90640_MSBITS_6_MASK) >> 10;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3364      	adds	r3, #100	@ 0x64
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	0a9b      	lsrs	r3, r3, #10
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d34:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 8001d38:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d3c:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8001d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d48:	dd07      	ble.n	8001d5a <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 8001d4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d4e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001e18 <ExtractPTATParameters+0x100>
 8001d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d56:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 8001d5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d5e:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001e1c <ExtractPTATParameters+0x104>
 8001d62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d66:	edc7 7a05 	vstr	s15, [r7, #20]

    KtPTAT = eeData[50] & MLX90640_LSBITS_10_MASK;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3364      	adds	r3, #100	@ 0x64
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d74:	ee07 3a90 	vmov	s15, r3
 8001d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d7c:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 8001d80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d84:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001e20 <ExtractPTATParameters+0x108>
 8001d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d90:	dd07      	ble.n	8001da2 <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 8001d92:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d96:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001e24 <ExtractPTATParameters+0x10c>
 8001d9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d9e:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 8001da2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001da6:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8001daa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dae:	edc7 7a04 	vstr	s15, [r7, #16]

    vPTAT25 = eeData[49];
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3362      	adds	r3, #98	@ 0x62
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	81fb      	strh	r3, [r7, #14]

    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3320      	adds	r3, #32
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fbad 	bl	8000524 <__aeabi_i2d>
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <ExtractPTATParameters+0x110>)
 8001dd0:	f7fe fd3c 	bl	800084c <__aeabi_ddiv>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	4b12      	ldr	r3, [pc, #72]	@ (8001e2c <ExtractPTATParameters+0x114>)
 8001de2:	f7fe fa53 	bl	800028c <__adddf3>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f7fe fefb 	bl	8000be8 <__aeabi_d2f>
 8001df2:	4603      	mov	r3, r0
 8001df4:	60bb      	str	r3, [r7, #8]

    mlx90640->KvPTAT = KvPTAT;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 8001e02:	89fa      	ldrh	r2, [r7, #14]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	611a      	str	r2, [r3, #16]
}
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	42800000 	.word	0x42800000
 8001e1c:	45800000 	.word	0x45800000
 8001e20:	43ff8000 	.word	0x43ff8000
 8001e24:	44800000 	.word	0x44800000
 8001e28:	40d00000 	.word	0x40d00000
 8001e2c:	40200000 	.word	0x40200000

08001e30 <ExtractGainParameters>:

//------------------------------------------------------------------------------

static void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
    mlx90640->gainEE = (int16_t)eeData[48];;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3360      	adds	r3, #96	@ 0x60
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	b21a      	sxth	r2, r3
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	829a      	strh	r2, [r3, #20]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <ExtractTgcParameters>:

//------------------------------------------------------------------------------

static void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
    mlx90640->tgc = (int8_t)MLX90640_LS_BYTE(eeData[60]) / 32.0f;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3378      	adds	r3, #120	@ 0x78
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b25b      	sxtb	r3, r3
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6e:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001e88 <ExtractTgcParameters+0x34>
 8001e72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	42000000 	.word	0x42000000

08001e8c <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

static void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3370      	adds	r3, #112	@ 0x70
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	131b      	asrs	r3, r3, #12
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	73fb      	strb	r3, [r7, #15]

    mlx90640->resolutionEE = resolutionEE;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

static void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
    mlx90640->KsTa = (int8_t)MLX90640_MS_BYTE(eeData[60]) / 8192.0f;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3378      	adds	r3, #120	@ 0x78
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	b25b      	sxtb	r3, r3
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eda:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001ef4 <ExtractKsTaParameters+0x38>
 8001ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	46000000 	.word	0x46000000

08001ef8 <ExtractKsToParameters>:

//------------------------------------------------------------------------------

static void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
    int32_t KsToScale;
    int8_t step;

    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	337e      	adds	r3, #126	@ 0x7e
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	131b      	asrs	r3, r3, #12
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	0092      	lsls	r2, r2, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	73fb      	strb	r3, [r7, #15]

    mlx90640->ct[0] = -40;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	f64f 72d8 	movw	r2, #65496	@ 0xffd8
 8001f24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    mlx90640->ct[1] = 0;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    mlx90640->ct[2] = MLX90640_NIBBLE2(eeData[63]);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	337e      	adds	r3, #126	@ 0x7e
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	111b      	asrs	r3, r3, #4
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mlx90640->ct[3] = MLX90640_NIBBLE3(eeData[63]);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	337e      	adds	r3, #126	@ 0x7e
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	121b      	asrs	r3, r3, #8
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	b21a      	sxth	r2, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	fb12 f303 	smulbb	r3, r2, r3
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	b21a      	sxth	r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001f86:	b299      	uxth	r1, r3
 8001f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	fb11 f303 	smulbb	r3, r1, r3
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	b21a      	sxth	r2, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    mlx90640->ct[4] = 400;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001fa6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

    KsToScale = MLX90640_NIBBLE1(eeData[63]) + 8;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	337e      	adds	r3, #126	@ 0x7e
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	3308      	adds	r3, #8
 8001fb6:	60bb      	str	r3, [r7, #8]
    KsToScale = 1UL << KsToScale;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	60bb      	str	r3, [r7, #8]

    mlx90640->ksTo[0] = (int8_t)MLX90640_LS_BYTE(eeData[61]) / (float)KsToScale;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	337a      	adds	r3, #122	@ 0x7a
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b25b      	sxtb	r3, r3
 8001fca:	ee07 3a90 	vmov	s15, r3
 8001fce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    mlx90640->ksTo[1] = (int8_t)MLX90640_MS_BYTE(eeData[61]) / (float)KsToScale;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	337a      	adds	r3, #122	@ 0x7a
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	b25b      	sxtb	r3, r3
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    mlx90640->ksTo[2] = (int8_t)MLX90640_LS_BYTE(eeData[62]) / (float)KsToScale;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	337c      	adds	r3, #124	@ 0x7c
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b25b      	sxtb	r3, r3
 8002016:	ee07 3a90 	vmov	s15, r3
 800201a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	ee07 3a90 	vmov	s15, r3
 8002024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    mlx90640->ksTo[3] = (int8_t)MLX90640_MS_BYTE(eeData[62]) / (float)KsToScale;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	337c      	adds	r3, #124	@ 0x7c
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	b29b      	uxth	r3, r3
 800203c:	b25b      	sxtb	r3, r3
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    mlx90640->ksTo[4] = -0.0002;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	4a03      	ldr	r2, [pc, #12]	@ (800206c <ExtractKsToParameters+0x174>)
 800205e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	b951b717 	.word	0xb951b717

08002070 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

static void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	f5ad 6d52 	sub.w	sp, sp, #3360	@ 0xd20
 8002076:	af00      	add	r7, sp, #0
 8002078:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800207c:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8002080:	6018      	str	r0, [r3, #0]
 8002082:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002086:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800208a:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;


    accRemScale = MLX90640_NIBBLE1(eeData[32]);
 8002092:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002096:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3340      	adds	r3, #64	@ 0x40
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	f887 3cf3 	strb.w	r3, [r7, #3315]	@ 0xcf3
    accColumnScale = MLX90640_NIBBLE2(eeData[32]);
 80020aa:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80020ae:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	3340      	adds	r3, #64	@ 0x40
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	111b      	asrs	r3, r3, #4
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	f887 3cf2 	strb.w	r3, [r7, #3314]	@ 0xcf2
    accRowScale = MLX90640_NIBBLE3(eeData[32]);
 80020c4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80020c8:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3340      	adds	r3, #64	@ 0x40
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	121b      	asrs	r3, r3, #8
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	f887 3cf1 	strb.w	r3, [r7, #3313]	@ 0xcf1
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 30;
 80020de:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80020e2:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3340      	adds	r3, #64	@ 0x40
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	0b1b      	lsrs	r3, r3, #12
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	331e      	adds	r3, #30
 80020f4:	f887 3d1f 	strb.w	r3, [r7, #3359]	@ 0xd1f
    alphaRef = eeData[33];
 80020f8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80020fc:	f6a3 531c 	subw	r3, r3, #3356	@ 0xd1c
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3342      	adds	r3, #66	@ 0x42
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	f8c7 3cec 	str.w	r3, [r7, #3308]	@ 0xcec

    for(int i = 0; i < 6; i++)
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 3d14 	str.w	r3, [r7, #3348]	@ 0xd14
 8002110:	e062      	b.n	80021d8 <ExtractAlphaParameters+0x168>
    {
        p = i * 4;
 8002112:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
        accRow[p + 0] = MLX90640_NIBBLE1(eeData[34 + i]);
 800211c:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 8002120:	3322      	adds	r3, #34	@ 0x22
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8002128:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	4413      	add	r3, r2
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	f003 020f 	and.w	r2, r3, #15
 8002136:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 8002140:	443b      	add	r3, r7
 8002142:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = MLX90640_NIBBLE2(eeData[34 + i]);
 8002146:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 800214a:	3322      	adds	r3, #34	@ 0x22
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8002152:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	4413      	add	r3, r2
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	111a      	asrs	r2, r3, #4
 800215e:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002162:	3301      	adds	r3, #1
 8002164:	f002 020f 	and.w	r2, r2, #15
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 800216e:	443b      	add	r3, r7
 8002170:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = MLX90640_NIBBLE3(eeData[34 + i]);
 8002174:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 8002178:	3322      	adds	r3, #34	@ 0x22
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8002180:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	4413      	add	r3, r2
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	121a      	asrs	r2, r3, #8
 800218c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002190:	3302      	adds	r3, #2
 8002192:	f002 020f 	and.w	r2, r2, #15
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 800219c:	443b      	add	r3, r7
 800219e:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = MLX90640_NIBBLE4(eeData[34 + i]);
 80021a2:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 80021a6:	3322      	adds	r3, #34	@ 0x22
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80021ae:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	4413      	add	r3, r2
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	0b1b      	lsrs	r3, r3, #12
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80021c0:	3303      	adds	r3, #3
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 80021c8:	443b      	add	r3, r7
 80021ca:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 80021ce:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 80021d2:	3301      	adds	r3, #1
 80021d4:	f8c7 3d14 	str.w	r3, [r7, #3348]	@ 0xd14
 80021d8:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	@ 0xd14
 80021dc:	2b05      	cmp	r3, #5
 80021de:	dd98      	ble.n	8002112 <ExtractAlphaParameters+0xa2>
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 3d10 	str.w	r3, [r7, #3344]	@ 0xd10
 80021e6:	e020      	b.n	800222a <ExtractAlphaParameters+0x1ba>
    {
        if (accRow[i] > 7)
 80021e8:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 80021f2:	443b      	add	r3, r7
 80021f4:	f853 3c94 	ldr.w	r3, [r3, #-148]
 80021f8:	2b07      	cmp	r3, #7
 80021fa:	dd11      	ble.n	8002220 <ExtractAlphaParameters+0x1b0>
        {
            accRow[i] = accRow[i] - 16;
 80021fc:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 8002206:	443b      	add	r3, r7
 8002208:	f853 3c94 	ldr.w	r3, [r3, #-148]
 800220c:	f1a3 0210 	sub.w	r2, r3, #16
 8002210:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 800221a:	443b      	add	r3, r7
 800221c:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002220:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 8002224:	3301      	adds	r3, #1
 8002226:	f8c7 3d10 	str.w	r3, [r7, #3344]	@ 0xd10
 800222a:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	@ 0xd10
 800222e:	2b17      	cmp	r3, #23
 8002230:	ddda      	ble.n	80021e8 <ExtractAlphaParameters+0x178>
        }
    }

    for(int i = 0; i < 8; i++)
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 3d0c 	str.w	r3, [r7, #3340]	@ 0xd0c
 8002238:	e062      	b.n	8002300 <ExtractAlphaParameters+0x290>
    {
        p = i * 4;
 800223a:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
        accColumn[p + 0] = MLX90640_NIBBLE1(eeData[40 + i]);
 8002244:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 8002248:	3328      	adds	r3, #40	@ 0x28
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8002250:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	4413      	add	r3, r2
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	f003 010f 	and.w	r1, r3, #15
 800225e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002262:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002266:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 800226a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = MLX90640_NIBBLE2(eeData[40 + i]);
 800226e:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 8002272:	3328      	adds	r3, #40	@ 0x28
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 800227a:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	4413      	add	r3, r2
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	111b      	asrs	r3, r3, #4
 8002286:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 800228a:	3201      	adds	r2, #1
 800228c:	f003 010f 	and.w	r1, r3, #15
 8002290:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002294:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = MLX90640_NIBBLE3(eeData[40 + i]);
 800229c:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 80022a0:	3328      	adds	r3, #40	@ 0x28
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80022a8:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	121b      	asrs	r3, r3, #8
 80022b4:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	@ 0xcf4
 80022b8:	3202      	adds	r2, #2
 80022ba:	f003 010f 	and.w	r1, r3, #15
 80022be:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80022c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = MLX90640_NIBBLE4(eeData[40 + i]);
 80022ca:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 80022ce:	3328      	adds	r3, #40	@ 0x28
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80022d6:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	0b1b      	lsrs	r3, r3, #12
 80022e2:	b299      	uxth	r1, r3
 80022e4:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80022e8:	1cda      	adds	r2, r3, #3
 80022ea:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80022ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80022f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 80022f6:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 80022fa:	3301      	adds	r3, #1
 80022fc:	f8c7 3d0c 	str.w	r3, [r7, #3340]	@ 0xd0c
 8002300:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	@ 0xd0c
 8002304:	2b07      	cmp	r3, #7
 8002306:	dd98      	ble.n	800223a <ExtractAlphaParameters+0x1ca>
    }

    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 3d08 	str.w	r3, [r7, #3336]	@ 0xd08
 800230e:	e020      	b.n	8002352 <ExtractAlphaParameters+0x2e2>
    {
        if (accColumn[i] > 7)
 8002310:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002314:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002318:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	@ 0xd08
 800231c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002320:	2b07      	cmp	r3, #7
 8002322:	dd11      	ble.n	8002348 <ExtractAlphaParameters+0x2d8>
        {
            accColumn[i] = accColumn[i] - 16;
 8002324:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002328:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800232c:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	@ 0xd08
 8002330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002334:	f1a3 0110 	sub.w	r1, r3, #16
 8002338:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800233c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002340:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	@ 0xd08
 8002344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 8002348:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	@ 0xd08
 800234c:	3301      	adds	r3, #1
 800234e:	f8c7 3d08 	str.w	r3, [r7, #3336]	@ 0xd08
 8002352:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	@ 0xd08
 8002356:	2b1f      	cmp	r3, #31
 8002358:	ddda      	ble.n	8002310 <ExtractAlphaParameters+0x2a0>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 3d04 	str.w	r3, [r7, #3332]	@ 0xd04
 8002360:	e13e      	b.n	80025e0 <ExtractAlphaParameters+0x570>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8002362:	2300      	movs	r3, #0
 8002364:	f8c7 3d00 	str.w	r3, [r7, #3328]	@ 0xd00
 8002368:	e130      	b.n	80025cc <ExtractAlphaParameters+0x55c>
        {
            p = 32 * i +j;
 800236a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 800236e:	015b      	lsls	r3, r3, #5
 8002370:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	@ 0xd00
 8002374:	4413      	add	r3, r2
 8002376:	f8c7 3cf4 	str.w	r3, [r7, #3316]	@ 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 800237a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 800237e:	3340      	adds	r3, #64	@ 0x40
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8002386:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	4413      	add	r3, r2
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	111b      	asrs	r3, r3, #4
 8002392:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002396:	ee07 3a90 	vmov	s15, r3
 800239a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800239e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80023a2:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80023a6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 80023b2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80023b6:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80023ba:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 80023ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d2:	dd17      	ble.n	8002404 <ExtractAlphaParameters+0x394>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 80023d4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80023d8:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80023dc:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	ed9f 7ae3 	vldr	s14, [pc, #908]	@ 8002778 <ExtractAlphaParameters+0x708>
 80023ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023f0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80023f4:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80023f8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8002404:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002408:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 800240c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	ed93 7a00 	vldr	s14, [r3]
 8002418:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	@ 0xcf3
 800241c:	2201      	movs	r2, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800242a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002432:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002436:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 8002442:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	f503 6352 	add.w	r3, r3, #3360	@ 0xd20
 800244c:	443b      	add	r3, r7
 800244e:	f853 2c94 	ldr.w	r2, [r3, #-148]
 8002452:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	@ 0xcf1
 8002456:	409a      	lsls	r2, r3
 8002458:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	@ 0xcec
 800245c:	441a      	add	r2, r3
 800245e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002462:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002466:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	@ 0xd00
 800246a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800246e:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	@ 0xcf2
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	ee07 3a90 	vmov	s15, r3
 800247c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002480:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002484:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002488:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002498:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800249c:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80024a0:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
 80024ac:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80024b0:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80024b4:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f842 	bl	8000548 <__aeabi_f2d>
 80024c4:	4604      	mov	r4, r0
 80024c6:	460d      	mov	r5, r1
 80024c8:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	@ 0xd1f
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f819 	bl	8000504 <__aeabi_ui2d>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	ec43 2b11 	vmov	d1, r2, r3
 80024da:	ed9f 0ba1 	vldr	d0, [pc, #644]	@ 8002760 <ExtractAlphaParameters+0x6f0>
 80024de:	f006 fdc9 	bl	8009074 <pow>
 80024e2:	ec53 2b10 	vmov	r2, r3, d0
 80024e6:	4620      	mov	r0, r4
 80024e8:	4629      	mov	r1, r5
 80024ea:	f7fe f9af 	bl	800084c <__aeabi_ddiv>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4610      	mov	r0, r2
 80024f4:	4619      	mov	r1, r3
 80024f6:	f7fe fb77 	bl	8000be8 <__aeabi_d2f>
 80024fa:	4601      	mov	r1, r0
 80024fc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002500:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002504:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	6019      	str	r1, [r3, #0]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 800250e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002512:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002516:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	ed93 7a00 	vldr	s14, [r3]
 8002522:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002526:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	edd3 6a06 	vldr	s13, [r3, #24]
 8002530:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002534:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800253e:	ed93 6a94 	vldr	s12, [r3, #592]	@ 0x250
 8002542:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002546:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002550:	edd3 7a95 	vldr	s15, [r3, #596]	@ 0x254
 8002554:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002558:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800255c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8002560:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002568:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800256c:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002570:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 800257c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002580:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002584:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd ffda 	bl	8000548 <__aeabi_f2d>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	a173      	add	r1, pc, #460	@ (adr r1, 8002768 <ExtractAlphaParameters+0x6f8>)
 800259a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800259e:	f7fe f955 	bl	800084c <__aeabi_ddiv>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	f7fe fb1d 	bl	8000be8 <__aeabi_d2f>
 80025ae:	4601      	mov	r1, r0
 80025b0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80025b4:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80025b8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	@ 0xcf4
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80025c2:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	@ 0xd00
 80025c6:	3301      	adds	r3, #1
 80025c8:	f8c7 3d00 	str.w	r3, [r7, #3328]	@ 0xd00
 80025cc:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	@ 0xd00
 80025d0:	2b1f      	cmp	r3, #31
 80025d2:	f77f aeca 	ble.w	800236a <ExtractAlphaParameters+0x2fa>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80025d6:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 80025da:	3301      	adds	r3, #1
 80025dc:	f8c7 3d04 	str.w	r3, [r7, #3332]	@ 0xd04
 80025e0:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	@ 0xd04
 80025e4:	2b17      	cmp	r3, #23
 80025e6:	f77f aebc 	ble.w	8002362 <ExtractAlphaParameters+0x2f2>
        }
    }

    temp = alphaTemp[0];
 80025ea:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80025ee:	f6a3 5314 	subw	r3, r3, #3348	@ 0xd14
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f607 5218 	addw	r2, r7, #3352	@ 0xd18
 80025f8:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 80025fa:	2301      	movs	r3, #1
 80025fc:	f8c7 3cfc 	str.w	r3, [r7, #3324]	@ 0xcfc
 8002600:	e023      	b.n	800264a <ExtractAlphaParameters+0x5da>
    {
        if (alphaTemp[i] > temp)
 8002602:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002606:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 800260a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 800261a:	ed93 7a00 	vldr	s14, [r3]
 800261e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002626:	d50b      	bpl.n	8002640 <ExtractAlphaParameters+0x5d0>
        {
            temp = alphaTemp[i];
 8002628:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800262c:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 8002630:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f607 5218 	addw	r2, r7, #3352	@ 0xd18
 800263e:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8002640:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 8002644:	3301      	adds	r3, #1
 8002646:	f8c7 3cfc 	str.w	r3, [r7, #3324]	@ 0xcfc
 800264a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	@ 0xcfc
 800264e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002652:	dbd6      	blt.n	8002602 <ExtractAlphaParameters+0x592>
        }
    }

    alphaScale = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	f887 3d1f 	strb.w	r3, [r7, #3359]	@ 0xd1f
    while(temp < 32767.4)
 800265a:	e00e      	b.n	800267a <ExtractAlphaParameters+0x60a>
    {
        temp = temp*2;
 800265c:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 8002660:	edd3 7a00 	vldr	s15, [r3]
 8002664:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002668:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 800266c:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 8002670:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	@ 0xd1f
 8002674:	3301      	adds	r3, #1
 8002676:	f887 3d1f 	strb.w	r3, [r7, #3359]	@ 0xd1f
    while(temp < 32767.4)
 800267a:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	f7fd ff62 	bl	8000548 <__aeabi_f2d>
 8002684:	a33a      	add	r3, pc, #232	@ (adr r3, 8002770 <ExtractAlphaParameters+0x700>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	f7fe fa27 	bl	8000adc <__aeabi_dcmplt>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e3      	bne.n	800265c <ExtractAlphaParameters+0x5ec>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 3cf8 	str.w	r3, [r7, #3320]	@ 0xcf8
 800269a:	e04d      	b.n	8002738 <ExtractAlphaParameters+0x6c8>
    {
        temp = alphaTemp[i] * POW2(alphaScale);
 800269c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80026a0:	f6a3 5214 	subw	r2, r3, #3348	@ 0xd14
 80026a4:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd ff4a 	bl	8000548 <__aeabi_f2d>
 80026b4:	4604      	mov	r4, r0
 80026b6:	460d      	mov	r5, r1
 80026b8:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	@ 0xd1f
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd ff21 	bl	8000504 <__aeabi_ui2d>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	ec43 2b11 	vmov	d1, r2, r3
 80026ca:	ed9f 0b25 	vldr	d0, [pc, #148]	@ 8002760 <ExtractAlphaParameters+0x6f0>
 80026ce:	f006 fcd1 	bl	8009074 <pow>
 80026d2:	ec53 2b10 	vmov	r2, r3, d0
 80026d6:	4620      	mov	r0, r4
 80026d8:	4629      	mov	r1, r5
 80026da:	f7fd ff8d 	bl	80005f8 <__aeabi_dmul>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	f7fe fa7f 	bl	8000be8 <__aeabi_d2f>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f607 5218 	addw	r2, r7, #3352	@ 0xd18
 80026f0:	6013      	str	r3, [r2, #0]
        mlx90640->alpha[i] = (temp + 0.5);
 80026f2:	f607 5318 	addw	r3, r7, #3352	@ 0xd18
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	f7fd ff26 	bl	8000548 <__aeabi_f2d>
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <ExtractAlphaParameters+0x70c>)
 8002702:	f7fd fdc3 	bl	800028c <__adddf3>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	f7fe fa4b 	bl	8000ba8 <__aeabi_d2uiz>
 8002712:	4603      	mov	r3, r0
 8002714:	b299      	uxth	r1, r3
 8002716:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800271a:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8002724:	3324      	adds	r3, #36	@ 0x24
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	4413      	add	r3, r2
 800272a:	460a      	mov	r2, r1
 800272c:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 800272e:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 8002732:	3301      	adds	r3, #1
 8002734:	f8c7 3cf8 	str.w	r3, [r7, #3320]	@ 0xcf8
 8002738:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	@ 0xcf8
 800273c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002740:	dbac      	blt.n	800269c <ExtractAlphaParameters+0x62c>

    }

    mlx90640->alphaScale = alphaScale;
 8002742:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002746:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	@ 0xd1f
 8002750:	f883 264a 	strb.w	r2, [r3, #1610]	@ 0x64a

}
 8002754:	bf00      	nop
 8002756:	f507 6752 	add.w	r7, r7, #3360	@ 0xd20
 800275a:	46bd      	mov	sp, r7
 800275c:	bdb0      	pop	{r4, r5, r7, pc}
 800275e:	bf00      	nop
 8002760:	00000000 	.word	0x00000000
 8002764:	40000000 	.word	0x40000000
 8002768:	a0b5ed8d 	.word	0xa0b5ed8d
 800276c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002770:	9999999a 	.word	0x9999999a
 8002774:	40dfffd9 	.word	0x40dfffd9
 8002778:	42800000 	.word	0x42800000
 800277c:	3fe00000 	.word	0x3fe00000

08002780 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

static void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002780:	b480      	push	{r7}
 8002782:	b0c5      	sub	sp, #276	@ 0x114
 8002784:	af00      	add	r7, sp, #0
 8002786:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800278a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800278e:	6018      	str	r0, [r3, #0]
 8002790:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002794:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002798:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;


    occRemScale = MLX90640_NIBBLE1(eeData[16]);
 80027a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80027a4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3320      	adds	r3, #32
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f003 030f 	and.w	r3, r3, #15
 80027b4:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3
    occColumnScale = MLX90640_NIBBLE2(eeData[16]);
 80027b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80027bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3320      	adds	r3, #32
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	111b      	asrs	r3, r3, #4
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	f887 30f2 	strb.w	r3, [r7, #242]	@ 0xf2
    occRowScale = MLX90640_NIBBLE3(eeData[16]);
 80027d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80027d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3320      	adds	r3, #32
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	121b      	asrs	r3, r3, #8
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	f887 30f1 	strb.w	r3, [r7, #241]	@ 0xf1
    offsetRef = (int16_t)eeData[17];
 80027ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80027f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	3322      	adds	r3, #34	@ 0x22
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee

    for(int i = 0; i < 6; i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002804:	e062      	b.n	80028cc <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 8002806:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        occRow[p + 0] = MLX90640_NIBBLE1(eeData[18 + i]);
 8002810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002814:	3312      	adds	r3, #18
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800281c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	4413      	add	r3, r2
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	f003 020f 	and.w	r2, r3, #15
 800282a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002834:	443b      	add	r3, r7
 8002836:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = MLX90640_NIBBLE2(eeData[18 + i]);
 800283a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800283e:	3312      	adds	r3, #18
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002846:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	4413      	add	r3, r2
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	111a      	asrs	r2, r3, #4
 8002852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002856:	3301      	adds	r3, #1
 8002858:	f002 020f 	and.w	r2, r2, #15
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002862:	443b      	add	r3, r7
 8002864:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = MLX90640_NIBBLE3(eeData[18 + i]);
 8002868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800286c:	3312      	adds	r3, #18
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002874:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	4413      	add	r3, r2
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	121a      	asrs	r2, r3, #8
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002884:	3302      	adds	r3, #2
 8002886:	f002 020f 	and.w	r2, r2, #15
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002890:	443b      	add	r3, r7
 8002892:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = MLX90640_NIBBLE4(eeData[18 + i]);
 8002896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800289a:	3312      	adds	r3, #18
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80028a2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	4413      	add	r3, r2
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	0b1b      	lsrs	r3, r3, #12
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b4:	3303      	adds	r3, #3
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80028bc:	443b      	add	r3, r7
 80028be:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 80028c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028c6:	3301      	adds	r3, #1
 80028c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80028cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	dd98      	ble.n	8002806 <ExtractOffsetParameters+0x86>
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80028da:	e020      	b.n	800291e <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 80028dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80028e6:	443b      	add	r3, r7
 80028e8:	f853 3c84 	ldr.w	r3, [r3, #-132]
 80028ec:	2b07      	cmp	r3, #7
 80028ee:	dd11      	ble.n	8002914 <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 80028f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80028fa:	443b      	add	r3, r7
 80028fc:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8002900:	f1a3 0210 	sub.w	r2, r3, #16
 8002904:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800290e:	443b      	add	r3, r7
 8002910:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002914:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002918:	3301      	adds	r3, #1
 800291a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800291e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002922:	2b17      	cmp	r3, #23
 8002924:	ddda      	ble.n	80028dc <ExtractOffsetParameters+0x15c>
        }
    }

    for(int i = 0; i < 8; i++)
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800292c:	e062      	b.n	80029f4 <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 800292e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        occColumn[p + 0] = MLX90640_NIBBLE1(eeData[24 + i]);
 8002938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800293c:	3318      	adds	r3, #24
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002944:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	4413      	add	r3, r2
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	f003 010f 	and.w	r1, r3, #15
 8002952:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002956:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800295a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800295e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = MLX90640_NIBBLE2(eeData[24 + i]);
 8002962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002966:	3318      	adds	r3, #24
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800296e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	4413      	add	r3, r2
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	111b      	asrs	r3, r3, #4
 800297a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800297e:	3201      	adds	r2, #1
 8002980:	f003 010f 	and.w	r1, r3, #15
 8002984:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002988:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800298c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = MLX90640_NIBBLE3(eeData[24 + i]);
 8002990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002994:	3318      	adds	r3, #24
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800299c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	121b      	asrs	r3, r3, #8
 80029a8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80029ac:	3202      	adds	r2, #2
 80029ae:	f003 010f 	and.w	r1, r3, #15
 80029b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80029ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = MLX90640_NIBBLE4(eeData[24 + i]);
 80029be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029c2:	3318      	adds	r3, #24
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80029ca:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	0b1b      	lsrs	r3, r3, #12
 80029d6:	b299      	uxth	r1, r3
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029dc:	1cda      	adds	r2, r3, #3
 80029de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80029e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80029e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 80029ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029ee:	3301      	adds	r3, #1
 80029f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80029f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80029f8:	2b07      	cmp	r3, #7
 80029fa:	dd98      	ble.n	800292e <ExtractOffsetParameters+0x1ae>
    }

    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 80029fc:	2300      	movs	r3, #0
 80029fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002a02:	e020      	b.n	8002a46 <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 8002a04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a0c:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a14:	2b07      	cmp	r3, #7
 8002a16:	dd11      	ble.n	8002a3c <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 8002a18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a20:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a28:	f1a3 0110 	sub.w	r1, r3, #16
 8002a2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002a34:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 8002a3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002a40:	3301      	adds	r3, #1
 8002a42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002a46:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002a4a:	2b1f      	cmp	r3, #31
 8002a4c:	ddda      	ble.n	8002a04 <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002a54:	e0c0      	b.n	8002bd8 <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002a5c:	e0b2      	b.n	8002bc4 <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 8002a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a62:	015b      	lsls	r3, r3, #5
 8002a64:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8002a68:	4413      	add	r3, r2
 8002a6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & MLX90640_MSBITS_6_MASK) >> 10;
 8002a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a72:	3340      	adds	r3, #64	@ 0x40
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002a7a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	4413      	add	r3, r2
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	0a9b      	lsrs	r3, r3, #10
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	b219      	sxth	r1, r3
 8002a8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002a8e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a98:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4413      	add	r3, r2
 8002aa0:	460a      	mov	r2, r1
 8002aa2:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 8002aa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002aa8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab2:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4413      	add	r3, r2
 8002aba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002abe:	2b1f      	cmp	r3, #31
 8002ac0:	dd1d      	ble.n	8002afe <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 8002ac2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ac6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad0:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b40      	subs	r3, #64	@ 0x40
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	b219      	sxth	r1, r3
 8002ae4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ae8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af2:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	460a      	mov	r2, r1
 8002afc:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 8002afe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b02:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b0c:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4413      	add	r3, r2
 8002b14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	b219      	sxth	r1, r3
 8002b24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b28:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b32:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	460a      	mov	r2, r1
 8002b3c:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 8002b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002b48:	443b      	add	r3, r7
 8002b4a:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8002b4e:	f897 30f1 	ldrb.w	r3, [r7, #241]	@ 0xf1
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8002b5c:	4413      	add	r3, r2
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b68:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8002b6c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8002b70:	f897 30f2 	ldrb.w	r3, [r7, #242]	@ 0xf2
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002b82:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8c:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	440b      	add	r3, r1
 8002b94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	b219      	sxth	r1, r3
 8002ba0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002ba4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bae:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	460a      	mov	r2, r1
 8002bb8:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8002bba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002bc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002bc8:	2b1f      	cmp	r3, #31
 8002bca:	f77f af48 	ble.w	8002a5e <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bdc:	2b17      	cmp	r3, #23
 8002bde:	f77f af3a 	ble.w	8002a56 <ExtractOffsetParameters+0x2d6>
        }
    }
}
 8002be2:	bf00      	nop
 8002be4:	bf00      	nop
 8002be6:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	0000      	movs	r0, r0
 8002bf4:	0000      	movs	r0, r0
	...

08002bf8 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

static void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002bf8:	b5b0      	push	{r4, r5, r7, lr}
 8002bfa:	f5ad 6d43 	sub.w	sp, sp, #3120	@ 0xc30
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002c04:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002c08:	6018      	str	r0, [r3, #0]
 8002c0a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002c0e:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 8002c12:	6019      	str	r1, [r3, #0]
    int p = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;

    KtaRC[0] = (int8_t)MLX90640_MS_BYTE(eeData[54]);;
 8002c1a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002c1e:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	336c      	adds	r3, #108	@ 0x6c
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	b25b      	sxtb	r3, r3
 8002c2e:	f887 3c0c 	strb.w	r3, [r7, #3084]	@ 0xc0c
    KtaRC[2] = (int8_t)MLX90640_LS_BYTE(eeData[54]);;
 8002c32:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002c36:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	336c      	adds	r3, #108	@ 0x6c
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	b25b      	sxtb	r3, r3
 8002c42:	f887 3c0e 	strb.w	r3, [r7, #3086]	@ 0xc0e
    KtaRC[1] = (int8_t)MLX90640_MS_BYTE(eeData[55]);;
 8002c46:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002c4a:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	336e      	adds	r3, #110	@ 0x6e
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	0a1b      	lsrs	r3, r3, #8
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	f887 3c0d 	strb.w	r3, [r7, #3085]	@ 0xc0d
    KtaRC[3] = (int8_t)MLX90640_LS_BYTE(eeData[55]);;
 8002c5e:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002c62:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	336e      	adds	r3, #110	@ 0x6e
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b25b      	sxtb	r3, r3
 8002c6e:	f887 3c0f 	strb.w	r3, [r7, #3087]	@ 0xc0f

    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
 8002c72:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002c76:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3370      	adds	r3, #112	@ 0x70
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	111b      	asrs	r3, r3, #4
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	3308      	adds	r3, #8
 8002c8c:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    ktaScale2 = MLX90640_NIBBLE1(eeData[56]);
 8002c90:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002c94:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3370      	adds	r3, #112	@ 0x70
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	f887 3c13 	strb.w	r3, [r7, #3091]	@ 0xc13

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 3c24 	str.w	r3, [r7, #3108]	@ 0xc24
 8002cae:	e0ed      	b.n	8002e8c <ExtractKtaPixelParameters+0x294>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 8002cb6:	e0df      	b.n	8002e78 <ExtractKtaPixelParameters+0x280>
        {
            p = 32 * i +j;
 8002cb8:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	@ 0xc24
 8002cbc:	015b      	lsls	r3, r3, #5
 8002cbe:	f8d7 2c20 	ldr.w	r2, [r7, #3104]	@ 0xc20
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
            split = 2*(p/32 - (p/64)*2) + p%2;
 8002cc8:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	da00      	bge.n	8002cd2 <ExtractKtaPixelParameters+0xda>
 8002cd0:	331f      	adds	r3, #31
 8002cd2:	115b      	asrs	r3, r3, #5
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	da00      	bge.n	8002ce0 <ExtractKtaPixelParameters+0xe8>
 8002cde:	333f      	adds	r3, #63	@ 0x3f
 8002ce0:	119b      	asrs	r3, r3, #6
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	bfb8      	it	lt
 8002cf8:	425b      	neglt	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f887 3c12 	strb.w	r3, [r7, #3090]	@ 0xc12
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 8002d02:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002d06:	3340      	adds	r3, #64	@ 0x40
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	f507 6243 	add.w	r2, r7, #3120	@ 0xc30
 8002d0e:	f6a2 422c 	subw	r2, r2, #3116	@ 0xc2c
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	4413      	add	r3, r2
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	105b      	asrs	r3, r3, #1
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d26:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002d2a:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002d2e:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 8002d3a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002d3e:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002d42:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	edd3 7a00 	vldr	s15, [r3]
 8002d4e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5a:	dd17      	ble.n	8002d8c <ExtractKtaPixelParameters+0x194>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 8002d5c:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002d60:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002d64:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	edd3 7a00 	vldr	s15, [r3]
 8002d70:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002d74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d78:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002d7c:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002d80:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 8002d8c:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002d90:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002d94:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	ed93 7a00 	vldr	s14, [r3]
 8002da0:	f897 3c13 	ldrb.w	r3, [r7, #3091]	@ 0xc13
 8002da4:	2201      	movs	r2, #1
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	ee07 3a90 	vmov	s15, r3
 8002dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db6:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002dba:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002dbe:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 8002dca:	f897 3c12 	ldrb.w	r3, [r7, #3090]	@ 0xc12
 8002dce:	f503 6343 	add.w	r3, r3, #3120	@ 0xc30
 8002dd2:	443b      	add	r3, r7
 8002dd4:	f913 3c24 	ldrsb.w	r3, [r3, #-36]
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002de0:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002de4:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002de8:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	edd3 7a00 	vldr	s15, [r3]
 8002df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df8:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002dfc:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002e00:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / POW2(ktaScale1);
 8002e0c:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002e10:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002e14:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fb92 	bl	8000548 <__aeabi_f2d>
 8002e24:	4604      	mov	r4, r0
 8002e26:	460d      	mov	r5, r1
 8002e28:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fb69 	bl	8000504 <__aeabi_ui2d>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	ec43 2b11 	vmov	d1, r2, r3
 8002e3a:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 8003070 <ExtractKtaPixelParameters+0x478>
 8002e3e:	f006 f919 	bl	8009074 <pow>
 8002e42:	ec53 2b10 	vmov	r2, r3, d0
 8002e46:	4620      	mov	r0, r4
 8002e48:	4629      	mov	r1, r5
 8002e4a:	f7fd fcff 	bl	800084c <__aeabi_ddiv>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	f7fd fec7 	bl	8000be8 <__aeabi_d2f>
 8002e5a:	4601      	mov	r1, r0
 8002e5c:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002e60:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002e64:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8002e6e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 8002e72:	3301      	adds	r3, #1
 8002e74:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 8002e78:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 8002e7c:	2b1f      	cmp	r3, #31
 8002e7e:	f77f af1b 	ble.w	8002cb8 <ExtractKtaPixelParameters+0xc0>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002e82:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	@ 0xc24
 8002e86:	3301      	adds	r3, #1
 8002e88:	f8c7 3c24 	str.w	r3, [r7, #3108]	@ 0xc24
 8002e8c:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	@ 0xc24
 8002e90:	2b17      	cmp	r3, #23
 8002e92:	f77f af0d 	ble.w	8002cb0 <ExtractKtaPixelParameters+0xb8>

        }
    }

    temp = fabs(ktaTemp[0]);
 8002e96:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002e9a:	f6a3 4324 	subw	r3, r3, #3108	@ 0xc24
 8002e9e:	edd3 7a00 	vldr	s15, [r3]
 8002ea2:	eef0 7ae7 	vabs.f32	s15, s15
 8002ea6:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8002eaa:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 8002eb4:	e029      	b.n	8002f0a <ExtractKtaPixelParameters+0x312>
    {
        if (fabs(ktaTemp[i]) > temp)
 8002eb6:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002eba:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002ebe:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	edd3 7a00 	vldr	s15, [r3]
 8002eca:	eef0 7ae7 	vabs.f32	s15, s15
 8002ece:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8002ed2:	ed93 7a00 	vldr	s14, [r3]
 8002ed6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ede:	d50f      	bpl.n	8002f00 <ExtractKtaPixelParameters+0x308>
        {
            temp = fabs(ktaTemp[i]);
 8002ee0:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002ee4:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002ee8:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	edd3 7a00 	vldr	s15, [r3]
 8002ef4:	eef0 7ae7 	vabs.f32	s15, s15
 8002ef8:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8002efc:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8002f00:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8002f04:	3301      	adds	r3, #1
 8002f06:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 8002f0a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8002f0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f12:	dbd0      	blt.n	8002eb6 <ExtractKtaPixelParameters+0x2be>
        }
    }

    ktaScale1 = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    while(temp < 63.4)
 8002f1a:	e00e      	b.n	8002f3a <ExtractKtaPixelParameters+0x342>
    {
        temp = temp*2;
 8002f1c:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8002f20:	edd3 7a00 	vldr	s15, [r3]
 8002f24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f28:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8002f2c:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 8002f30:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 8002f34:	3301      	adds	r3, #1
 8002f36:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    while(temp < 63.4)
 8002f3a:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	f7fd fb02 	bl	8000548 <__aeabi_f2d>
 8002f44:	a34d      	add	r3, pc, #308	@ (adr r3, 800307c <ExtractKtaPixelParameters+0x484>)
 8002f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4a:	f7fd fdc7 	bl	8000adc <__aeabi_dcmplt>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e3      	bne.n	8002f1c <ExtractKtaPixelParameters+0x324>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 8002f5a:	e075      	b.n	8003048 <ExtractKtaPixelParameters+0x450>
    {
        temp = ktaTemp[i] * POW2(ktaScale1);
 8002f5c:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002f60:	f6a3 4224 	subw	r2, r3, #3108	@ 0xc24
 8002f64:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd faea 	bl	8000548 <__aeabi_f2d>
 8002f74:	4604      	mov	r4, r0
 8002f76:	460d      	mov	r5, r1
 8002f78:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fac1 	bl	8000504 <__aeabi_ui2d>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	ec43 2b11 	vmov	d1, r2, r3
 8002f8a:	ed9f 0b39 	vldr	d0, [pc, #228]	@ 8003070 <ExtractKtaPixelParameters+0x478>
 8002f8e:	f006 f871 	bl	8009074 <pow>
 8002f92:	ec53 2b10 	vmov	r2, r3, d0
 8002f96:	4620      	mov	r0, r4
 8002f98:	4629      	mov	r1, r5
 8002f9a:	f7fd fb2d 	bl	80005f8 <__aeabi_dmul>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f7fd fe1f 	bl	8000be8 <__aeabi_d2f>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f607 4228 	addw	r2, r7, #3112	@ 0xc28
 8002fb0:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 8002fb2:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8002fb6:	edd3 7a00 	vldr	s15, [r3]
 8002fba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc2:	d51e      	bpl.n	8003002 <ExtractKtaPixelParameters+0x40a>
        {
            mlx90640->kta[i] = (temp - 0.5);
 8002fc4:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	f7fd fabd 	bl	8000548 <__aeabi_f2d>
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	4b29      	ldr	r3, [pc, #164]	@ (8003078 <ExtractKtaPixelParameters+0x480>)
 8002fd4:	f7fd f958 	bl	8000288 <__aeabi_dsub>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f7fd fdba 	bl	8000b58 <__aeabi_d2iz>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	b259      	sxtb	r1, r3
 8002fe8:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8002fec:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f603 434c 	addw	r3, r3, #3148	@ 0xc4c
 8002ffc:	460a      	mov	r2, r1
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e01d      	b.n	800303e <ExtractKtaPixelParameters+0x446>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5);
 8003002:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	f7fd fa9e 	bl	8000548 <__aeabi_f2d>
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	4b19      	ldr	r3, [pc, #100]	@ (8003078 <ExtractKtaPixelParameters+0x480>)
 8003012:	f7fd f93b 	bl	800028c <__adddf3>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	f7fd fd9b 	bl	8000b58 <__aeabi_d2iz>
 8003022:	4603      	mov	r3, r0
 8003024:	b259      	sxtb	r1, r3
 8003026:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800302a:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8003034:	4413      	add	r3, r2
 8003036:	f603 434c 	addw	r3, r3, #3148	@ 0xc4c
 800303a:	460a      	mov	r2, r1
 800303c:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 800303e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8003042:	3301      	adds	r3, #1
 8003044:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 8003048:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 800304c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003050:	db84      	blt.n	8002f5c <ExtractKtaPixelParameters+0x364>
        }

    }

    mlx90640->ktaScale = ktaScale1;
 8003052:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003056:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f897 2c2f 	ldrb.w	r2, [r7, #3119]	@ 0xc2f
 8003060:	f883 2f4c 	strb.w	r2, [r3, #3916]	@ 0xf4c
}
 8003064:	bf00      	nop
 8003066:	f507 6743 	add.w	r7, r7, #3120	@ 0xc30
 800306a:	46bd      	mov	sp, r7
 800306c:	bdb0      	pop	{r4, r5, r7, pc}
 800306e:	bf00      	nop
 8003070:	00000000 	.word	0x00000000
 8003074:	40000000 	.word	0x40000000
 8003078:	3fe00000 	.word	0x3fe00000
 800307c:	33333333 	.word	0x33333333
 8003080:	404fb333 	.word	0x404fb333
 8003084:	00000000 	.word	0x00000000

08003088 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

static void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003088:	b5b0      	push	{r4, r5, r7, lr}
 800308a:	f5ad 6d43 	sub.w	sp, sp, #3120	@ 0xc30
 800308e:	af00      	add	r7, sp, #0
 8003090:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003094:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8003098:	6018      	str	r0, [r3, #0]
 800309a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800309e:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 80030a2:	6019      	str	r1, [r3, #0]
    int p = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f8c7 3c10 	str.w	r3, [r7, #3088]	@ 0xc10
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = MLX90640_NIBBLE4(eeData[52]);
 80030aa:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80030ae:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3368      	adds	r3, #104	@ 0x68
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	0b1b      	lsrs	r3, r3, #12
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    if (KvRoCo > 7)
 80030c0:	f997 3c2f 	ldrsb.w	r3, [r7, #3119]	@ 0xc2f
 80030c4:	2b07      	cmp	r3, #7
 80030c6:	dd05      	ble.n	80030d4 <ExtractKvPixelParameters+0x4c>
    {
        KvRoCo = KvRoCo - 16;
 80030c8:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 80030cc:	3b10      	subs	r3, #16
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f887 3c2f 	strb.w	r3, [r7, #3119]	@ 0xc2f
    }
    KvT[0] = KvRoCo;
 80030d4:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	@ 0xc2f
 80030d8:	f887 3c08 	strb.w	r3, [r7, #3080]	@ 0xc08

    KvReCo = MLX90640_NIBBLE3(eeData[52]);
 80030dc:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80030e0:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3368      	adds	r3, #104	@ 0x68
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	121b      	asrs	r3, r3, #8
 80030ec:	b25b      	sxtb	r3, r3
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	f887 3c2d 	strb.w	r3, [r7, #3117]	@ 0xc2d
    if (KvReCo > 7)
 80030f6:	f997 3c2d 	ldrsb.w	r3, [r7, #3117]	@ 0xc2d
 80030fa:	2b07      	cmp	r3, #7
 80030fc:	dd05      	ble.n	800310a <ExtractKvPixelParameters+0x82>
    {
        KvReCo = KvReCo - 16;
 80030fe:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	@ 0xc2d
 8003102:	3b10      	subs	r3, #16
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f887 3c2d 	strb.w	r3, [r7, #3117]	@ 0xc2d
    }
    KvT[2] = KvReCo;
 800310a:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	@ 0xc2d
 800310e:	f887 3c0a 	strb.w	r3, [r7, #3082]	@ 0xc0a

    KvRoCe = MLX90640_NIBBLE2(eeData[52]);
 8003112:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003116:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3368      	adds	r3, #104	@ 0x68
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	111b      	asrs	r3, r3, #4
 8003122:	b25b      	sxtb	r3, r3
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	f887 3c2e 	strb.w	r3, [r7, #3118]	@ 0xc2e
    if (KvRoCe > 7)
 800312c:	f997 3c2e 	ldrsb.w	r3, [r7, #3118]	@ 0xc2e
 8003130:	2b07      	cmp	r3, #7
 8003132:	dd05      	ble.n	8003140 <ExtractKvPixelParameters+0xb8>
    {
        KvRoCe = KvRoCe - 16;
 8003134:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	@ 0xc2e
 8003138:	3b10      	subs	r3, #16
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f887 3c2e 	strb.w	r3, [r7, #3118]	@ 0xc2e
    }
    KvT[1] = KvRoCe;
 8003140:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	@ 0xc2e
 8003144:	f887 3c09 	strb.w	r3, [r7, #3081]	@ 0xc09

    KvReCe = MLX90640_NIBBLE1(eeData[52]);
 8003148:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800314c:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3368      	adds	r3, #104	@ 0x68
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b25b      	sxtb	r3, r3
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	f887 3c2c 	strb.w	r3, [r7, #3116]	@ 0xc2c
    if (KvReCe > 7)
 8003160:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	@ 0xc2c
 8003164:	2b07      	cmp	r3, #7
 8003166:	dd05      	ble.n	8003174 <ExtractKvPixelParameters+0xec>
    {
        KvReCe = KvReCe - 16;
 8003168:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	@ 0xc2c
 800316c:	3b10      	subs	r3, #16
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f887 3c2c 	strb.w	r3, [r7, #3116]	@ 0xc2c
    }
    KvT[3] = KvReCe;
 8003174:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	@ 0xc2c
 8003178:	f887 3c0b 	strb.w	r3, [r7, #3083]	@ 0xc0b

    kvScale = MLX90640_NIBBLE3(eeData[56]);
 800317c:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003180:	f6a3 432c 	subw	r3, r3, #3116	@ 0xc2c
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3370      	adds	r3, #112	@ 0x70
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	121b      	asrs	r3, r3, #8
 800318c:	b2db      	uxtb	r3, r3
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	f887 3c2b 	strb.w	r3, [r7, #3115]	@ 0xc2b


    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 800319c:	e07c      	b.n	8003298 <ExtractKvPixelParameters+0x210>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 80031a4:	e06f      	b.n	8003286 <ExtractKvPixelParameters+0x1fe>
        {
            p = 32 * i +j;
 80031a6:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 80031aa:	015b      	lsls	r3, r3, #5
 80031ac:	f8d7 2c1c 	ldr.w	r2, [r7, #3100]	@ 0xc1c
 80031b0:	4413      	add	r3, r2
 80031b2:	f8c7 3c10 	str.w	r3, [r7, #3088]	@ 0xc10
            split = 2*(p/32 - (p/64)*2) + p%2;
 80031b6:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	da00      	bge.n	80031c0 <ExtractKvPixelParameters+0x138>
 80031be:	331f      	adds	r3, #31
 80031c0:	115b      	asrs	r3, r3, #5
 80031c2:	461a      	mov	r2, r3
 80031c4:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	da00      	bge.n	80031ce <ExtractKvPixelParameters+0x146>
 80031cc:	333f      	adds	r3, #63	@ 0x3f
 80031ce:	119b      	asrs	r3, r3, #6
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	bfb8      	it	lt
 80031e6:	425b      	neglt	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	f887 3c0f 	strb.w	r3, [r7, #3087]	@ 0xc0f
            kvTemp[p] = KvT[split];
 80031f0:	f897 3c0f 	ldrb.w	r3, [r7, #3087]	@ 0xc0f
 80031f4:	f503 6343 	add.w	r3, r3, #3120	@ 0xc30
 80031f8:	443b      	add	r3, r7
 80031fa:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 80031fe:	ee07 3a90 	vmov	s15, r3
 8003202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003206:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800320a:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 800320e:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / POW2(kvScale);
 800321a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800321e:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 8003222:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd f98b 	bl	8000548 <__aeabi_f2d>
 8003232:	4604      	mov	r4, r0
 8003234:	460d      	mov	r5, r1
 8003236:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd f962 	bl	8000504 <__aeabi_ui2d>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	ec43 2b11 	vmov	d1, r2, r3
 8003248:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 8003480 <ExtractKvPixelParameters+0x3f8>
 800324c:	f005 ff12 	bl	8009074 <pow>
 8003250:	ec53 2b10 	vmov	r2, r3, d0
 8003254:	4620      	mov	r0, r4
 8003256:	4629      	mov	r1, r5
 8003258:	f7fd faf8 	bl	800084c <__aeabi_ddiv>
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4610      	mov	r0, r2
 8003262:	4619      	mov	r1, r3
 8003264:	f7fd fcc0 	bl	8000be8 <__aeabi_d2f>
 8003268:	4601      	mov	r1, r0
 800326a:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800326e:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 8003272:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 800327c:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8003280:	3301      	adds	r3, #1
 8003282:	f8c7 3c1c 	str.w	r3, [r7, #3100]	@ 0xc1c
 8003286:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 800328a:	2b1f      	cmp	r3, #31
 800328c:	dd8b      	ble.n	80031a6 <ExtractKvPixelParameters+0x11e>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 800328e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 8003292:	3301      	adds	r3, #1
 8003294:	f8c7 3c20 	str.w	r3, [r7, #3104]	@ 0xc20
 8003298:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 800329c:	2b17      	cmp	r3, #23
 800329e:	f77f af7e 	ble.w	800319e <ExtractKvPixelParameters+0x116>
        }
    }

    temp = fabs(kvTemp[0]);
 80032a2:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80032a6:	f6a3 4328 	subw	r3, r3, #3112	@ 0xc28
 80032aa:	edd3 7a00 	vldr	s15, [r3]
 80032ae:	eef0 7ae7 	vabs.f32	s15, s15
 80032b2:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 80032b6:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 80032ba:	2301      	movs	r3, #1
 80032bc:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 80032c0:	e029      	b.n	8003316 <ExtractKvPixelParameters+0x28e>
    {
        if (fabs(kvTemp[i]) > temp)
 80032c2:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80032c6:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 80032ca:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	eef0 7ae7 	vabs.f32	s15, s15
 80032da:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 80032de:	ed93 7a00 	vldr	s14, [r3]
 80032e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ea:	d50f      	bpl.n	800330c <ExtractKvPixelParameters+0x284>
        {
            temp = fabs(kvTemp[i]);
 80032ec:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80032f0:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 80032f4:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	edd3 7a00 	vldr	s15, [r3]
 8003300:	eef0 7ae7 	vabs.f32	s15, s15
 8003304:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8003308:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 800330c:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8003310:	3301      	adds	r3, #1
 8003312:	f8c7 3c18 	str.w	r3, [r7, #3096]	@ 0xc18
 8003316:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 800331a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800331e:	dbd0      	blt.n	80032c2 <ExtractKvPixelParameters+0x23a>
        }
    }

    kvScale = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	f887 3c2b 	strb.w	r3, [r7, #3115]	@ 0xc2b
    while(temp < 63.4)
 8003326:	e00e      	b.n	8003346 <ExtractKvPixelParameters+0x2be>
    {
        temp = temp*2;
 8003328:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 800332c:	edd3 7a00 	vldr	s15, [r3]
 8003330:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003334:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8003338:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 800333c:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 8003340:	3301      	adds	r3, #1
 8003342:	f887 3c2b 	strb.w	r3, [r7, #3115]	@ 0xc2b
    while(temp < 63.4)
 8003346:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	f7fd f8fc 	bl	8000548 <__aeabi_f2d>
 8003350:	a34e      	add	r3, pc, #312	@ (adr r3, 800348c <ExtractKvPixelParameters+0x404>)
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	f7fd fbc1 	bl	8000adc <__aeabi_dcmplt>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e3      	bne.n	8003328 <ExtractKvPixelParameters+0x2a0>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8003360:	2300      	movs	r3, #0
 8003362:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
 8003366:	e075      	b.n	8003454 <ExtractKvPixelParameters+0x3cc>
    {
        temp = kvTemp[i] * POW2(kvScale);
 8003368:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800336c:	f6a3 4228 	subw	r2, r3, #3112	@ 0xc28
 8003370:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd f8e4 	bl	8000548 <__aeabi_f2d>
 8003380:	4604      	mov	r4, r0
 8003382:	460d      	mov	r5, r1
 8003384:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd f8bb 	bl	8000504 <__aeabi_ui2d>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	ec43 2b11 	vmov	d1, r2, r3
 8003396:	ed9f 0b3a 	vldr	d0, [pc, #232]	@ 8003480 <ExtractKvPixelParameters+0x3f8>
 800339a:	f005 fe6b 	bl	8009074 <pow>
 800339e:	ec53 2b10 	vmov	r2, r3, d0
 80033a2:	4620      	mov	r0, r4
 80033a4:	4629      	mov	r1, r5
 80033a6:	f7fd f927 	bl	80005f8 <__aeabi_dmul>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4610      	mov	r0, r2
 80033b0:	4619      	mov	r1, r3
 80033b2:	f7fd fc19 	bl	8000be8 <__aeabi_d2f>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f607 4224 	addw	r2, r7, #3108	@ 0xc24
 80033bc:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 80033be:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 80033c2:	edd3 7a00 	vldr	s15, [r3]
 80033c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ce:	d51e      	bpl.n	800340e <ExtractKvPixelParameters+0x386>
        {
            mlx90640->kv[i] = (temp - 0.5);
 80033d0:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	f7fd f8b7 	bl	8000548 <__aeabi_f2d>
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	4b2a      	ldr	r3, [pc, #168]	@ (8003488 <ExtractKvPixelParameters+0x400>)
 80033e0:	f7fc ff52 	bl	8000288 <__aeabi_dsub>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4610      	mov	r0, r2
 80033ea:	4619      	mov	r1, r3
 80033ec:	f7fd fbb4 	bl	8000b58 <__aeabi_d2iz>
 80033f0:	4603      	mov	r3, r0
 80033f2:	b259      	sxtb	r1, r3
 80033f4:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 80033f8:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003402:	4413      	add	r3, r2
 8003404:	f603 734d 	addw	r3, r3, #3917	@ 0xf4d
 8003408:	460a      	mov	r2, r1
 800340a:	701a      	strb	r2, [r3, #0]
 800340c:	e01d      	b.n	800344a <ExtractKvPixelParameters+0x3c2>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5);
 800340e:	f607 4324 	addw	r3, r7, #3108	@ 0xc24
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	f7fd f898 	bl	8000548 <__aeabi_f2d>
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	4b1a      	ldr	r3, [pc, #104]	@ (8003488 <ExtractKvPixelParameters+0x400>)
 800341e:	f7fc ff35 	bl	800028c <__adddf3>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4610      	mov	r0, r2
 8003428:	4619      	mov	r1, r3
 800342a:	f7fd fb95 	bl	8000b58 <__aeabi_d2iz>
 800342e:	4603      	mov	r3, r0
 8003430:	b259      	sxtb	r1, r3
 8003432:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003436:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003440:	4413      	add	r3, r2
 8003442:	f603 734d 	addw	r3, r3, #3917	@ 0xf4d
 8003446:	460a      	mov	r2, r1
 8003448:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 800344a:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 800344e:	3301      	adds	r3, #1
 8003450:	f8c7 3c14 	str.w	r3, [r7, #3092]	@ 0xc14
 8003454:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8003458:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800345c:	db84      	blt.n	8003368 <ExtractKvPixelParameters+0x2e0>
        }

    }

    mlx90640->kvScale = kvScale;
 800345e:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003462:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800346c:	461a      	mov	r2, r3
 800346e:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	@ 0xc2b
 8003472:	f882 324d 	strb.w	r3, [r2, #589]	@ 0x24d
}
 8003476:	bf00      	nop
 8003478:	f507 6743 	add.w	r7, r7, #3120	@ 0xc30
 800347c:	46bd      	mov	sp, r7
 800347e:	bdb0      	pop	{r4, r5, r7, pc}
 8003480:	00000000 	.word	0x00000000
 8003484:	40000000 	.word	0x40000000
 8003488:	3fe00000 	.word	0x3fe00000
 800348c:	33333333 	.word	0x33333333
 8003490:	404fb333 	.word	0x404fb333
 8003494:	00000000 	.word	0x00000000

08003498 <ExtractCPParameters>:

//------------------------------------------------------------------------------

static void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003498:	b5b0      	push	{r4, r5, r7, lr}
 800349a:	b08a      	sub	sp, #40	@ 0x28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 27;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3340      	adds	r3, #64	@ 0x40
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	0b1b      	lsrs	r3, r3, #12
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	331b      	adds	r3, #27
 80034b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    offsetSP[0] = (eeData[58] & MLX90640_LSBITS_10_MASK);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3374      	adds	r3, #116	@ 0x74
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	b21b      	sxth	r3, r3
 80034bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034c0:	b21b      	sxth	r3, r3
 80034c2:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 80034c4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80034c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034cc:	db07      	blt.n	80034de <ExtractCPParameters+0x46>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 80034ce:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80034d8:	b29b      	uxth	r3, r3
 80034da:	b21b      	sxth	r3, r3
 80034dc:	813b      	strh	r3, [r7, #8]
    }

    offsetSP[1] = (eeData[58] & MLX90640_MSBITS_6_MASK) >> 10;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3374      	adds	r3, #116	@ 0x74
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	0a9b      	lsrs	r3, r3, #10
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	b21b      	sxth	r3, r3
 80034ea:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 80034ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80034f0:	2b1f      	cmp	r3, #31
 80034f2:	dd06      	ble.n	8003502 <ExtractCPParameters+0x6a>
    {
        offsetSP[1] = offsetSP[1] - 64;
 80034f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b40      	subs	r3, #64	@ 0x40
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	b21b      	sxth	r3, r3
 8003500:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0];
 8003502:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003506:	b29a      	uxth	r2, r3
 8003508:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800350c:	b29b      	uxth	r3, r3
 800350e:	4413      	add	r3, r2
 8003510:	b29b      	uxth	r3, r3
 8003512:	b21b      	sxth	r3, r3
 8003514:	817b      	strh	r3, [r7, #10]

    alphaSP[0] = (eeData[57] & MLX90640_LSBITS_10_MASK);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	3372      	adds	r3, #114	@ 0x72
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003520:	ee07 3a90 	vmov	s15, r3
 8003524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003528:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 800352c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003530:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8003700 <ExtractCPParameters+0x268>
 8003534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353c:	dd07      	ble.n	800354e <ExtractCPParameters+0xb6>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 800353e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003542:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8003704 <ExtractCPParameters+0x26c>
 8003546:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800354a:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  POW2(alphaScale);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4618      	mov	r0, r3
 8003552:	f7fc fff9 	bl	8000548 <__aeabi_f2d>
 8003556:	4604      	mov	r4, r0
 8003558:	460d      	mov	r5, r1
 800355a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800355e:	4618      	mov	r0, r3
 8003560:	f7fc ffd0 	bl	8000504 <__aeabi_ui2d>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	ec43 2b11 	vmov	d1, r2, r3
 800356c:	ed9f 0b62 	vldr	d0, [pc, #392]	@ 80036f8 <ExtractCPParameters+0x260>
 8003570:	f005 fd80 	bl	8009074 <pow>
 8003574:	ec53 2b10 	vmov	r2, r3, d0
 8003578:	4620      	mov	r0, r4
 800357a:	4629      	mov	r1, r5
 800357c:	f7fd f966 	bl	800084c <__aeabi_ddiv>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4610      	mov	r0, r2
 8003586:	4619      	mov	r1, r3
 8003588:	f7fd fb2e 	bl	8000be8 <__aeabi_d2f>
 800358c:	4603      	mov	r3, r0
 800358e:	60fb      	str	r3, [r7, #12]

    alphaSP[1] = (eeData[57] & MLX90640_MSBITS_6_MASK) >> 10;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3372      	adds	r3, #114	@ 0x72
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	0a9b      	lsrs	r3, r3, #10
 8003598:	b29b      	uxth	r3, r3
 800359a:	ee07 3a90 	vmov	s15, r3
 800359e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035a2:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 80035a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80035aa:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 80035ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b6:	dd07      	ble.n	80035c8 <ExtractCPParameters+0x130>
    {
        alphaSP[1] = alphaSP[1] - 64;
 80035b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80035bc:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8003708 <ExtractCPParameters+0x270>
 80035c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80035c4:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 80035c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80035cc:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800370c <ExtractCPParameters+0x274>
 80035d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80035d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80035e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e4:	edc7 7a04 	vstr	s15, [r7, #16]

    cpKta = (int8_t)MLX90640_LS_BYTE(eeData[59]);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3376      	adds	r3, #118	@ 0x76
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	ee07 3a90 	vmov	s15, r3
 80035f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035f8:	edc7 7a08 	vstr	s15, [r7, #32]

    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3370      	adds	r3, #112	@ 0x70
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	111b      	asrs	r3, r3, #4
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	b2db      	uxtb	r3, r3
 800360c:	3308      	adds	r3, #8
 800360e:	77fb      	strb	r3, [r7, #31]
    mlx90640->cpKta = cpKta / POW2(ktaScale1);
 8003610:	6a38      	ldr	r0, [r7, #32]
 8003612:	f7fc ff99 	bl	8000548 <__aeabi_f2d>
 8003616:	4604      	mov	r4, r0
 8003618:	460d      	mov	r5, r1
 800361a:	7ffb      	ldrb	r3, [r7, #31]
 800361c:	4618      	mov	r0, r3
 800361e:	f7fc ff71 	bl	8000504 <__aeabi_ui2d>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	ec43 2b11 	vmov	d1, r2, r3
 800362a:	ed9f 0b33 	vldr	d0, [pc, #204]	@ 80036f8 <ExtractCPParameters+0x260>
 800362e:	f005 fd21 	bl	8009074 <pow>
 8003632:	ec53 2b10 	vmov	r2, r3, d0
 8003636:	4620      	mov	r0, r4
 8003638:	4629      	mov	r1, r5
 800363a:	f7fd f907 	bl	800084c <__aeabi_ddiv>
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4610      	mov	r0, r2
 8003644:	4619      	mov	r1, r3
 8003646:	f7fd facf 	bl	8000be8 <__aeabi_d2f>
 800364a:	4602      	mov	r2, r0
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	621a      	str	r2, [r3, #32]

    cpKv = (int8_t)MLX90640_MS_BYTE(eeData[59]);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3376      	adds	r3, #118	@ 0x76
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	0a1b      	lsrs	r3, r3, #8
 8003658:	b29b      	uxth	r3, r3
 800365a:	b25b      	sxtb	r3, r3
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003664:	edc7 7a06 	vstr	s15, [r7, #24]

    kvScale = MLX90640_NIBBLE3(eeData[56]);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3370      	adds	r3, #112	@ 0x70
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	121b      	asrs	r3, r3, #8
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	75fb      	strb	r3, [r7, #23]
    mlx90640->cpKv = cpKv / POW2(kvScale);
 8003678:	69b8      	ldr	r0, [r7, #24]
 800367a:	f7fc ff65 	bl	8000548 <__aeabi_f2d>
 800367e:	4604      	mov	r4, r0
 8003680:	460d      	mov	r5, r1
 8003682:	7dfb      	ldrb	r3, [r7, #23]
 8003684:	4618      	mov	r0, r3
 8003686:	f7fc ff3d 	bl	8000504 <__aeabi_ui2d>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	ec43 2b11 	vmov	d1, r2, r3
 8003692:	ed9f 0b19 	vldr	d0, [pc, #100]	@ 80036f8 <ExtractCPParameters+0x260>
 8003696:	f005 fced 	bl	8009074 <pow>
 800369a:	ec53 2b10 	vmov	r2, r3, d0
 800369e:	4620      	mov	r0, r4
 80036a0:	4629      	mov	r1, r5
 80036a2:	f7fd f8d3 	bl	800084c <__aeabi_ddiv>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	f7fd fa9b 	bl	8000be8 <__aeabi_d2f>
 80036b2:	4602      	mov	r2, r0
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	61da      	str	r2, [r3, #28]

    mlx90640->cpAlpha[0] = alphaSP[0];
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80036c0:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80036cc:	f8c2 3254 	str.w	r3, [r2, #596]	@ 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 80036d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036da:	f8a3 2258 	strh.w	r2, [r3, #600]	@ 0x258
    mlx90640->cpOffset[1] = offsetSP[1];
 80036de:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036e8:	f8a3 225a 	strh.w	r2, [r3, #602]	@ 0x25a
}
 80036ec:	bf00      	nop
 80036ee:	3728      	adds	r7, #40	@ 0x28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bdb0      	pop	{r4, r5, r7, pc}
 80036f4:	f3af 8000 	nop.w
 80036f8:	00000000 	.word	0x00000000
 80036fc:	40000000 	.word	0x40000000
 8003700:	43ff8000 	.word	0x43ff8000
 8003704:	44800000 	.word	0x44800000
 8003708:	42800000 	.word	0x42800000
 800370c:	43000000 	.word	0x43000000

08003710 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

static void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;

    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3314      	adds	r3, #20
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	111b      	asrs	r3, r3, #4
 8003722:	b2db      	uxtb	r3, r3
 8003724:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003728:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8003730:	43db      	mvns	r3, r3
 8003732:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	336a      	adds	r3, #106	@ 0x6a
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003746:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 800374a:	edd7 7a02 	vldr	s15, [r7, #8]
 800374e:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8003752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375a:	dd07      	ble.n	800376c <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 800375c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003760:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8003848 <ExtractCILCParameters+0x138>
 8003764:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003768:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 800376c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003770:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8003774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003778:	edc7 7a02 	vstr	s15, [r7, #8]

    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	336a      	adds	r3, #106	@ 0x6a
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	119b      	asrs	r3, r3, #6
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	ee07 3a90 	vmov	s15, r3
 800378c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003790:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 8003794:	edd7 7a03 	vldr	s15, [r7, #12]
 8003798:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800379c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a4:	dd07      	ble.n	80037b6 <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 80037a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80037aa:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800384c <ExtractCILCParameters+0x13c>
 80037ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037b2:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 80037b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80037ba:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80037be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037c2:	edc7 7a03 	vstr	s15, [r7, #12]

    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	336a      	adds	r3, #106	@ 0x6a
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	0adb      	lsrs	r3, r3, #11
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	ee07 3a90 	vmov	s15, r3
 80037d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d8:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 80037dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80037e0:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80037e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ec:	dd07      	ble.n	80037fe <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 80037ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80037f2:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800384c <ExtractCILCParameters+0x13c>
 80037f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80037fa:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 80037fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8003802:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8003806:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800380a:	edc7 7a04 	vstr	s15, [r7, #16]

    mlx90640->calibrationModeEE = calibrationModeEE;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	7dfa      	ldrb	r2, [r7, #23]
 8003812:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800381e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800382a:	f8c2 3260 	str.w	r3, [r2, #608]	@ 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003836:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264
}
 800383a:	bf00      	nop
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	42800000 	.word	0x42800000
 800384c:	42000000 	.word	0x42000000

08003850 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

static int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
    int i;

    for(pixCnt = 0; pixCnt<5; pixCnt++)
 800386a:	2300      	movs	r3, #0
 800386c:	82fb      	strh	r3, [r7, #22]
 800386e:	e013      	b.n	8003898 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8003870:	8afa      	ldrh	r2, [r7, #22]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003878:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800387c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8003880:	8afb      	ldrh	r3, [r7, #22]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003890:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8003892:	8afb      	ldrh	r3, [r7, #22]
 8003894:	3301      	adds	r3, #1
 8003896:	82fb      	strh	r3, [r7, #22]
 8003898:	8afb      	ldrh	r3, [r7, #22]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d9e8      	bls.n	8003870 <ExtractDeviatingPixels+0x20>
    }

    pixCnt = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 80038a2:	e02a      	b.n	80038fa <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 80038a4:	8afb      	ldrh	r3, [r7, #22]
 80038a6:	3340      	adds	r3, #64	@ 0x40
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 80038b4:	8aba      	ldrh	r2, [r7, #20]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 80038bc:	8af9      	ldrh	r1, [r7, #22]
 80038be:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 80038c2:	8abb      	ldrh	r3, [r7, #20]
 80038c4:	3301      	adds	r3, #1
 80038c6:	82bb      	strh	r3, [r7, #20]
 80038c8:	e014      	b.n	80038f4 <ExtractDeviatingPixels+0xa4>
        }
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 80038ca:	8afb      	ldrh	r3, [r7, #22]
 80038cc:	3340      	adds	r3, #64	@ 0x40
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	4413      	add	r3, r2
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 80038de:	8a7b      	ldrh	r3, [r7, #18]
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4413      	add	r3, r2
 80038ea:	8afa      	ldrh	r2, [r7, #22]
 80038ec:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 80038ee:	8a7b      	ldrh	r3, [r7, #18]
 80038f0:	3301      	adds	r3, #1
 80038f2:	827b      	strh	r3, [r7, #18]
        }

        pixCnt = pixCnt + 1;
 80038f4:	8afb      	ldrh	r3, [r7, #22]
 80038f6:	3301      	adds	r3, #1
 80038f8:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 80038fa:	8afb      	ldrh	r3, [r7, #22]
 80038fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003900:	d205      	bcs.n	800390e <ExtractDeviatingPixels+0xbe>
 8003902:	8abb      	ldrh	r3, [r7, #20]
 8003904:	2b04      	cmp	r3, #4
 8003906:	d802      	bhi.n	800390e <ExtractDeviatingPixels+0xbe>
 8003908:	8a7b      	ldrh	r3, [r7, #18]
 800390a:	2b04      	cmp	r3, #4
 800390c:	d9ca      	bls.n	80038a4 <ExtractDeviatingPixels+0x54>

    }

    if(brokenPixCnt > 4)
 800390e:	8abb      	ldrh	r3, [r7, #20]
 8003910:	2b04      	cmp	r3, #4
 8003912:	d903      	bls.n	800391c <ExtractDeviatingPixels+0xcc>
    {
        warn = -MLX90640_BROKEN_PIXELS_NUM_ERROR;
 8003914:	f06f 0302 	mvn.w	r3, #2
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	e08f      	b.n	8003a3c <ExtractDeviatingPixels+0x1ec>
    }
    else if(outlierPixCnt > 4)
 800391c:	8a7b      	ldrh	r3, [r7, #18]
 800391e:	2b04      	cmp	r3, #4
 8003920:	d903      	bls.n	800392a <ExtractDeviatingPixels+0xda>
    {
        warn = -MLX90640_OUTLIER_PIXELS_NUM_ERROR;
 8003922:	f06f 0303 	mvn.w	r3, #3
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	e088      	b.n	8003a3c <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)
 800392a:	8aba      	ldrh	r2, [r7, #20]
 800392c:	8a7b      	ldrh	r3, [r7, #18]
 800392e:	4413      	add	r3, r2
 8003930:	2b04      	cmp	r3, #4
 8003932:	dd03      	ble.n	800393c <ExtractDeviatingPixels+0xec>
    {
        warn = -MLX90640_BAD_PIXELS_NUM_ERROR;
 8003934:	f06f 0304 	mvn.w	r3, #4
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	e07f      	b.n	8003a3c <ExtractDeviatingPixels+0x1ec>
    }
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 800393c:	2300      	movs	r3, #0
 800393e:	82fb      	strh	r3, [r7, #22]
 8003940:	e022      	b.n	8003988 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8003942:	8afb      	ldrh	r3, [r7, #22]
 8003944:	3301      	adds	r3, #1
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	e017      	b.n	800397a <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 800394a:	8afa      	ldrh	r2, [r7, #22]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 8003952:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 800395e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003962:	4619      	mov	r1, r3
 8003964:	f000 f86f 	bl	8003a46 <CheckAdjacentPixels>
 8003968:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	e064      	b.n	8003a3e <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	3301      	adds	r3, #1
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	8abb      	ldrh	r3, [r7, #20]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	429a      	cmp	r2, r3
 8003980:	dbe3      	blt.n	800394a <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003982:	8afb      	ldrh	r3, [r7, #22]
 8003984:	3301      	adds	r3, #1
 8003986:	82fb      	strh	r3, [r7, #22]
 8003988:	8afa      	ldrh	r2, [r7, #22]
 800398a:	8abb      	ldrh	r3, [r7, #20]
 800398c:	429a      	cmp	r2, r3
 800398e:	d3d8      	bcc.n	8003942 <ExtractDeviatingPixels+0xf2>
                }
            }
        }

        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8003990:	2300      	movs	r3, #0
 8003992:	82fb      	strh	r3, [r7, #22]
 8003994:	e024      	b.n	80039e0 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8003996:	8afb      	ldrh	r3, [r7, #22]
 8003998:	3301      	adds	r3, #1
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	e019      	b.n	80039d2 <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 800399e:	8afb      	ldrh	r3, [r7, #22]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4413      	add	r3, r2
 80039aa:	8858      	ldrh	r0, [r3, #2]
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	4413      	add	r3, r2
 80039b8:	885b      	ldrh	r3, [r3, #2]
 80039ba:	4619      	mov	r1, r3
 80039bc:	f000 f843 	bl	8003a46 <CheckAdjacentPixels>
 80039c0:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	e038      	b.n	8003a3e <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	3301      	adds	r3, #1
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	8a7b      	ldrh	r3, [r7, #18]
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	dbe1      	blt.n	800399e <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 80039da:	8afb      	ldrh	r3, [r7, #22]
 80039dc:	3301      	adds	r3, #1
 80039de:	82fb      	strh	r3, [r7, #22]
 80039e0:	8afa      	ldrh	r2, [r7, #22]
 80039e2:	8a7b      	ldrh	r3, [r7, #18]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d3d6      	bcc.n	8003996 <ExtractDeviatingPixels+0x146>
                }
            }
        }

        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80039e8:	2300      	movs	r3, #0
 80039ea:	82fb      	strh	r3, [r7, #22]
 80039ec:	e022      	b.n	8003a34 <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	e018      	b.n	8003a26 <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 80039f4:	8afa      	ldrh	r2, [r7, #22]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	f602 1234 	addw	r2, r2, #2356	@ 0x934
 80039fc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f603 1338 	addw	r3, r3, #2360	@ 0x938
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	885b      	ldrh	r3, [r3, #2]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	f000 f819 	bl	8003a46 <CheckAdjacentPixels>
 8003a14:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	e00e      	b.n	8003a3e <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	3301      	adds	r3, #1
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	8a7b      	ldrh	r3, [r7, #18]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	dbe2      	blt.n	80039f4 <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8003a2e:	8afb      	ldrh	r3, [r7, #22]
 8003a30:	3301      	adds	r3, #1
 8003a32:	82fb      	strh	r3, [r7, #22]
 8003a34:	8afa      	ldrh	r2, [r7, #22]
 8003a36:	8abb      	ldrh	r3, [r7, #20]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d3d8      	bcc.n	80039ee <ExtractDeviatingPixels+0x19e>
        }

    }


    return warn;
 8003a3c:	68fb      	ldr	r3, [r7, #12]

}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 static int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 8003a46:	b480      	push	{r7}
 8003a48:	b087      	sub	sp, #28
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	460a      	mov	r2, r1
 8003a50:	80fb      	strh	r3, [r7, #6]
 8003a52:	4613      	mov	r3, r2
 8003a54:	80bb      	strh	r3, [r7, #4]

     int pixPosDif;
     uint16_t lp1 = pix1 >> 5;
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	82fb      	strh	r3, [r7, #22]
     uint16_t lp2 = pix2 >> 5;
 8003a5c:	88bb      	ldrh	r3, [r7, #4]
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	82bb      	strh	r3, [r7, #20]
     uint16_t cp1 = pix1 - (lp1 << 5);
 8003a62:	8afb      	ldrh	r3, [r7, #22]
 8003a64:	015b      	lsls	r3, r3, #5
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	88fa      	ldrh	r2, [r7, #6]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	827b      	strh	r3, [r7, #18]
     uint16_t cp2 = pix2 - (lp2 << 5);
 8003a6e:	8abb      	ldrh	r3, [r7, #20]
 8003a70:	015b      	lsls	r3, r3, #5
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	88ba      	ldrh	r2, [r7, #4]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	823b      	strh	r3, [r7, #16]

     pixPosDif = lp1 - lp2;
 8003a7a:	8afa      	ldrh	r2, [r7, #22]
 8003a7c:	8abb      	ldrh	r3, [r7, #20]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -2 && pixPosDif < 2)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a88:	db10      	blt.n	8003aac <CheckAdjacentPixels+0x66>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	dc0d      	bgt.n	8003aac <CheckAdjacentPixels+0x66>
     {
        pixPosDif = cp1 - cp2;
 8003a90:	8a7a      	ldrh	r2, [r7, #18]
 8003a92:	8a3b      	ldrh	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	60fb      	str	r3, [r7, #12]
        if(pixPosDif > -2 && pixPosDif < 2)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a9e:	db05      	blt.n	8003aac <CheckAdjacentPixels+0x66>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	dc02      	bgt.n	8003aac <CheckAdjacentPixels+0x66>
        {
            return -6;
 8003aa6:	f06f 0305 	mvn.w	r3, #5
 8003aaa:	e000      	b.n	8003aae <CheckAdjacentPixels+0x68>
        }

     }

     return 0;
 8003aac:	2300      	movs	r3, #0
 }
 8003aae:	4618      	mov	r0, r3
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <MLX90640_getDeviceId>:
		return -1;
	}
	return 0;
}

int MLX90640_getDeviceId(uint8_t slaveAddr, uint16_t* device_id) {
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	6039      	str	r1, [r7, #0]
 8003ac4:	71fb      	strb	r3, [r7, #7]
	// 4640 should be the Device ID Returned (?) i.e. hopefully some nonzero value
	return MLX90640_I2CRead(slaveAddr, 0x2407, 1, device_id);
 8003ac6:	79f8      	ldrb	r0, [r7, #7]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f242 4107 	movw	r1, #9223	@ 0x2407
 8003ad0:	f000 f806 	bl	8003ae0 <MLX90640_I2CRead>
 8003ad4:	4603      	mov	r3, r0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <MLX90640_I2CRead>:
	}
	printf("Scan Complete\r\n");
}

int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress,
		uint16_t nMemAddressRead, uint16_t *data) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08c      	sub	sp, #48	@ 0x30
 8003ae4:	af04      	add	r7, sp, #16
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73fb      	strb	r3, [r7, #15]
 8003aec:	460b      	mov	r3, r1
 8003aee:	81bb      	strh	r3, [r7, #12]
 8003af0:	4613      	mov	r3, r2
 8003af2:	817b      	strh	r3, [r7, #10]
	uint8_t* pData = (uint8_t*) data;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	61bb      	str	r3, [r7, #24]
	int ack = HAL_I2C_Mem_Read(&hi2c1, (slaveAddr << 1), startAddress,
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	b299      	uxth	r1, r3
 8003b00:	897b      	ldrh	r3, [r7, #10]
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	89ba      	ldrh	r2, [r7, #12]
 8003b08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003b0c:	9002      	str	r0, [sp, #8]
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2302      	movs	r3, #2
 8003b16:	4817      	ldr	r0, [pc, #92]	@ (8003b74 <MLX90640_I2CRead+0x94>)
 8003b18:	f001 f84a 	bl	8004bb0 <HAL_I2C_Mem_Read>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	617b      	str	r3, [r7, #20]
	I2C_MEMADD_SIZE_16BIT, pData, 2 * nMemAddressRead, 500);
	if (ack != HAL_OK) {
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <MLX90640_I2CRead+0x4c>
		return -1;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b2a:	e01f      	b.n	8003b6c <MLX90640_I2CRead+0x8c>
	}

	// Perform Endian Conversion on the received data
	for (int k = 0; k < nMemAddressRead * 2; k += 2) {
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	e016      	b.n	8003b60 <MLX90640_I2CRead+0x80>
		uint8_t temp = pData[k+1];
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3301      	adds	r3, #1
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4413      	add	r3, r2
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	74fb      	strb	r3, [r7, #19]
		pData[k+1] = pData[k];
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	441a      	add	r2, r3
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	3301      	adds	r3, #1
 8003b48:	69b9      	ldr	r1, [r7, #24]
 8003b4a:	440b      	add	r3, r1
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	701a      	strb	r2, [r3, #0]
		pData[k] = temp;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4413      	add	r3, r2
 8003b56:	7cfa      	ldrb	r2, [r7, #19]
 8003b58:	701a      	strb	r2, [r3, #0]
	for (int k = 0; k < nMemAddressRead * 2; k += 2) {
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3302      	adds	r3, #2
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	897b      	ldrh	r3, [r7, #10]
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	dbe3      	blt.n	8003b32 <MLX90640_I2CRead+0x52>
	}

	return 0;
 8003b6a:	2300      	movs	r3, #0

}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	200001f4 	.word	0x200001f4

08003b78 <MLX90640_I2CWrite>:

int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	@ 0x28
 8003b7c:	af04      	add	r7, sp, #16
 8003b7e:	4603      	mov	r3, r0
 8003b80:	71fb      	strb	r3, [r7, #7]
 8003b82:	460b      	mov	r3, r1
 8003b84:	80bb      	strh	r3, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	807b      	strh	r3, [r7, #2]
	uint8_t pData[2];
	pData[0] = (uint8_t)((data >> 8) & 0xFF); // MSB
 8003b8a:	887b      	ldrh	r3, [r7, #2]
 8003b8c:	0a1b      	lsrs	r3, r3, #8
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	743b      	strb	r3, [r7, #16]
	pData[1] = (uint8_t)(data & 0xFF); // LSB
 8003b94:	887b      	ldrh	r3, [r7, #2]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	747b      	strb	r3, [r7, #17]
	// Perform Endian Conversion on data to write

	int ack = HAL_I2C_Mem_Write(&hi2c1, (slaveAddr << 1), writeAddress,
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	b299      	uxth	r1, r3
 8003ba2:	88ba      	ldrh	r2, [r7, #4]
 8003ba4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003ba8:	9302      	str	r3, [sp, #8]
 8003baa:	2302      	movs	r3, #2
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	f107 0310 	add.w	r3, r7, #16
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	480f      	ldr	r0, [pc, #60]	@ (8003bf4 <MLX90640_I2CWrite+0x7c>)
 8003bb8:	f000 fee6 	bl	8004988 <HAL_I2C_Mem_Write>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	617b      	str	r3, [r7, #20]
	I2C_MEMADD_SIZE_16BIT, pData, sizeof(pData), 500);

	if (ack != HAL_OK) {
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <MLX90640_I2CWrite+0x54>
		return -1;
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bca:	e00e      	b.n	8003bea <MLX90640_I2CWrite+0x72>
	}

	uint16_t dataCheck;
	MLX90640_I2CRead(slaveAddr, writeAddress, 2, &dataCheck);
 8003bcc:	f107 030e 	add.w	r3, r7, #14
 8003bd0:	88b9      	ldrh	r1, [r7, #4]
 8003bd2:	79f8      	ldrb	r0, [r7, #7]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	f7ff ff83 	bl	8003ae0 <MLX90640_I2CRead>
	if (dataCheck != data) return -2;
 8003bda:	89fb      	ldrh	r3, [r7, #14]
 8003bdc:	887a      	ldrh	r2, [r7, #2]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d002      	beq.n	8003be8 <MLX90640_I2CWrite+0x70>
 8003be2:	f06f 0301 	mvn.w	r3, #1
 8003be6:	e000      	b.n	8003bea <MLX90640_I2CWrite+0x72>

	return 0;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	200001f4 	.word	0x200001f4

08003bf8 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfe:	f107 030c 	add.w	r3, r7, #12
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	605a      	str	r2, [r3, #4]
 8003c08:	609a      	str	r2, [r3, #8]
 8003c0a:	60da      	str	r2, [r3, #12]
 8003c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8003ccc <MX_GPIO_Init+0xd4>)
 8003c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c12:	4a2e      	ldr	r2, [pc, #184]	@ (8003ccc <MX_GPIO_Init+0xd4>)
 8003c14:	f043 0304 	orr.w	r3, r3, #4
 8003c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003ccc <MX_GPIO_Init+0xd4>)
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	60bb      	str	r3, [r7, #8]
 8003c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	4b29      	ldr	r3, [pc, #164]	@ (8003ccc <MX_GPIO_Init+0xd4>)
 8003c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2a:	4a28      	ldr	r2, [pc, #160]	@ (8003ccc <MX_GPIO_Init+0xd4>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c32:	4b26      	ldr	r3, [pc, #152]	@ (8003ccc <MX_GPIO_Init+0xd4>)
 8003c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c3e:	4b23      	ldr	r3, [pc, #140]	@ (8003ccc <MX_GPIO_Init+0xd4>)
 8003c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c42:	4a22      	ldr	r2, [pc, #136]	@ (8003ccc <MX_GPIO_Init+0xd4>)
 8003c44:	f043 0302 	orr.w	r3, r3, #2
 8003c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c4a:	4b20      	ldr	r3, [pc, #128]	@ (8003ccc <MX_GPIO_Init+0xd4>)
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2108      	movs	r1, #8
 8003c5a:	481d      	ldr	r0, [pc, #116]	@ (8003cd0 <MX_GPIO_Init+0xd8>)
 8003c5c:	f000 fde0 	bl	8004820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003c60:	2304      	movs	r3, #4
 8003c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c64:	2302      	movs	r3, #2
 8003c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c70:	2307      	movs	r3, #7
 8003c72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003c74:	f107 030c 	add.w	r3, r7, #12
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c7e:	f000 fc65 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c90:	2303      	movs	r3, #3
 8003c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003c94:	2303      	movs	r3, #3
 8003c96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003c98:	f107 030c 	add.w	r3, r7, #12
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ca2:	f000 fc53 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003caa:	2301      	movs	r3, #1
 8003cac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003cb6:	f107 030c 	add.w	r3, r7, #12
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4804      	ldr	r0, [pc, #16]	@ (8003cd0 <MX_GPIO_Init+0xd8>)
 8003cbe:	f000 fc45 	bl	800454c <HAL_GPIO_Init>

}
 8003cc2:	bf00      	nop
 8003cc4:	3720      	adds	r7, #32
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	48000400 	.word	0x48000400

08003cd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d48 <MX_I2C1_Init+0x74>)
 8003cda:	4a1c      	ldr	r2, [pc, #112]	@ (8003d4c <MX_I2C1_Init+0x78>)
 8003cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 8003cde:	4b1a      	ldr	r3, [pc, #104]	@ (8003d48 <MX_I2C1_Init+0x74>)
 8003ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8003d50 <MX_I2C1_Init+0x7c>)
 8003ce2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003ce4:	4b18      	ldr	r3, [pc, #96]	@ (8003d48 <MX_I2C1_Init+0x74>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cea:	4b17      	ldr	r3, [pc, #92]	@ (8003d48 <MX_I2C1_Init+0x74>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cf0:	4b15      	ldr	r3, [pc, #84]	@ (8003d48 <MX_I2C1_Init+0x74>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003cf6:	4b14      	ldr	r3, [pc, #80]	@ (8003d48 <MX_I2C1_Init+0x74>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003cfc:	4b12      	ldr	r3, [pc, #72]	@ (8003d48 <MX_I2C1_Init+0x74>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d02:	4b11      	ldr	r3, [pc, #68]	@ (8003d48 <MX_I2C1_Init+0x74>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d08:	4b0f      	ldr	r3, [pc, #60]	@ (8003d48 <MX_I2C1_Init+0x74>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d0e:	480e      	ldr	r0, [pc, #56]	@ (8003d48 <MX_I2C1_Init+0x74>)
 8003d10:	f000 fd9e 	bl	8004850 <HAL_I2C_Init>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003d1a:	f000 f961 	bl	8003fe0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4809      	ldr	r0, [pc, #36]	@ (8003d48 <MX_I2C1_Init+0x74>)
 8003d22:	f001 fb21 	bl	8005368 <HAL_I2CEx_ConfigAnalogFilter>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003d2c:	f000 f958 	bl	8003fe0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003d30:	2100      	movs	r1, #0
 8003d32:	4805      	ldr	r0, [pc, #20]	@ (8003d48 <MX_I2C1_Init+0x74>)
 8003d34:	f001 fb63 	bl	80053fe <HAL_I2CEx_ConfigDigitalFilter>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003d3e:	f000 f94f 	bl	8003fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d42:	bf00      	nop
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	200001f4 	.word	0x200001f4
 8003d4c:	40005400 	.word	0x40005400
 8003d50:	0060112f 	.word	0x0060112f

08003d54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b09e      	sub	sp, #120	@ 0x78
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	60da      	str	r2, [r3, #12]
 8003d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d6c:	f107 0310 	add.w	r3, r7, #16
 8003d70:	2254      	movs	r2, #84	@ 0x54
 8003d72:	2100      	movs	r1, #0
 8003d74:	4618      	mov	r0, r3
 8003d76:	f003 fa13 	bl	80071a0 <memset>
  if(i2cHandle->Instance==I2C1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a24      	ldr	r2, [pc, #144]	@ (8003e10 <HAL_I2C_MspInit+0xbc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d141      	bne.n	8003e08 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003d84:	2340      	movs	r3, #64	@ 0x40
 8003d86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d8c:	f107 0310 	add.w	r3, r7, #16
 8003d90:	4618      	mov	r0, r3
 8003d92:	f002 f9f5 	bl	8006180 <HAL_RCCEx_PeriphCLKConfig>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003d9c:	f000 f920 	bl	8003fe0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e14 <HAL_I2C_MspInit+0xc0>)
 8003da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e14 <HAL_I2C_MspInit+0xc0>)
 8003da6:	f043 0302 	orr.w	r3, r3, #2
 8003daa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dac:	4b19      	ldr	r3, [pc, #100]	@ (8003e14 <HAL_I2C_MspInit+0xc0>)
 8003dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003db8:	23c0      	movs	r3, #192	@ 0xc0
 8003dba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dbc:	2312      	movs	r3, #18
 8003dbe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dc8:	2304      	movs	r3, #4
 8003dca:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dcc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4811      	ldr	r0, [pc, #68]	@ (8003e18 <HAL_I2C_MspInit+0xc4>)
 8003dd4:	f000 fbba 	bl	800454c <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8003dd8:	4b10      	ldr	r3, [pc, #64]	@ (8003e1c <HAL_I2C_MspInit+0xc8>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	4a0f      	ldr	r2, [pc, #60]	@ (8003e1c <HAL_I2C_MspInit+0xc8>)
 8003dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de2:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8003de4:	4b0d      	ldr	r3, [pc, #52]	@ (8003e1c <HAL_I2C_MspInit+0xc8>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	4a0c      	ldr	r2, [pc, #48]	@ (8003e1c <HAL_I2C_MspInit+0xc8>)
 8003dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dee:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003df0:	4b08      	ldr	r3, [pc, #32]	@ (8003e14 <HAL_I2C_MspInit+0xc0>)
 8003df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df4:	4a07      	ldr	r2, [pc, #28]	@ (8003e14 <HAL_I2C_MspInit+0xc0>)
 8003df6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dfc:	4b05      	ldr	r3, [pc, #20]	@ (8003e14 <HAL_I2C_MspInit+0xc0>)
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003e08:	bf00      	nop
 8003e0a:	3778      	adds	r7, #120	@ 0x78
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40005400 	.word	0x40005400
 8003e14:	40021000 	.word	0x40021000
 8003e18:	48000400 	.word	0x48000400
 8003e1c:	40010000 	.word	0x40010000

08003e20 <computeMLXSample>:
//	// Transmit via UART using HAL function
//	HAL_UART_Transmit(&huart2, (uint8_t*) data, len, HAL_MAX_DELAY);
//	return len;
//}

void computeMLXSample() {
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
	for (int i = 384; i < 416; i++) {
 8003e26:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003e2a:	607b      	str	r3, [r7, #4]
 8003e2c:	e00e      	b.n	8003e4c <computeMLXSample+0x2c>
		MLX_sample[i - 384] = MLX_to[i];
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003e34:	490b      	ldr	r1, [pc, #44]	@ (8003e64 <computeMLXSample+0x44>)
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	0092      	lsls	r2, r2, #2
 8003e3a:	440a      	add	r2, r1
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	490a      	ldr	r1, [pc, #40]	@ (8003e68 <computeMLXSample+0x48>)
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	601a      	str	r2, [r3, #0]
	for (int i = 384; i < 416; i++) {
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	607b      	str	r3, [r7, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 8003e52:	dbec      	blt.n	8003e2e <computeMLXSample+0xe>
	}
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	200021d0 	.word	0x200021d0
 8003e68:	20002dd0 	.word	0x20002dd0

08003e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e72:	f000 fa10 	bl	8004296 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e76:	f000 f851 	bl	8003f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e7a:	f7ff febd 	bl	8003bf8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003e7e:	f7ff ff29 	bl	8003cd4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  status = MLX90640_getDeviceId(MLX_ADDR, &device_id);
 8003e82:	491f      	ldr	r1, [pc, #124]	@ (8003f00 <main+0x94>)
 8003e84:	2033      	movs	r0, #51	@ 0x33
 8003e86:	f7ff fe18 	bl	8003aba <MLX90640_getDeviceId>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f04 <main+0x98>)
 8003e8e:	6013      	str	r3, [r2, #0]
  status = MLX90640_SetChessMode(MLX_ADDR);
 8003e90:	2033      	movs	r0, #51	@ 0x33
 8003e92:	f7fd f8cd 	bl	8001030 <MLX90640_SetChessMode>
 8003e96:	4603      	mov	r3, r0
 8003e98:	4a1a      	ldr	r2, [pc, #104]	@ (8003f04 <main+0x98>)
 8003e9a:	6013      	str	r3, [r2, #0]
  status = MLX90640_DumpEE(MLX_ADDR, MLX_eeData);
 8003e9c:	491a      	ldr	r1, [pc, #104]	@ (8003f08 <main+0x9c>)
 8003e9e:	2033      	movs	r0, #51	@ 0x33
 8003ea0:	f7fc fef2 	bl	8000c88 <MLX90640_DumpEE>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	4a17      	ldr	r2, [pc, #92]	@ (8003f04 <main+0x98>)
 8003ea8:	6013      	str	r3, [r2, #0]
  status = MLX90640_ExtractParameters(MLX_eeData, &MLX_params);
 8003eaa:	4918      	ldr	r1, [pc, #96]	@ (8003f0c <main+0xa0>)
 8003eac:	4816      	ldr	r0, [pc, #88]	@ (8003f08 <main+0x9c>)
 8003eae:	f7fd f87a 	bl	8000fa6 <MLX90640_ExtractParameters>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	4a13      	ldr	r2, [pc, #76]	@ (8003f04 <main+0x98>)
 8003eb6:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  status = MLX90640_GetFrameData(MLX_ADDR, MLX_dataFrame);
 8003eb8:	4915      	ldr	r1, [pc, #84]	@ (8003f10 <main+0xa4>)
 8003eba:	2033      	movs	r0, #51	@ 0x33
 8003ebc:	f7fc fef7 	bl	8000cae <MLX90640_GetFrameData>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4a10      	ldr	r2, [pc, #64]	@ (8003f04 <main+0x98>)
 8003ec4:	6013      	str	r3, [r2, #0]
	  float tr = MLX90640_GetTa(MLX_dataFrame, &MLX_params) - TA_SHIFT; //Reflected temperature based on the sensor ambient temperature
 8003ec6:	4911      	ldr	r1, [pc, #68]	@ (8003f0c <main+0xa0>)
 8003ec8:	4811      	ldr	r0, [pc, #68]	@ (8003f10 <main+0xa4>)
 8003eca:	f7fd fe65 	bl	8001b98 <MLX90640_GetTa>
 8003ece:	eef0 7a40 	vmov.f32	s15, s0
 8003ed2:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8003ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003eda:	edc7 7a01 	vstr	s15, [r7, #4]
	  MLX90640_CalculateTo(MLX_dataFrame, &MLX_params, emissivity, tr, MLX_to);
 8003ede:	4b0d      	ldr	r3, [pc, #52]	@ (8003f14 <main+0xa8>)
 8003ee0:	edd3 7a00 	vldr	s15, [r3]
 8003ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8003f18 <main+0xac>)
 8003ee6:	edd7 0a01 	vldr	s1, [r7, #4]
 8003eea:	eeb0 0a67 	vmov.f32	s0, s15
 8003eee:	4907      	ldr	r1, [pc, #28]	@ (8003f0c <main+0xa0>)
 8003ef0:	4807      	ldr	r0, [pc, #28]	@ (8003f10 <main+0xa4>)
 8003ef2:	f7fd f8c1 	bl	8001078 <MLX90640_CalculateTo>
	  computeMLXSample();
 8003ef6:	f7ff ff93 	bl	8003e20 <computeMLXSample>
  {
 8003efa:	bf00      	nop
 8003efc:	e7dc      	b.n	8003eb8 <main+0x4c>
 8003efe:	bf00      	nop
 8003f00:	2000024c 	.word	0x2000024c
 8003f04:	20000248 	.word	0x20000248
 8003f08:	20000250 	.word	0x20000250
 8003f0c:	200008d0 	.word	0x200008d0
 8003f10:	20001b4c 	.word	0x20001b4c
 8003f14:	20000000 	.word	0x20000000
 8003f18:	200021d0 	.word	0x200021d0

08003f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b096      	sub	sp, #88	@ 0x58
 8003f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f22:	f107 0314 	add.w	r3, r7, #20
 8003f26:	2244      	movs	r2, #68	@ 0x44
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f003 f938 	bl	80071a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f30:	463b      	mov	r3, r7
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	605a      	str	r2, [r3, #4]
 8003f38:	609a      	str	r2, [r3, #8]
 8003f3a:	60da      	str	r2, [r3, #12]
 8003f3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003f3e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003f42:	f001 fac7 	bl	80054d4 <HAL_PWREx_ControlVoltageScaling>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003f4c:	f000 f848 	bl	8003fe0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003f50:	f001 faa2 	bl	8005498 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003f54:	4b21      	ldr	r3, [pc, #132]	@ (8003fdc <SystemClock_Config+0xc0>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5a:	4a20      	ldr	r2, [pc, #128]	@ (8003fdc <SystemClock_Config+0xc0>)
 8003f5c:	f023 0318 	bic.w	r3, r3, #24
 8003f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003f64:	2314      	movs	r3, #20
 8003f66:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003f70:	2300      	movs	r3, #0
 8003f72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003f74:	2360      	movs	r3, #96	@ 0x60
 8003f76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003f80:	2301      	movs	r3, #1
 8003f82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003f84:	2310      	movs	r3, #16
 8003f86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003f88:	2307      	movs	r3, #7
 8003f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003f90:	2302      	movs	r3, #2
 8003f92:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f001 faf1 	bl	8005580 <HAL_RCC_OscConfig>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003fa4:	f000 f81c 	bl	8003fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fa8:	230f      	movs	r3, #15
 8003faa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fac:	2303      	movs	r3, #3
 8003fae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003fbc:	463b      	mov	r3, r7
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 fef1 	bl	8005da8 <HAL_RCC_ClockConfig>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003fcc:	f000 f808 	bl	8003fe0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003fd0:	f002 facc 	bl	800656c <HAL_RCCEx_EnableMSIPLLMode>
}
 8003fd4:	bf00      	nop
 8003fd6:	3758      	adds	r7, #88	@ 0x58
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40021000 	.word	0x40021000

08003fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fe4:	b672      	cpsid	i
}
 8003fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003fe8:	bf00      	nop
 8003fea:	e7fd      	b.n	8003fe8 <Error_Handler+0x8>

08003fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8004030 <HAL_MspInit+0x44>)
 8003ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8004030 <HAL_MspInit+0x44>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8004030 <HAL_MspInit+0x44>)
 8004000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	607b      	str	r3, [r7, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800400a:	4b09      	ldr	r3, [pc, #36]	@ (8004030 <HAL_MspInit+0x44>)
 800400c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400e:	4a08      	ldr	r2, [pc, #32]	@ (8004030 <HAL_MspInit+0x44>)
 8004010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004014:	6593      	str	r3, [r2, #88]	@ 0x58
 8004016:	4b06      	ldr	r3, [pc, #24]	@ (8004030 <HAL_MspInit+0x44>)
 8004018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40021000 	.word	0x40021000

08004034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004038:	bf00      	nop
 800403a:	e7fd      	b.n	8004038 <NMI_Handler+0x4>

0800403c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004040:	bf00      	nop
 8004042:	e7fd      	b.n	8004040 <HardFault_Handler+0x4>

08004044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004048:	bf00      	nop
 800404a:	e7fd      	b.n	8004048 <MemManage_Handler+0x4>

0800404c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004050:	bf00      	nop
 8004052:	e7fd      	b.n	8004050 <BusFault_Handler+0x4>

08004054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <UsageFault_Handler+0x4>

0800405c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004060:	bf00      	nop
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800406a:	b480      	push	{r7}
 800406c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800407c:	bf00      	nop
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800408a:	f000 f959 	bl	8004340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800408e:	bf00      	nop
 8004090:	bd80      	pop	{r7, pc}

08004092 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0
  return 1;
 8004096:	2301      	movs	r3, #1
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <_kill>:

int _kill(int pid, int sig)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80040ac:	f003 f880 	bl	80071b0 <__errno>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2216      	movs	r2, #22
 80040b4:	601a      	str	r2, [r3, #0]
  return -1;
 80040b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <_exit>:

void _exit (int status)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80040ca:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff ffe7 	bl	80040a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80040d4:	bf00      	nop
 80040d6:	e7fd      	b.n	80040d4 <_exit+0x12>

080040d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]
 80040e8:	e00a      	b.n	8004100 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040ea:	f3af 8000 	nop.w
 80040ee:	4601      	mov	r1, r0
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	60ba      	str	r2, [r7, #8]
 80040f6:	b2ca      	uxtb	r2, r1
 80040f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	3301      	adds	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	429a      	cmp	r2, r3
 8004106:	dbf0      	blt.n	80040ea <_read+0x12>
  }

  return len;
 8004108:	687b      	ldr	r3, [r7, #4]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
 8004122:	e009      	b.n	8004138 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	60ba      	str	r2, [r7, #8]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	3301      	adds	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	429a      	cmp	r2, r3
 800413e:	dbf1      	blt.n	8004124 <_write+0x12>
  }
  return len;
 8004140:	687b      	ldr	r3, [r7, #4]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <_close>:

int _close(int file)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004152:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004156:	4618      	mov	r0, r3
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004172:	605a      	str	r2, [r3, #4]
  return 0;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <_isatty>:

int _isatty(int file)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800418a:	2301      	movs	r3, #1
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041bc:	4a14      	ldr	r2, [pc, #80]	@ (8004210 <_sbrk+0x5c>)
 80041be:	4b15      	ldr	r3, [pc, #84]	@ (8004214 <_sbrk+0x60>)
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041c8:	4b13      	ldr	r3, [pc, #76]	@ (8004218 <_sbrk+0x64>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041d0:	4b11      	ldr	r3, [pc, #68]	@ (8004218 <_sbrk+0x64>)
 80041d2:	4a12      	ldr	r2, [pc, #72]	@ (800421c <_sbrk+0x68>)
 80041d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041d6:	4b10      	ldr	r3, [pc, #64]	@ (8004218 <_sbrk+0x64>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4413      	add	r3, r2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d207      	bcs.n	80041f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041e4:	f002 ffe4 	bl	80071b0 <__errno>
 80041e8:	4603      	mov	r3, r0
 80041ea:	220c      	movs	r2, #12
 80041ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041f2:	e009      	b.n	8004208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041f4:	4b08      	ldr	r3, [pc, #32]	@ (8004218 <_sbrk+0x64>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041fa:	4b07      	ldr	r3, [pc, #28]	@ (8004218 <_sbrk+0x64>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	4a05      	ldr	r2, [pc, #20]	@ (8004218 <_sbrk+0x64>)
 8004204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004206:	68fb      	ldr	r3, [r7, #12]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20010000 	.word	0x20010000
 8004214:	00000400 	.word	0x00000400
 8004218:	20002e50 	.word	0x20002e50
 800421c:	20002fa8 	.word	0x20002fa8

08004220 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004224:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <SystemInit+0x20>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800422a:	4a05      	ldr	r2, [pc, #20]	@ (8004240 <SystemInit+0x20>)
 800422c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004230:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004244:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800427c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004248:	f7ff ffea 	bl	8004220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800424c:	480c      	ldr	r0, [pc, #48]	@ (8004280 <LoopForever+0x6>)
  ldr r1, =_edata
 800424e:	490d      	ldr	r1, [pc, #52]	@ (8004284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004250:	4a0d      	ldr	r2, [pc, #52]	@ (8004288 <LoopForever+0xe>)
  movs r3, #0
 8004252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004254:	e002      	b.n	800425c <LoopCopyDataInit>

08004256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800425a:	3304      	adds	r3, #4

0800425c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800425c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800425e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004260:	d3f9      	bcc.n	8004256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004262:	4a0a      	ldr	r2, [pc, #40]	@ (800428c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004264:	4c0a      	ldr	r4, [pc, #40]	@ (8004290 <LoopForever+0x16>)
  movs r3, #0
 8004266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004268:	e001      	b.n	800426e <LoopFillZerobss>

0800426a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800426a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800426c:	3204      	adds	r2, #4

0800426e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800426e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004270:	d3fb      	bcc.n	800426a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004272:	f002 ffa3 	bl	80071bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004276:	f7ff fdf9 	bl	8003e6c <main>

0800427a <LoopForever>:

LoopForever:
    b LoopForever
 800427a:	e7fe      	b.n	800427a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800427c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004284:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004288:	0800a3a8 	.word	0x0800a3a8
  ldr r2, =_sbss
 800428c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004290:	20002fa4 	.word	0x20002fa4

08004294 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004294:	e7fe      	b.n	8004294 <ADC1_IRQHandler>

08004296 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042a0:	2003      	movs	r0, #3
 80042a2:	f000 f91f 	bl	80044e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042a6:	2000      	movs	r0, #0
 80042a8:	f000 f80e 	bl	80042c8 <HAL_InitTick>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	71fb      	strb	r3, [r7, #7]
 80042b6:	e001      	b.n	80042bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80042b8:	f7ff fe98 	bl	8003fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042bc:	79fb      	ldrb	r3, [r7, #7]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80042d4:	4b17      	ldr	r3, [pc, #92]	@ (8004334 <HAL_InitTick+0x6c>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d023      	beq.n	8004324 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80042dc:	4b16      	ldr	r3, [pc, #88]	@ (8004338 <HAL_InitTick+0x70>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b14      	ldr	r3, [pc, #80]	@ (8004334 <HAL_InitTick+0x6c>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	4619      	mov	r1, r3
 80042e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80042ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f91d 	bl	8004532 <HAL_SYSTICK_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10f      	bne.n	800431e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b0f      	cmp	r3, #15
 8004302:	d809      	bhi.n	8004318 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004304:	2200      	movs	r2, #0
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800430c:	f000 f8f5 	bl	80044fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004310:	4a0a      	ldr	r2, [pc, #40]	@ (800433c <HAL_InitTick+0x74>)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e007      	b.n	8004328 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
 800431c:	e004      	b.n	8004328 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
 8004322:	e001      	b.n	8004328 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004328:	7bfb      	ldrb	r3, [r7, #15]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	2000000c 	.word	0x2000000c
 8004338:	20000004 	.word	0x20000004
 800433c:	20000008 	.word	0x20000008

08004340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004344:	4b06      	ldr	r3, [pc, #24]	@ (8004360 <HAL_IncTick+0x20>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <HAL_IncTick+0x24>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4413      	add	r3, r2
 8004350:	4a04      	ldr	r2, [pc, #16]	@ (8004364 <HAL_IncTick+0x24>)
 8004352:	6013      	str	r3, [r2, #0]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	2000000c 	.word	0x2000000c
 8004364:	20002e54 	.word	0x20002e54

08004368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return uwTick;
 800436c:	4b03      	ldr	r3, [pc, #12]	@ (800437c <HAL_GetTick+0x14>)
 800436e:	681b      	ldr	r3, [r3, #0]
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20002e54 	.word	0x20002e54

08004380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004390:	4b0c      	ldr	r3, [pc, #48]	@ (80043c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800439c:	4013      	ands	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043b2:	4a04      	ldr	r2, [pc, #16]	@ (80043c4 <__NVIC_SetPriorityGrouping+0x44>)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	60d3      	str	r3, [r2, #12]
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043cc:	4b04      	ldr	r3, [pc, #16]	@ (80043e0 <__NVIC_GetPriorityGrouping+0x18>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	0a1b      	lsrs	r3, r3, #8
 80043d2:	f003 0307 	and.w	r3, r3, #7
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	e000ed00 	.word	0xe000ed00

080043e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	6039      	str	r1, [r7, #0]
 80043ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	db0a      	blt.n	800440e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	490c      	ldr	r1, [pc, #48]	@ (8004430 <__NVIC_SetPriority+0x4c>)
 80043fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004402:	0112      	lsls	r2, r2, #4
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	440b      	add	r3, r1
 8004408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800440c:	e00a      	b.n	8004424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	b2da      	uxtb	r2, r3
 8004412:	4908      	ldr	r1, [pc, #32]	@ (8004434 <__NVIC_SetPriority+0x50>)
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	3b04      	subs	r3, #4
 800441c:	0112      	lsls	r2, r2, #4
 800441e:	b2d2      	uxtb	r2, r2
 8004420:	440b      	add	r3, r1
 8004422:	761a      	strb	r2, [r3, #24]
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	e000e100 	.word	0xe000e100
 8004434:	e000ed00 	.word	0xe000ed00

08004438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004438:	b480      	push	{r7}
 800443a:	b089      	sub	sp, #36	@ 0x24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f1c3 0307 	rsb	r3, r3, #7
 8004452:	2b04      	cmp	r3, #4
 8004454:	bf28      	it	cs
 8004456:	2304      	movcs	r3, #4
 8004458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	3304      	adds	r3, #4
 800445e:	2b06      	cmp	r3, #6
 8004460:	d902      	bls.n	8004468 <NVIC_EncodePriority+0x30>
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	3b03      	subs	r3, #3
 8004466:	e000      	b.n	800446a <NVIC_EncodePriority+0x32>
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800446c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43da      	mvns	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	401a      	ands	r2, r3
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004480:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	fa01 f303 	lsl.w	r3, r1, r3
 800448a:	43d9      	mvns	r1, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004490:	4313      	orrs	r3, r2
         );
}
 8004492:	4618      	mov	r0, r3
 8004494:	3724      	adds	r7, #36	@ 0x24
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044b0:	d301      	bcc.n	80044b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044b2:	2301      	movs	r3, #1
 80044b4:	e00f      	b.n	80044d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044b6:	4a0a      	ldr	r2, [pc, #40]	@ (80044e0 <SysTick_Config+0x40>)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044be:	210f      	movs	r1, #15
 80044c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044c4:	f7ff ff8e 	bl	80043e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044c8:	4b05      	ldr	r3, [pc, #20]	@ (80044e0 <SysTick_Config+0x40>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044ce:	4b04      	ldr	r3, [pc, #16]	@ (80044e0 <SysTick_Config+0x40>)
 80044d0:	2207      	movs	r2, #7
 80044d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	e000e010 	.word	0xe000e010

080044e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff ff47 	bl	8004380 <__NVIC_SetPriorityGrouping>
}
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b086      	sub	sp, #24
 80044fe:	af00      	add	r7, sp, #0
 8004500:	4603      	mov	r3, r0
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800450c:	f7ff ff5c 	bl	80043c8 <__NVIC_GetPriorityGrouping>
 8004510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	6978      	ldr	r0, [r7, #20]
 8004518:	f7ff ff8e 	bl	8004438 <NVIC_EncodePriority>
 800451c:	4602      	mov	r2, r0
 800451e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004522:	4611      	mov	r1, r2
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff ff5d 	bl	80043e4 <__NVIC_SetPriority>
}
 800452a:	bf00      	nop
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b082      	sub	sp, #8
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff ffb0 	bl	80044a0 <SysTick_Config>
 8004540:	4603      	mov	r3, r0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800455a:	e148      	b.n	80047ee <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	2101      	movs	r1, #1
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	4013      	ands	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 813a 	beq.w	80047e8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d005      	beq.n	800458c <HAL_GPIO_Init+0x40>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d130      	bne.n	80045ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	2203      	movs	r2, #3
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	43db      	mvns	r3, r3
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4013      	ands	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045c2:	2201      	movs	r2, #1
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4013      	ands	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	091b      	lsrs	r3, r3, #4
 80045d8:	f003 0201 	and.w	r2, r3, #1
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d017      	beq.n	800462a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	2203      	movs	r2, #3
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43db      	mvns	r3, r3
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4013      	ands	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d123      	bne.n	800467e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	08da      	lsrs	r2, r3, #3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3208      	adds	r2, #8
 800463e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004642:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	220f      	movs	r2, #15
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43db      	mvns	r3, r3
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4013      	ands	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	08da      	lsrs	r2, r3, #3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3208      	adds	r2, #8
 8004678:	6939      	ldr	r1, [r7, #16]
 800467a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	2203      	movs	r2, #3
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43db      	mvns	r3, r3
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4013      	ands	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f003 0203 	and.w	r2, r3, #3
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 8094 	beq.w	80047e8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046c0:	4b52      	ldr	r3, [pc, #328]	@ (800480c <HAL_GPIO_Init+0x2c0>)
 80046c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c4:	4a51      	ldr	r2, [pc, #324]	@ (800480c <HAL_GPIO_Init+0x2c0>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80046cc:	4b4f      	ldr	r3, [pc, #316]	@ (800480c <HAL_GPIO_Init+0x2c0>)
 80046ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046d8:	4a4d      	ldr	r2, [pc, #308]	@ (8004810 <HAL_GPIO_Init+0x2c4>)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	089b      	lsrs	r3, r3, #2
 80046de:	3302      	adds	r3, #2
 80046e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 0303 	and.w	r3, r3, #3
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	220f      	movs	r2, #15
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	43db      	mvns	r3, r3
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4013      	ands	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004702:	d00d      	beq.n	8004720 <HAL_GPIO_Init+0x1d4>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a43      	ldr	r2, [pc, #268]	@ (8004814 <HAL_GPIO_Init+0x2c8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d007      	beq.n	800471c <HAL_GPIO_Init+0x1d0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a42      	ldr	r2, [pc, #264]	@ (8004818 <HAL_GPIO_Init+0x2cc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d101      	bne.n	8004718 <HAL_GPIO_Init+0x1cc>
 8004714:	2302      	movs	r3, #2
 8004716:	e004      	b.n	8004722 <HAL_GPIO_Init+0x1d6>
 8004718:	2307      	movs	r3, #7
 800471a:	e002      	b.n	8004722 <HAL_GPIO_Init+0x1d6>
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <HAL_GPIO_Init+0x1d6>
 8004720:	2300      	movs	r3, #0
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	f002 0203 	and.w	r2, r2, #3
 8004728:	0092      	lsls	r2, r2, #2
 800472a:	4093      	lsls	r3, r2
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004732:	4937      	ldr	r1, [pc, #220]	@ (8004810 <HAL_GPIO_Init+0x2c4>)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	089b      	lsrs	r3, r3, #2
 8004738:	3302      	adds	r3, #2
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004740:	4b36      	ldr	r3, [pc, #216]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	43db      	mvns	r3, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4013      	ands	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004764:	4a2d      	ldr	r2, [pc, #180]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800476a:	4b2c      	ldr	r3, [pc, #176]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	43db      	mvns	r3, r3
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4013      	ands	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800478e:	4a23      	ldr	r2, [pc, #140]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004794:	4b21      	ldr	r3, [pc, #132]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	43db      	mvns	r3, r3
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4013      	ands	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047b8:	4a18      	ldr	r2, [pc, #96]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80047be:	4b17      	ldr	r3, [pc, #92]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4013      	ands	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4313      	orrs	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047e2:	4a0e      	ldr	r2, [pc, #56]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	3301      	adds	r3, #1
 80047ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f47f aeaf 	bne.w	800455c <HAL_GPIO_Init+0x10>
  }
}
 80047fe:	bf00      	nop
 8004800:	bf00      	nop
 8004802:	371c      	adds	r7, #28
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	40021000 	.word	0x40021000
 8004810:	40010000 	.word	0x40010000
 8004814:	48000400 	.word	0x48000400
 8004818:	48000800 	.word	0x48000800
 800481c:	40010400 	.word	0x40010400

08004820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	807b      	strh	r3, [r7, #2]
 800482c:	4613      	mov	r3, r2
 800482e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004830:	787b      	ldrb	r3, [r7, #1]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004836:	887a      	ldrh	r2, [r7, #2]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800483c:	e002      	b.n	8004844 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800483e:	887a      	ldrh	r2, [r7, #2]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e08d      	b.n	800497e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff fa6c 	bl	8003d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2224      	movs	r2, #36	@ 0x24
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0201 	bic.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80048a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d107      	bne.n	80048ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	e006      	b.n	80048d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80048d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d108      	bne.n	80048f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ee:	605a      	str	r2, [r3, #4]
 80048f0:	e007      	b.n	8004902 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004900:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004910:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004914:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004924:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69d9      	ldr	r1, [r3, #28]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1a      	ldr	r2, [r3, #32]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	4608      	mov	r0, r1
 8004992:	4611      	mov	r1, r2
 8004994:	461a      	mov	r2, r3
 8004996:	4603      	mov	r3, r0
 8004998:	817b      	strh	r3, [r7, #10]
 800499a:	460b      	mov	r3, r1
 800499c:	813b      	strh	r3, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	f040 80f9 	bne.w	8004ba2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_I2C_Mem_Write+0x34>
 80049b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d105      	bne.n	80049c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049c2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0ed      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_I2C_Mem_Write+0x4e>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e0e6      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049de:	f7ff fcc3 	bl	8004368 <HAL_GetTick>
 80049e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2319      	movs	r3, #25
 80049ea:	2201      	movs	r2, #1
 80049ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fac3 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0d1      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2221      	movs	r2, #33	@ 0x21
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2240      	movs	r2, #64	@ 0x40
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a3a      	ldr	r2, [r7, #32]
 8004a1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a28:	88f8      	ldrh	r0, [r7, #6]
 8004a2a:	893a      	ldrh	r2, [r7, #8]
 8004a2c:	8979      	ldrh	r1, [r7, #10]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	4603      	mov	r3, r0
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f9d3 	bl	8004de4 <I2C_RequestMemoryWrite>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0a9      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2bff      	cmp	r3, #255	@ 0xff
 8004a58:	d90e      	bls.n	8004a78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	22ff      	movs	r2, #255	@ 0xff
 8004a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	8979      	ldrh	r1, [r7, #10]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 fc47 	bl	8005304 <I2C_TransferConfig>
 8004a76:	e00f      	b.n	8004a98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	8979      	ldrh	r1, [r7, #10]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fc36 	bl	8005304 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fac6 	bl	800502e <I2C_WaitOnTXISFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e07b      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d034      	beq.n	8004b50 <HAL_I2C_Mem_Write+0x1c8>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d130      	bne.n	8004b50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af4:	2200      	movs	r2, #0
 8004af6:	2180      	movs	r1, #128	@ 0x80
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fa3f 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e04d      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2bff      	cmp	r3, #255	@ 0xff
 8004b10:	d90e      	bls.n	8004b30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	22ff      	movs	r2, #255	@ 0xff
 8004b16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	8979      	ldrh	r1, [r7, #10]
 8004b20:	2300      	movs	r3, #0
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 fbeb 	bl	8005304 <I2C_TransferConfig>
 8004b2e:	e00f      	b.n	8004b50 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	8979      	ldrh	r1, [r7, #10]
 8004b42:	2300      	movs	r3, #0
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fbda 	bl	8005304 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d19e      	bne.n	8004a98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 faac 	bl	80050bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e01a      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2220      	movs	r2, #32
 8004b74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b0a      	ldr	r3, [pc, #40]	@ (8004bac <HAL_I2C_Mem_Write+0x224>)
 8004b82:	400b      	ands	r3, r1
 8004b84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
  }
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	fe00e800 	.word	0xfe00e800

08004bb0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	4608      	mov	r0, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	817b      	strh	r3, [r7, #10]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	813b      	strh	r3, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	f040 80fd 	bne.w	8004dd2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_I2C_Mem_Read+0x34>
 8004bde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d105      	bne.n	8004bf0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0f1      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_I2C_Mem_Read+0x4e>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e0ea      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c06:	f7ff fbaf 	bl	8004368 <HAL_GetTick>
 8004c0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	2319      	movs	r3, #25
 8004c12:	2201      	movs	r2, #1
 8004c14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f9af 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0d5      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2222      	movs	r2, #34	@ 0x22
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2240      	movs	r2, #64	@ 0x40
 8004c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a3a      	ldr	r2, [r7, #32]
 8004c42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004c48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c50:	88f8      	ldrh	r0, [r7, #6]
 8004c52:	893a      	ldrh	r2, [r7, #8]
 8004c54:	8979      	ldrh	r1, [r7, #10]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	9301      	str	r3, [sp, #4]
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	4603      	mov	r3, r0
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f913 	bl	8004e8c <I2C_RequestMemoryRead>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0ad      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2bff      	cmp	r3, #255	@ 0xff
 8004c80:	d90e      	bls.n	8004ca0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	8979      	ldrh	r1, [r7, #10]
 8004c90:	4b52      	ldr	r3, [pc, #328]	@ (8004ddc <HAL_I2C_Mem_Read+0x22c>)
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 fb33 	bl	8005304 <I2C_TransferConfig>
 8004c9e:	e00f      	b.n	8004cc0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	8979      	ldrh	r1, [r7, #10]
 8004cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ddc <HAL_I2C_Mem_Read+0x22c>)
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 fb22 	bl	8005304 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2104      	movs	r1, #4
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f956 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e07c      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d034      	beq.n	8004d80 <HAL_I2C_Mem_Read+0x1d0>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d130      	bne.n	8004d80 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d24:	2200      	movs	r2, #0
 8004d26:	2180      	movs	r1, #128	@ 0x80
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f927 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e04d      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2bff      	cmp	r3, #255	@ 0xff
 8004d40:	d90e      	bls.n	8004d60 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	8979      	ldrh	r1, [r7, #10]
 8004d50:	2300      	movs	r3, #0
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fad3 	bl	8005304 <I2C_TransferConfig>
 8004d5e:	e00f      	b.n	8004d80 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	8979      	ldrh	r1, [r7, #10]
 8004d72:	2300      	movs	r3, #0
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 fac2 	bl	8005304 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d19a      	bne.n	8004cc0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f994 	bl	80050bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e01a      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2220      	movs	r2, #32
 8004da4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6859      	ldr	r1, [r3, #4]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	4b0b      	ldr	r3, [pc, #44]	@ (8004de0 <HAL_I2C_Mem_Read+0x230>)
 8004db2:	400b      	ands	r3, r1
 8004db4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e000      	b.n	8004dd4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
  }
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	80002400 	.word	0x80002400
 8004de0:	fe00e800 	.word	0xfe00e800

08004de4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	4608      	mov	r0, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	461a      	mov	r2, r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	817b      	strh	r3, [r7, #10]
 8004df6:	460b      	mov	r3, r1
 8004df8:	813b      	strh	r3, [r7, #8]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	8979      	ldrh	r1, [r7, #10]
 8004e04:	4b20      	ldr	r3, [pc, #128]	@ (8004e88 <I2C_RequestMemoryWrite+0xa4>)
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 fa79 	bl	8005304 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	69b9      	ldr	r1, [r7, #24]
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f909 	bl	800502e <I2C_WaitOnTXISFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e02c      	b.n	8004e80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d105      	bne.n	8004e38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e2c:	893b      	ldrh	r3, [r7, #8]
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e36:	e015      	b.n	8004e64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e38:	893b      	ldrh	r3, [r7, #8]
 8004e3a:	0a1b      	lsrs	r3, r3, #8
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	69b9      	ldr	r1, [r7, #24]
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f8ef 	bl	800502e <I2C_WaitOnTXISFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e012      	b.n	8004e80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e5a:	893b      	ldrh	r3, [r7, #8]
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2180      	movs	r1, #128	@ 0x80
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f884 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	80002000 	.word	0x80002000

08004e8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	4608      	mov	r0, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	817b      	strh	r3, [r7, #10]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	813b      	strh	r3, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	8979      	ldrh	r1, [r7, #10]
 8004eac:	4b20      	ldr	r3, [pc, #128]	@ (8004f30 <I2C_RequestMemoryRead+0xa4>)
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fa26 	bl	8005304 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	69b9      	ldr	r1, [r7, #24]
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f8b6 	bl	800502e <I2C_WaitOnTXISFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e02c      	b.n	8004f26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d105      	bne.n	8004ede <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ed2:	893b      	ldrh	r3, [r7, #8]
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	629a      	str	r2, [r3, #40]	@ 0x28
 8004edc:	e015      	b.n	8004f0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ede:	893b      	ldrh	r3, [r7, #8]
 8004ee0:	0a1b      	lsrs	r3, r3, #8
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	69b9      	ldr	r1, [r7, #24]
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f89c 	bl	800502e <I2C_WaitOnTXISFlagUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e012      	b.n	8004f26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f00:	893b      	ldrh	r3, [r7, #8]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2200      	movs	r2, #0
 8004f12:	2140      	movs	r1, #64	@ 0x40
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f831 	bl	8004f7c <I2C_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	80002000 	.word	0x80002000

08004f34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d103      	bne.n	8004f52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d007      	beq.n	8004f70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	619a      	str	r2, [r3, #24]
  }
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f8c:	e03b      	b.n	8005006 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f8e:	69ba      	ldr	r2, [r7, #24]
 8004f90:	6839      	ldr	r1, [r7, #0]
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 f8d6 	bl	8005144 <I2C_IsErrorOccurred>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e041      	b.n	8005026 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fa8:	d02d      	beq.n	8005006 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004faa:	f7ff f9dd 	bl	8004368 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d302      	bcc.n	8004fc0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d122      	bne.n	8005006 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	bf0c      	ite	eq
 8004fd0:	2301      	moveq	r3, #1
 8004fd2:	2300      	movne	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d113      	bne.n	8005006 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe2:	f043 0220 	orr.w	r2, r3, #32
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e00f      	b.n	8005026 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699a      	ldr	r2, [r3, #24]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	4013      	ands	r3, r2
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	429a      	cmp	r2, r3
 8005014:	bf0c      	ite	eq
 8005016:	2301      	moveq	r3, #1
 8005018:	2300      	movne	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	429a      	cmp	r2, r3
 8005022:	d0b4      	beq.n	8004f8e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800503a:	e033      	b.n	80050a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 f87f 	bl	8005144 <I2C_IsErrorOccurred>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e031      	b.n	80050b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005056:	d025      	beq.n	80050a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005058:	f7ff f986 	bl	8004368 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	429a      	cmp	r2, r3
 8005066:	d302      	bcc.n	800506e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d11a      	bne.n	80050a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b02      	cmp	r3, #2
 800507a:	d013      	beq.n	80050a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005080:	f043 0220 	orr.w	r2, r3, #32
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e007      	b.n	80050b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d1c4      	bne.n	800503c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050c8:	e02f      	b.n	800512a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 f838 	bl	8005144 <I2C_IsErrorOccurred>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e02d      	b.n	800513a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050de:	f7ff f943 	bl	8004368 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d302      	bcc.n	80050f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d11a      	bne.n	800512a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d013      	beq.n	800512a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e007      	b.n	800513a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b20      	cmp	r3, #32
 8005136:	d1c8      	bne.n	80050ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	@ 0x28
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	2b00      	cmp	r3, #0
 800516e:	d068      	beq.n	8005242 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2210      	movs	r2, #16
 8005176:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005178:	e049      	b.n	800520e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005180:	d045      	beq.n	800520e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005182:	f7ff f8f1 	bl	8004368 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	429a      	cmp	r2, r3
 8005190:	d302      	bcc.n	8005198 <I2C_IsErrorOccurred+0x54>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d13a      	bne.n	800520e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ba:	d121      	bne.n	8005200 <I2C_IsErrorOccurred+0xbc>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051c2:	d01d      	beq.n	8005200 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d01a      	beq.n	8005200 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051da:	f7ff f8c5 	bl	8004368 <HAL_GetTick>
 80051de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051e0:	e00e      	b.n	8005200 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051e2:	f7ff f8c1 	bl	8004368 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b19      	cmp	r3, #25
 80051ee:	d907      	bls.n	8005200 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	f043 0320 	orr.w	r3, r3, #32
 80051f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80051fe:	e006      	b.n	800520e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b20      	cmp	r3, #32
 800520c:	d1e9      	bne.n	80051e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b20      	cmp	r3, #32
 800521a:	d003      	beq.n	8005224 <I2C_IsErrorOccurred+0xe0>
 800521c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0aa      	beq.n	800517a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005228:	2b00      	cmp	r3, #0
 800522a:	d103      	bne.n	8005234 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2220      	movs	r2, #32
 8005232:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	f043 0304 	orr.w	r3, r3, #4
 800523a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005264:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00b      	beq.n	800528e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	f043 0308 	orr.w	r3, r3, #8
 800527c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005286:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00b      	beq.n	80052b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	f043 0302 	orr.w	r3, r3, #2
 800529e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80052b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01c      	beq.n	80052f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f7ff fe3b 	bl	8004f34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6859      	ldr	r1, [r3, #4]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005300 <I2C_IsErrorOccurred+0x1bc>)
 80052ca:	400b      	ands	r3, r1
 80052cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	431a      	orrs	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80052f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3728      	adds	r7, #40	@ 0x28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	fe00e800 	.word	0xfe00e800

08005304 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	607b      	str	r3, [r7, #4]
 800530e:	460b      	mov	r3, r1
 8005310:	817b      	strh	r3, [r7, #10]
 8005312:	4613      	mov	r3, r2
 8005314:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005316:	897b      	ldrh	r3, [r7, #10]
 8005318:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800531c:	7a7b      	ldrb	r3, [r7, #9]
 800531e:	041b      	lsls	r3, r3, #16
 8005320:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005324:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	4313      	orrs	r3, r2
 800532e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005332:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	0d5b      	lsrs	r3, r3, #21
 800533e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005342:	4b08      	ldr	r3, [pc, #32]	@ (8005364 <I2C_TransferConfig+0x60>)
 8005344:	430b      	orrs	r3, r1
 8005346:	43db      	mvns	r3, r3
 8005348:	ea02 0103 	and.w	r1, r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005356:	bf00      	nop
 8005358:	371c      	adds	r7, #28
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	03ff63ff 	.word	0x03ff63ff

08005368 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b20      	cmp	r3, #32
 800537c:	d138      	bne.n	80053f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005388:	2302      	movs	r3, #2
 800538a:	e032      	b.n	80053f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2224      	movs	r2, #36	@ 0x24
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0201 	bic.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80053ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6819      	ldr	r1, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2220      	movs	r2, #32
 80053e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	e000      	b.n	80053f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053f0:	2302      	movs	r3, #2
  }
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053fe:	b480      	push	{r7}
 8005400:	b085      	sub	sp, #20
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b20      	cmp	r3, #32
 8005412:	d139      	bne.n	8005488 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800541e:	2302      	movs	r3, #2
 8005420:	e033      	b.n	800548a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2224      	movs	r2, #36	@ 0x24
 800542e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005450:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	e000      	b.n	800548a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005488:	2302      	movs	r3, #2
  }
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800549c:	4b05      	ldr	r3, [pc, #20]	@ (80054b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a04      	ldr	r2, [pc, #16]	@ (80054b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80054a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054a6:	6013      	str	r3, [r2, #0]
}
 80054a8:	bf00      	nop
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40007000 	.word	0x40007000

080054b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80054bc:	4b04      	ldr	r3, [pc, #16]	@ (80054d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40007000 	.word	0x40007000

080054d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054e2:	d130      	bne.n	8005546 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80054e4:	4b23      	ldr	r3, [pc, #140]	@ (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054f0:	d038      	beq.n	8005564 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054f2:	4b20      	ldr	r3, [pc, #128]	@ (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005500:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005502:	4b1d      	ldr	r3, [pc, #116]	@ (8005578 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2232      	movs	r2, #50	@ 0x32
 8005508:	fb02 f303 	mul.w	r3, r2, r3
 800550c:	4a1b      	ldr	r2, [pc, #108]	@ (800557c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800550e:	fba2 2303 	umull	r2, r3, r2, r3
 8005512:	0c9b      	lsrs	r3, r3, #18
 8005514:	3301      	adds	r3, #1
 8005516:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005518:	e002      	b.n	8005520 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3b01      	subs	r3, #1
 800551e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005520:	4b14      	ldr	r3, [pc, #80]	@ (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800552c:	d102      	bne.n	8005534 <HAL_PWREx_ControlVoltageScaling+0x60>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1f2      	bne.n	800551a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005534:	4b0f      	ldr	r3, [pc, #60]	@ (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800553c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005540:	d110      	bne.n	8005564 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e00f      	b.n	8005566 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005546:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800554e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005552:	d007      	beq.n	8005564 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005554:	4b07      	ldr	r3, [pc, #28]	@ (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800555c:	4a05      	ldr	r2, [pc, #20]	@ (8005574 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800555e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005562:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40007000 	.word	0x40007000
 8005578:	20000004 	.word	0x20000004
 800557c:	431bde83 	.word	0x431bde83

08005580 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	f000 bc02 	b.w	8005d98 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005594:	4b96      	ldr	r3, [pc, #600]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 030c 	and.w	r3, r3, #12
 800559c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800559e:	4b94      	ldr	r3, [pc, #592]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 80e4 	beq.w	800577e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d007      	beq.n	80055cc <HAL_RCC_OscConfig+0x4c>
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b0c      	cmp	r3, #12
 80055c0:	f040 808b 	bne.w	80056da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	f040 8087 	bne.w	80056da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055cc:	4b88      	ldr	r3, [pc, #544]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <HAL_RCC_OscConfig+0x64>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e3d9      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1a      	ldr	r2, [r3, #32]
 80055e8:	4b81      	ldr	r3, [pc, #516]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d004      	beq.n	80055fe <HAL_RCC_OscConfig+0x7e>
 80055f4:	4b7e      	ldr	r3, [pc, #504]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055fc:	e005      	b.n	800560a <HAL_RCC_OscConfig+0x8a>
 80055fe:	4b7c      	ldr	r3, [pc, #496]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005604:	091b      	lsrs	r3, r3, #4
 8005606:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800560a:	4293      	cmp	r3, r2
 800560c:	d223      	bcs.n	8005656 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fd54 	bl	80060c0 <RCC_SetFlashLatencyFromMSIRange>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e3ba      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005622:	4b73      	ldr	r3, [pc, #460]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a72      	ldr	r2, [pc, #456]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005628:	f043 0308 	orr.w	r3, r3, #8
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	4b70      	ldr	r3, [pc, #448]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	496d      	ldr	r1, [pc, #436]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 800563c:	4313      	orrs	r3, r2
 800563e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005640:	4b6b      	ldr	r3, [pc, #428]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	4968      	ldr	r1, [pc, #416]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005650:	4313      	orrs	r3, r2
 8005652:	604b      	str	r3, [r1, #4]
 8005654:	e025      	b.n	80056a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005656:	4b66      	ldr	r3, [pc, #408]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a65      	ldr	r2, [pc, #404]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 800565c:	f043 0308 	orr.w	r3, r3, #8
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	4b63      	ldr	r3, [pc, #396]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	4960      	ldr	r1, [pc, #384]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005670:	4313      	orrs	r3, r2
 8005672:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005674:	4b5e      	ldr	r3, [pc, #376]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	495b      	ldr	r1, [pc, #364]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005684:	4313      	orrs	r3, r2
 8005686:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d109      	bne.n	80056a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fd14 	bl	80060c0 <RCC_SetFlashLatencyFromMSIRange>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e37a      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056a2:	f000 fc81 	bl	8005fa8 <HAL_RCC_GetSysClockFreq>
 80056a6:	4602      	mov	r2, r0
 80056a8:	4b51      	ldr	r3, [pc, #324]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	091b      	lsrs	r3, r3, #4
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	4950      	ldr	r1, [pc, #320]	@ (80057f4 <HAL_RCC_OscConfig+0x274>)
 80056b4:	5ccb      	ldrb	r3, [r1, r3]
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	fa22 f303 	lsr.w	r3, r2, r3
 80056be:	4a4e      	ldr	r2, [pc, #312]	@ (80057f8 <HAL_RCC_OscConfig+0x278>)
 80056c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80056c2:	4b4e      	ldr	r3, [pc, #312]	@ (80057fc <HAL_RCC_OscConfig+0x27c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fdfe 	bl	80042c8 <HAL_InitTick>
 80056cc:	4603      	mov	r3, r0
 80056ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d052      	beq.n	800577c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	e35e      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d032      	beq.n	8005748 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80056e2:	4b43      	ldr	r3, [pc, #268]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a42      	ldr	r2, [pc, #264]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056ee:	f7fe fe3b 	bl	8004368 <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056f4:	e008      	b.n	8005708 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056f6:	f7fe fe37 	bl	8004368 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e347      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005708:	4b39      	ldr	r3, [pc, #228]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0f0      	beq.n	80056f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005714:	4b36      	ldr	r3, [pc, #216]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a35      	ldr	r2, [pc, #212]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 800571a:	f043 0308 	orr.w	r3, r3, #8
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	4b33      	ldr	r3, [pc, #204]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	4930      	ldr	r1, [pc, #192]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 800572e:	4313      	orrs	r3, r2
 8005730:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005732:	4b2f      	ldr	r3, [pc, #188]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	021b      	lsls	r3, r3, #8
 8005740:	492b      	ldr	r1, [pc, #172]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005742:	4313      	orrs	r3, r2
 8005744:	604b      	str	r3, [r1, #4]
 8005746:	e01a      	b.n	800577e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005748:	4b29      	ldr	r3, [pc, #164]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a28      	ldr	r2, [pc, #160]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005754:	f7fe fe08 	bl	8004368 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800575c:	f7fe fe04 	bl	8004368 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e314      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800576e:	4b20      	ldr	r3, [pc, #128]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0x1dc>
 800577a:	e000      	b.n	800577e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800577c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d073      	beq.n	8005872 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	2b08      	cmp	r3, #8
 800578e:	d005      	beq.n	800579c <HAL_RCC_OscConfig+0x21c>
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b0c      	cmp	r3, #12
 8005794:	d10e      	bne.n	80057b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d10b      	bne.n	80057b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800579c:	4b14      	ldr	r3, [pc, #80]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d063      	beq.n	8005870 <HAL_RCC_OscConfig+0x2f0>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d15f      	bne.n	8005870 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e2f1      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057bc:	d106      	bne.n	80057cc <HAL_RCC_OscConfig+0x24c>
 80057be:	4b0c      	ldr	r3, [pc, #48]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a0b      	ldr	r2, [pc, #44]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 80057c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e025      	b.n	8005818 <HAL_RCC_OscConfig+0x298>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057d4:	d114      	bne.n	8005800 <HAL_RCC_OscConfig+0x280>
 80057d6:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a05      	ldr	r2, [pc, #20]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 80057dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	4b03      	ldr	r3, [pc, #12]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a02      	ldr	r2, [pc, #8]	@ (80057f0 <HAL_RCC_OscConfig+0x270>)
 80057e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	e013      	b.n	8005818 <HAL_RCC_OscConfig+0x298>
 80057f0:	40021000 	.word	0x40021000
 80057f4:	08009fa0 	.word	0x08009fa0
 80057f8:	20000004 	.word	0x20000004
 80057fc:	20000008 	.word	0x20000008
 8005800:	4ba0      	ldr	r3, [pc, #640]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a9f      	ldr	r2, [pc, #636]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	4b9d      	ldr	r3, [pc, #628]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a9c      	ldr	r2, [pc, #624]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d013      	beq.n	8005848 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005820:	f7fe fda2 	bl	8004368 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005828:	f7fe fd9e 	bl	8004368 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b64      	cmp	r3, #100	@ 0x64
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e2ae      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800583a:	4b92      	ldr	r3, [pc, #584]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0f0      	beq.n	8005828 <HAL_RCC_OscConfig+0x2a8>
 8005846:	e014      	b.n	8005872 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005848:	f7fe fd8e 	bl	8004368 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800584e:	e008      	b.n	8005862 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005850:	f7fe fd8a 	bl	8004368 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b64      	cmp	r3, #100	@ 0x64
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e29a      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005862:	4b88      	ldr	r3, [pc, #544]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1f0      	bne.n	8005850 <HAL_RCC_OscConfig+0x2d0>
 800586e:	e000      	b.n	8005872 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d060      	beq.n	8005940 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b04      	cmp	r3, #4
 8005882:	d005      	beq.n	8005890 <HAL_RCC_OscConfig+0x310>
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2b0c      	cmp	r3, #12
 8005888:	d119      	bne.n	80058be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d116      	bne.n	80058be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005890:	4b7c      	ldr	r3, [pc, #496]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_OscConfig+0x328>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e277      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a8:	4b76      	ldr	r3, [pc, #472]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	061b      	lsls	r3, r3, #24
 80058b6:	4973      	ldr	r1, [pc, #460]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058bc:	e040      	b.n	8005940 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d023      	beq.n	800590e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058c6:	4b6f      	ldr	r3, [pc, #444]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a6e      	ldr	r2, [pc, #440]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 80058cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d2:	f7fe fd49 	bl	8004368 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058d8:	e008      	b.n	80058ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058da:	f7fe fd45 	bl	8004368 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e255      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058ec:	4b65      	ldr	r3, [pc, #404]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0f0      	beq.n	80058da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f8:	4b62      	ldr	r3, [pc, #392]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	061b      	lsls	r3, r3, #24
 8005906:	495f      	ldr	r1, [pc, #380]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005908:	4313      	orrs	r3, r2
 800590a:	604b      	str	r3, [r1, #4]
 800590c:	e018      	b.n	8005940 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800590e:	4b5d      	ldr	r3, [pc, #372]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a5c      	ldr	r2, [pc, #368]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591a:	f7fe fd25 	bl	8004368 <HAL_GetTick>
 800591e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005920:	e008      	b.n	8005934 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005922:	f7fe fd21 	bl	8004368 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b02      	cmp	r3, #2
 800592e:	d901      	bls.n	8005934 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e231      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005934:	4b53      	ldr	r3, [pc, #332]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f0      	bne.n	8005922 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b00      	cmp	r3, #0
 800594a:	d03c      	beq.n	80059c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01c      	beq.n	800598e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005954:	4b4b      	ldr	r3, [pc, #300]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800595a:	4a4a      	ldr	r2, [pc, #296]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005964:	f7fe fd00 	bl	8004368 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800596c:	f7fe fcfc 	bl	8004368 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e20c      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800597e:	4b41      	ldr	r3, [pc, #260]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005980:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0ef      	beq.n	800596c <HAL_RCC_OscConfig+0x3ec>
 800598c:	e01b      	b.n	80059c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800598e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005990:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005994:	4a3b      	ldr	r2, [pc, #236]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005996:	f023 0301 	bic.w	r3, r3, #1
 800599a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800599e:	f7fe fce3 	bl	8004368 <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059a4:	e008      	b.n	80059b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059a6:	f7fe fcdf 	bl	8004368 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e1ef      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059b8:	4b32      	ldr	r3, [pc, #200]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 80059ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1ef      	bne.n	80059a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 80a6 	beq.w	8005b20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059d4:	2300      	movs	r3, #0
 80059d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80059d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 80059da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10d      	bne.n	8005a00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059e4:	4b27      	ldr	r3, [pc, #156]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 80059e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e8:	4a26      	ldr	r2, [pc, #152]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 80059ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80059f0:	4b24      	ldr	r3, [pc, #144]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 80059f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f8:	60bb      	str	r3, [r7, #8]
 80059fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059fc:	2301      	movs	r3, #1
 80059fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a00:	4b21      	ldr	r3, [pc, #132]	@ (8005a88 <HAL_RCC_OscConfig+0x508>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d118      	bne.n	8005a3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8005a88 <HAL_RCC_OscConfig+0x508>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a1d      	ldr	r2, [pc, #116]	@ (8005a88 <HAL_RCC_OscConfig+0x508>)
 8005a12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a18:	f7fe fca6 	bl	8004368 <HAL_GetTick>
 8005a1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a20:	f7fe fca2 	bl	8004368 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e1b2      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a32:	4b15      	ldr	r3, [pc, #84]	@ (8005a88 <HAL_RCC_OscConfig+0x508>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0f0      	beq.n	8005a20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d108      	bne.n	8005a58 <HAL_RCC_OscConfig+0x4d8>
 8005a46:	4b0f      	ldr	r3, [pc, #60]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a56:	e029      	b.n	8005aac <HAL_RCC_OscConfig+0x52c>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	d115      	bne.n	8005a8c <HAL_RCC_OscConfig+0x50c>
 8005a60:	4b08      	ldr	r3, [pc, #32]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a66:	4a07      	ldr	r2, [pc, #28]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005a68:	f043 0304 	orr.w	r3, r3, #4
 8005a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a70:	4b04      	ldr	r3, [pc, #16]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a76:	4a03      	ldr	r2, [pc, #12]	@ (8005a84 <HAL_RCC_OscConfig+0x504>)
 8005a78:	f043 0301 	orr.w	r3, r3, #1
 8005a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a80:	e014      	b.n	8005aac <HAL_RCC_OscConfig+0x52c>
 8005a82:	bf00      	nop
 8005a84:	40021000 	.word	0x40021000
 8005a88:	40007000 	.word	0x40007000
 8005a8c:	4b9a      	ldr	r3, [pc, #616]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a92:	4a99      	ldr	r2, [pc, #612]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005a94:	f023 0301 	bic.w	r3, r3, #1
 8005a98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005a9c:	4b96      	ldr	r3, [pc, #600]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa2:	4a95      	ldr	r2, [pc, #596]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005aa4:	f023 0304 	bic.w	r3, r3, #4
 8005aa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d016      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab4:	f7fe fc58 	bl	8004368 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aba:	e00a      	b.n	8005ad2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005abc:	f7fe fc54 	bl	8004368 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e162      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ad2:	4b89      	ldr	r3, [pc, #548]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0ed      	beq.n	8005abc <HAL_RCC_OscConfig+0x53c>
 8005ae0:	e015      	b.n	8005b0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae2:	f7fe fc41 	bl	8004368 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ae8:	e00a      	b.n	8005b00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7fe fc3d 	bl	8004368 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e14b      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b00:	4b7d      	ldr	r3, [pc, #500]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1ed      	bne.n	8005aea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b0e:	7ffb      	ldrb	r3, [r7, #31]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d105      	bne.n	8005b20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b14:	4b78      	ldr	r3, [pc, #480]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b18:	4a77      	ldr	r2, [pc, #476]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005b1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b1e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d03c      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01c      	beq.n	8005b6e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b34:	4b70      	ldr	r3, [pc, #448]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b3a:	4a6f      	ldr	r2, [pc, #444]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005b3c:	f043 0301 	orr.w	r3, r3, #1
 8005b40:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b44:	f7fe fc10 	bl	8004368 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b4c:	f7fe fc0c 	bl	8004368 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e11c      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005b5e:	4b66      	ldr	r3, [pc, #408]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0ef      	beq.n	8005b4c <HAL_RCC_OscConfig+0x5cc>
 8005b6c:	e01b      	b.n	8005ba6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b6e:	4b62      	ldr	r3, [pc, #392]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005b70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b74:	4a60      	ldr	r2, [pc, #384]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005b76:	f023 0301 	bic.w	r3, r3, #1
 8005b7a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7e:	f7fe fbf3 	bl	8004368 <HAL_GetTick>
 8005b82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b84:	e008      	b.n	8005b98 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b86:	f7fe fbef 	bl	8004368 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e0ff      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b98:	4b57      	ldr	r3, [pc, #348]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005b9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1ef      	bne.n	8005b86 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 80f3 	beq.w	8005d96 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	f040 80c9 	bne.w	8005d4c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005bba:	4b4f      	ldr	r3, [pc, #316]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f003 0203 	and.w	r2, r3, #3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d12c      	bne.n	8005c28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d123      	bne.n	8005c28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d11b      	bne.n	8005c28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d113      	bne.n	8005c28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0a:	085b      	lsrs	r3, r3, #1
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d109      	bne.n	8005c28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1e:	085b      	lsrs	r3, r3, #1
 8005c20:	3b01      	subs	r3, #1
 8005c22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d06b      	beq.n	8005d00 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b0c      	cmp	r3, #12
 8005c2c:	d062      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005c2e:	4b32      	ldr	r3, [pc, #200]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e0ac      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a2d      	ldr	r2, [pc, #180]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005c44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c4a:	f7fe fb8d 	bl	8004368 <HAL_GetTick>
 8005c4e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c52:	f7fe fb89 	bl	8004368 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e099      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c64:	4b24      	ldr	r3, [pc, #144]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1f0      	bne.n	8005c52 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c70:	4b21      	ldr	r3, [pc, #132]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	4b21      	ldr	r3, [pc, #132]	@ (8005cfc <HAL_RCC_OscConfig+0x77c>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c80:	3a01      	subs	r2, #1
 8005c82:	0112      	lsls	r2, r2, #4
 8005c84:	4311      	orrs	r1, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c8a:	0212      	lsls	r2, r2, #8
 8005c8c:	4311      	orrs	r1, r2
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c92:	0852      	lsrs	r2, r2, #1
 8005c94:	3a01      	subs	r2, #1
 8005c96:	0552      	lsls	r2, r2, #21
 8005c98:	4311      	orrs	r1, r2
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c9e:	0852      	lsrs	r2, r2, #1
 8005ca0:	3a01      	subs	r2, #1
 8005ca2:	0652      	lsls	r2, r2, #25
 8005ca4:	4311      	orrs	r1, r2
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005caa:	06d2      	lsls	r2, r2, #27
 8005cac:	430a      	orrs	r2, r1
 8005cae:	4912      	ldr	r1, [pc, #72]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005cb4:	4b10      	ldr	r3, [pc, #64]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a0f      	ldr	r2, [pc, #60]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ccc:	f7fe fb4c 	bl	8004368 <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd4:	f7fe fb48 	bl	8004368 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e058      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ce6:	4b04      	ldr	r3, [pc, #16]	@ (8005cf8 <HAL_RCC_OscConfig+0x778>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f0      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cf2:	e050      	b.n	8005d96 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e04f      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d00:	4b27      	ldr	r3, [pc, #156]	@ (8005da0 <HAL_RCC_OscConfig+0x820>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d144      	bne.n	8005d96 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005d0c:	4b24      	ldr	r3, [pc, #144]	@ (8005da0 <HAL_RCC_OscConfig+0x820>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a23      	ldr	r2, [pc, #140]	@ (8005da0 <HAL_RCC_OscConfig+0x820>)
 8005d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d18:	4b21      	ldr	r3, [pc, #132]	@ (8005da0 <HAL_RCC_OscConfig+0x820>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	4a20      	ldr	r2, [pc, #128]	@ (8005da0 <HAL_RCC_OscConfig+0x820>)
 8005d1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d24:	f7fe fb20 	bl	8004368 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d2c:	f7fe fb1c 	bl	8004368 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e02c      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d3e:	4b18      	ldr	r3, [pc, #96]	@ (8005da0 <HAL_RCC_OscConfig+0x820>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCC_OscConfig+0x7ac>
 8005d4a:	e024      	b.n	8005d96 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	2b0c      	cmp	r3, #12
 8005d50:	d01f      	beq.n	8005d92 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d52:	4b13      	ldr	r3, [pc, #76]	@ (8005da0 <HAL_RCC_OscConfig+0x820>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a12      	ldr	r2, [pc, #72]	@ (8005da0 <HAL_RCC_OscConfig+0x820>)
 8005d58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5e:	f7fe fb03 	bl	8004368 <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d64:	e008      	b.n	8005d78 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d66:	f7fe faff 	bl	8004368 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e00f      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d78:	4b09      	ldr	r3, [pc, #36]	@ (8005da0 <HAL_RCC_OscConfig+0x820>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1f0      	bne.n	8005d66 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005d84:	4b06      	ldr	r3, [pc, #24]	@ (8005da0 <HAL_RCC_OscConfig+0x820>)
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	4905      	ldr	r1, [pc, #20]	@ (8005da0 <HAL_RCC_OscConfig+0x820>)
 8005d8a:	4b06      	ldr	r3, [pc, #24]	@ (8005da4 <HAL_RCC_OscConfig+0x824>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	60cb      	str	r3, [r1, #12]
 8005d90:	e001      	b.n	8005d96 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3720      	adds	r7, #32
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40021000 	.word	0x40021000
 8005da4:	feeefffc 	.word	0xfeeefffc

08005da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e0e7      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dbc:	4b75      	ldr	r3, [pc, #468]	@ (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d910      	bls.n	8005dec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dca:	4b72      	ldr	r3, [pc, #456]	@ (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f023 0207 	bic.w	r2, r3, #7
 8005dd2:	4970      	ldr	r1, [pc, #448]	@ (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dda:	4b6e      	ldr	r3, [pc, #440]	@ (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d001      	beq.n	8005dec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0cf      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d010      	beq.n	8005e1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	4b66      	ldr	r3, [pc, #408]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d908      	bls.n	8005e1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e08:	4b63      	ldr	r3, [pc, #396]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	4960      	ldr	r1, [pc, #384]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d04c      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d107      	bne.n	8005e3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e2e:	4b5a      	ldr	r3, [pc, #360]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d121      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e0a6      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d107      	bne.n	8005e56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e46:	4b54      	ldr	r3, [pc, #336]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d115      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e09a      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d107      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e5e:	4b4e      	ldr	r3, [pc, #312]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e08e      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e086      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e7e:	4b46      	ldr	r3, [pc, #280]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f023 0203 	bic.w	r2, r3, #3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	4943      	ldr	r1, [pc, #268]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e90:	f7fe fa6a 	bl	8004368 <HAL_GetTick>
 8005e94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e96:	e00a      	b.n	8005eae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e98:	f7fe fa66 	bl	8004368 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e06e      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eae:	4b3a      	ldr	r3, [pc, #232]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 020c 	and.w	r2, r3, #12
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d1eb      	bne.n	8005e98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d010      	beq.n	8005eee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	4b31      	ldr	r3, [pc, #196]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d208      	bcs.n	8005eee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005edc:	4b2e      	ldr	r3, [pc, #184]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	492b      	ldr	r1, [pc, #172]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005eee:	4b29      	ldr	r3, [pc, #164]	@ (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d210      	bcs.n	8005f1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efc:	4b25      	ldr	r3, [pc, #148]	@ (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f023 0207 	bic.w	r2, r3, #7
 8005f04:	4923      	ldr	r1, [pc, #140]	@ (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f0c:	4b21      	ldr	r3, [pc, #132]	@ (8005f94 <HAL_RCC_ClockConfig+0x1ec>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d001      	beq.n	8005f1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e036      	b.n	8005f8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0304 	and.w	r3, r3, #4
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d008      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	4918      	ldr	r1, [pc, #96]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d009      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f48:	4b13      	ldr	r3, [pc, #76]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	4910      	ldr	r1, [pc, #64]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f5c:	f000 f824 	bl	8005fa8 <HAL_RCC_GetSysClockFreq>
 8005f60:	4602      	mov	r2, r0
 8005f62:	4b0d      	ldr	r3, [pc, #52]	@ (8005f98 <HAL_RCC_ClockConfig+0x1f0>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	091b      	lsrs	r3, r3, #4
 8005f68:	f003 030f 	and.w	r3, r3, #15
 8005f6c:	490b      	ldr	r1, [pc, #44]	@ (8005f9c <HAL_RCC_ClockConfig+0x1f4>)
 8005f6e:	5ccb      	ldrb	r3, [r1, r3]
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	fa22 f303 	lsr.w	r3, r2, r3
 8005f78:	4a09      	ldr	r2, [pc, #36]	@ (8005fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8005f7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f7c:	4b09      	ldr	r3, [pc, #36]	@ (8005fa4 <HAL_RCC_ClockConfig+0x1fc>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe f9a1 	bl	80042c8 <HAL_InitTick>
 8005f86:	4603      	mov	r3, r0
 8005f88:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f8a:	7afb      	ldrb	r3, [r7, #11]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40022000 	.word	0x40022000
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	08009fa0 	.word	0x08009fa0
 8005fa0:	20000004 	.word	0x20000004
 8005fa4:	20000008 	.word	0x20000008

08005fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b089      	sub	sp, #36	@ 0x24
 8005fac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	61fb      	str	r3, [r7, #28]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 030c 	and.w	r3, r3, #12
 8005fbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0303 	and.w	r3, r3, #3
 8005fc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_RCC_GetSysClockFreq+0x34>
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	2b0c      	cmp	r3, #12
 8005fd4:	d121      	bne.n	800601a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d11e      	bne.n	800601a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005fdc:	4b34      	ldr	r3, [pc, #208]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d107      	bne.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005fe8:	4b31      	ldr	r3, [pc, #196]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fee:	0a1b      	lsrs	r3, r3, #8
 8005ff0:	f003 030f 	and.w	r3, r3, #15
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	e005      	b.n	8006004 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	091b      	lsrs	r3, r3, #4
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006004:	4a2b      	ldr	r2, [pc, #172]	@ (80060b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10d      	bne.n	8006030 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006018:	e00a      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b04      	cmp	r3, #4
 800601e:	d102      	bne.n	8006026 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006020:	4b25      	ldr	r3, [pc, #148]	@ (80060b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	e004      	b.n	8006030 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	2b08      	cmp	r3, #8
 800602a:	d101      	bne.n	8006030 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800602c:	4b23      	ldr	r3, [pc, #140]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x114>)
 800602e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	2b0c      	cmp	r3, #12
 8006034:	d134      	bne.n	80060a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006036:	4b1e      	ldr	r3, [pc, #120]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b02      	cmp	r3, #2
 8006044:	d003      	beq.n	800604e <HAL_RCC_GetSysClockFreq+0xa6>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	2b03      	cmp	r3, #3
 800604a:	d003      	beq.n	8006054 <HAL_RCC_GetSysClockFreq+0xac>
 800604c:	e005      	b.n	800605a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800604e:	4b1a      	ldr	r3, [pc, #104]	@ (80060b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006050:	617b      	str	r3, [r7, #20]
      break;
 8006052:	e005      	b.n	8006060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006054:	4b19      	ldr	r3, [pc, #100]	@ (80060bc <HAL_RCC_GetSysClockFreq+0x114>)
 8006056:	617b      	str	r3, [r7, #20]
      break;
 8006058:	e002      	b.n	8006060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	617b      	str	r3, [r7, #20]
      break;
 800605e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006060:	4b13      	ldr	r3, [pc, #76]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	091b      	lsrs	r3, r3, #4
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	3301      	adds	r3, #1
 800606c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800606e:	4b10      	ldr	r3, [pc, #64]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	0a1b      	lsrs	r3, r3, #8
 8006074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	fb03 f202 	mul.w	r2, r3, r2
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	fbb2 f3f3 	udiv	r3, r2, r3
 8006084:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006086:	4b0a      	ldr	r3, [pc, #40]	@ (80060b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	0e5b      	lsrs	r3, r3, #25
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	3301      	adds	r3, #1
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	fbb2 f3f3 	udiv	r3, r2, r3
 800609e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80060a0:	69bb      	ldr	r3, [r7, #24]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3724      	adds	r7, #36	@ 0x24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40021000 	.word	0x40021000
 80060b4:	08009fb0 	.word	0x08009fb0
 80060b8:	00f42400 	.word	0x00f42400
 80060bc:	007a1200 	.word	0x007a1200

080060c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80060c8:	2300      	movs	r3, #0
 80060ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80060cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060d8:	f7ff f9ee 	bl	80054b8 <HAL_PWREx_GetVoltageRange>
 80060dc:	6178      	str	r0, [r7, #20]
 80060de:	e014      	b.n	800610a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060e0:	4b25      	ldr	r3, [pc, #148]	@ (8006178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e4:	4a24      	ldr	r2, [pc, #144]	@ (8006178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80060ec:	4b22      	ldr	r3, [pc, #136]	@ (8006178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060f8:	f7ff f9de 	bl	80054b8 <HAL_PWREx_GetVoltageRange>
 80060fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006102:	4a1d      	ldr	r2, [pc, #116]	@ (8006178 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006104:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006108:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006110:	d10b      	bne.n	800612a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b80      	cmp	r3, #128	@ 0x80
 8006116:	d919      	bls.n	800614c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2ba0      	cmp	r3, #160	@ 0xa0
 800611c:	d902      	bls.n	8006124 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800611e:	2302      	movs	r3, #2
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	e013      	b.n	800614c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006124:	2301      	movs	r3, #1
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	e010      	b.n	800614c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b80      	cmp	r3, #128	@ 0x80
 800612e:	d902      	bls.n	8006136 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006130:	2303      	movs	r3, #3
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	e00a      	b.n	800614c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b80      	cmp	r3, #128	@ 0x80
 800613a:	d102      	bne.n	8006142 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800613c:	2302      	movs	r3, #2
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	e004      	b.n	800614c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b70      	cmp	r3, #112	@ 0x70
 8006146:	d101      	bne.n	800614c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006148:	2301      	movs	r3, #1
 800614a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800614c:	4b0b      	ldr	r3, [pc, #44]	@ (800617c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f023 0207 	bic.w	r2, r3, #7
 8006154:	4909      	ldr	r1, [pc, #36]	@ (800617c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800615c:	4b07      	ldr	r3, [pc, #28]	@ (800617c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	429a      	cmp	r2, r3
 8006168:	d001      	beq.n	800616e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40021000 	.word	0x40021000
 800617c:	40022000 	.word	0x40022000

08006180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006188:	2300      	movs	r3, #0
 800618a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800618c:	2300      	movs	r3, #0
 800618e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006198:	2b00      	cmp	r3, #0
 800619a:	d031      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061a4:	d01a      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80061a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80061aa:	d814      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d009      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061b4:	d10f      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80061b6:	4b5d      	ldr	r3, [pc, #372]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	4a5c      	ldr	r2, [pc, #368]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061c2:	e00c      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3304      	adds	r3, #4
 80061c8:	2100      	movs	r1, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 f9de 	bl	800658c <RCCEx_PLLSAI1_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061d4:	e003      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	74fb      	strb	r3, [r7, #19]
      break;
 80061da:	e000      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80061dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061de:	7cfb      	ldrb	r3, [r7, #19]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10b      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061e4:	4b51      	ldr	r3, [pc, #324]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f2:	494e      	ldr	r1, [pc, #312]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80061fa:	e001      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fc:	7cfb      	ldrb	r3, [r7, #19]
 80061fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 809e 	beq.w	800634a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800620e:	2300      	movs	r3, #0
 8006210:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006212:	4b46      	ldr	r3, [pc, #280]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006222:	2300      	movs	r3, #0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00d      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006228:	4b40      	ldr	r3, [pc, #256]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800622a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622c:	4a3f      	ldr	r2, [pc, #252]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800622e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006232:	6593      	str	r3, [r2, #88]	@ 0x58
 8006234:	4b3d      	ldr	r3, [pc, #244]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800623c:	60bb      	str	r3, [r7, #8]
 800623e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006240:	2301      	movs	r3, #1
 8006242:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006244:	4b3a      	ldr	r3, [pc, #232]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a39      	ldr	r2, [pc, #228]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800624a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800624e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006250:	f7fe f88a 	bl	8004368 <HAL_GetTick>
 8006254:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006256:	e009      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006258:	f7fe f886 	bl	8004368 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d902      	bls.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	74fb      	strb	r3, [r7, #19]
        break;
 800626a:	e005      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800626c:	4b30      	ldr	r3, [pc, #192]	@ (8006330 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0ef      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006278:	7cfb      	ldrb	r3, [r7, #19]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d15a      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800627e:	4b2b      	ldr	r3, [pc, #172]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006284:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006288:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01e      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	429a      	cmp	r2, r3
 8006298:	d019      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800629a:	4b24      	ldr	r3, [pc, #144]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800629c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062a6:	4b21      	ldr	r3, [pc, #132]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ac:	4a1f      	ldr	r2, [pc, #124]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062b6:	4b1d      	ldr	r3, [pc, #116]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062bc:	4a1b      	ldr	r2, [pc, #108]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062c6:	4a19      	ldr	r2, [pc, #100]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d016      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d8:	f7fe f846 	bl	8004368 <HAL_GetTick>
 80062dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062de:	e00b      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e0:	f7fe f842 	bl	8004368 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d902      	bls.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	74fb      	strb	r3, [r7, #19]
            break;
 80062f6:	e006      	b.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f8:	4b0c      	ldr	r3, [pc, #48]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0ec      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006306:	7cfb      	ldrb	r3, [r7, #19]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10b      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800630c:	4b07      	ldr	r3, [pc, #28]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800630e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006312:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800631a:	4904      	ldr	r1, [pc, #16]	@ (800632c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800631c:	4313      	orrs	r3, r2
 800631e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006322:	e009      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006324:	7cfb      	ldrb	r3, [r7, #19]
 8006326:	74bb      	strb	r3, [r7, #18]
 8006328:	e006      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800632a:	bf00      	nop
 800632c:	40021000 	.word	0x40021000
 8006330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006334:	7cfb      	ldrb	r3, [r7, #19]
 8006336:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006338:	7c7b      	ldrb	r3, [r7, #17]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d105      	bne.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800633e:	4b8a      	ldr	r3, [pc, #552]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006342:	4a89      	ldr	r2, [pc, #548]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006344:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006348:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006356:	4b84      	ldr	r3, [pc, #528]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800635c:	f023 0203 	bic.w	r2, r3, #3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	4980      	ldr	r1, [pc, #512]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00a      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006378:	4b7b      	ldr	r3, [pc, #492]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637e:	f023 020c 	bic.w	r2, r3, #12
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006386:	4978      	ldr	r1, [pc, #480]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800639a:	4b73      	ldr	r3, [pc, #460]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a8:	496f      	ldr	r1, [pc, #444]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80063bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ca:	4967      	ldr	r1, [pc, #412]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063de:	4b62      	ldr	r3, [pc, #392]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	495e      	ldr	r1, [pc, #376]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00a      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006400:	4b59      	ldr	r3, [pc, #356]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006406:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640e:	4956      	ldr	r1, [pc, #344]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006422:	4b51      	ldr	r3, [pc, #324]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006428:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006430:	494d      	ldr	r1, [pc, #308]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d028      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006444:	4b48      	ldr	r3, [pc, #288]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800644a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006452:	4945      	ldr	r1, [pc, #276]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006462:	d106      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006464:	4b40      	ldr	r3, [pc, #256]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	4a3f      	ldr	r2, [pc, #252]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800646a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800646e:	60d3      	str	r3, [r2, #12]
 8006470:	e011      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006476:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800647a:	d10c      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3304      	adds	r3, #4
 8006480:	2101      	movs	r1, #1
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f882 	bl	800658c <RCCEx_PLLSAI1_Config>
 8006488:	4603      	mov	r3, r0
 800648a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800648c:	7cfb      	ldrb	r3, [r7, #19]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006492:	7cfb      	ldrb	r3, [r7, #19]
 8006494:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d028      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064a2:	4b31      	ldr	r3, [pc, #196]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b0:	492d      	ldr	r1, [pc, #180]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064c0:	d106      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064c2:	4b29      	ldr	r3, [pc, #164]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	4a28      	ldr	r2, [pc, #160]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064cc:	60d3      	str	r3, [r2, #12]
 80064ce:	e011      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064d8:	d10c      	bne.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3304      	adds	r3, #4
 80064de:	2101      	movs	r1, #1
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 f853 	bl	800658c <RCCEx_PLLSAI1_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064ea:	7cfb      	ldrb	r3, [r7, #19]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80064f0:	7cfb      	ldrb	r3, [r7, #19]
 80064f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01c      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006500:	4b19      	ldr	r3, [pc, #100]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006506:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800650e:	4916      	ldr	r1, [pc, #88]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006510:	4313      	orrs	r3, r2
 8006512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800651a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800651e:	d10c      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3304      	adds	r3, #4
 8006524:	2102      	movs	r1, #2
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f830 	bl	800658c <RCCEx_PLLSAI1_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006530:	7cfb      	ldrb	r3, [r7, #19]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006536:	7cfb      	ldrb	r3, [r7, #19]
 8006538:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006546:	4b08      	ldr	r3, [pc, #32]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006554:	4904      	ldr	r1, [pc, #16]	@ (8006568 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800655c:	7cbb      	ldrb	r3, [r7, #18]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	40021000 	.word	0x40021000

0800656c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006570:	4b05      	ldr	r3, [pc, #20]	@ (8006588 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a04      	ldr	r2, [pc, #16]	@ (8006588 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006576:	f043 0304 	orr.w	r3, r3, #4
 800657a:	6013      	str	r3, [r2, #0]
}
 800657c:	bf00      	nop
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40021000 	.word	0x40021000

0800658c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800659a:	4b74      	ldr	r3, [pc, #464]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d018      	beq.n	80065d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80065a6:	4b71      	ldr	r3, [pc, #452]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f003 0203 	and.w	r2, r3, #3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d10d      	bne.n	80065d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
       ||
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80065be:	4b6b      	ldr	r3, [pc, #428]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	091b      	lsrs	r3, r3, #4
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
       ||
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d047      	beq.n	8006662 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	73fb      	strb	r3, [r7, #15]
 80065d6:	e044      	b.n	8006662 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d018      	beq.n	8006612 <RCCEx_PLLSAI1_Config+0x86>
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d825      	bhi.n	8006630 <RCCEx_PLLSAI1_Config+0xa4>
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d002      	beq.n	80065ee <RCCEx_PLLSAI1_Config+0x62>
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d009      	beq.n	8006600 <RCCEx_PLLSAI1_Config+0x74>
 80065ec:	e020      	b.n	8006630 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065ee:	4b5f      	ldr	r3, [pc, #380]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d11d      	bne.n	8006636 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065fe:	e01a      	b.n	8006636 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006600:	4b5a      	ldr	r3, [pc, #360]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006608:	2b00      	cmp	r3, #0
 800660a:	d116      	bne.n	800663a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006610:	e013      	b.n	800663a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006612:	4b56      	ldr	r3, [pc, #344]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10f      	bne.n	800663e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800661e:	4b53      	ldr	r3, [pc, #332]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800662e:	e006      	b.n	800663e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	73fb      	strb	r3, [r7, #15]
      break;
 8006634:	e004      	b.n	8006640 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006636:	bf00      	nop
 8006638:	e002      	b.n	8006640 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800663a:	bf00      	nop
 800663c:	e000      	b.n	8006640 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800663e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10d      	bne.n	8006662 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006646:	4b49      	ldr	r3, [pc, #292]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6819      	ldr	r1, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	3b01      	subs	r3, #1
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	430b      	orrs	r3, r1
 800665c:	4943      	ldr	r1, [pc, #268]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 800665e:	4313      	orrs	r3, r2
 8006660:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d17c      	bne.n	8006762 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006668:	4b40      	ldr	r3, [pc, #256]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a3f      	ldr	r2, [pc, #252]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 800666e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006674:	f7fd fe78 	bl	8004368 <HAL_GetTick>
 8006678:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800667a:	e009      	b.n	8006690 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800667c:	f7fd fe74 	bl	8004368 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d902      	bls.n	8006690 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	73fb      	strb	r3, [r7, #15]
        break;
 800668e:	e005      	b.n	800669c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006690:	4b36      	ldr	r3, [pc, #216]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1ef      	bne.n	800667c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d15f      	bne.n	8006762 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d110      	bne.n	80066ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066a8:	4b30      	ldr	r3, [pc, #192]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80066b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6892      	ldr	r2, [r2, #8]
 80066b8:	0211      	lsls	r1, r2, #8
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	68d2      	ldr	r2, [r2, #12]
 80066be:	06d2      	lsls	r2, r2, #27
 80066c0:	430a      	orrs	r2, r1
 80066c2:	492a      	ldr	r1, [pc, #168]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	610b      	str	r3, [r1, #16]
 80066c8:	e027      	b.n	800671a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d112      	bne.n	80066f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066d0:	4b26      	ldr	r3, [pc, #152]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80066d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6892      	ldr	r2, [r2, #8]
 80066e0:	0211      	lsls	r1, r2, #8
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6912      	ldr	r2, [r2, #16]
 80066e6:	0852      	lsrs	r2, r2, #1
 80066e8:	3a01      	subs	r2, #1
 80066ea:	0552      	lsls	r2, r2, #21
 80066ec:	430a      	orrs	r2, r1
 80066ee:	491f      	ldr	r1, [pc, #124]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	610b      	str	r3, [r1, #16]
 80066f4:	e011      	b.n	800671a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066f6:	4b1d      	ldr	r3, [pc, #116]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80066fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	6892      	ldr	r2, [r2, #8]
 8006706:	0211      	lsls	r1, r2, #8
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6952      	ldr	r2, [r2, #20]
 800670c:	0852      	lsrs	r2, r2, #1
 800670e:	3a01      	subs	r2, #1
 8006710:	0652      	lsls	r2, r2, #25
 8006712:	430a      	orrs	r2, r1
 8006714:	4915      	ldr	r1, [pc, #84]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006716:	4313      	orrs	r3, r2
 8006718:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800671a:	4b14      	ldr	r3, [pc, #80]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a13      	ldr	r2, [pc, #76]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006720:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006724:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006726:	f7fd fe1f 	bl	8004368 <HAL_GetTick>
 800672a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800672c:	e009      	b.n	8006742 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800672e:	f7fd fe1b 	bl	8004368 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d902      	bls.n	8006742 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	73fb      	strb	r3, [r7, #15]
          break;
 8006740:	e005      	b.n	800674e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006742:	4b0a      	ldr	r3, [pc, #40]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0ef      	beq.n	800672e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d106      	bne.n	8006762 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006754:	4b05      	ldr	r3, [pc, #20]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006756:	691a      	ldr	r2, [r3, #16]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	4903      	ldr	r1, [pc, #12]	@ (800676c <RCCEx_PLLSAI1_Config+0x1e0>)
 800675e:	4313      	orrs	r3, r2
 8006760:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006762:	7bfb      	ldrb	r3, [r7, #15]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40021000 	.word	0x40021000

08006770 <__cvt>:
 8006770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006774:	ec57 6b10 	vmov	r6, r7, d0
 8006778:	2f00      	cmp	r7, #0
 800677a:	460c      	mov	r4, r1
 800677c:	4619      	mov	r1, r3
 800677e:	463b      	mov	r3, r7
 8006780:	bfbb      	ittet	lt
 8006782:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006786:	461f      	movlt	r7, r3
 8006788:	2300      	movge	r3, #0
 800678a:	232d      	movlt	r3, #45	@ 0x2d
 800678c:	700b      	strb	r3, [r1, #0]
 800678e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006790:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006794:	4691      	mov	r9, r2
 8006796:	f023 0820 	bic.w	r8, r3, #32
 800679a:	bfbc      	itt	lt
 800679c:	4632      	movlt	r2, r6
 800679e:	4616      	movlt	r6, r2
 80067a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067a4:	d005      	beq.n	80067b2 <__cvt+0x42>
 80067a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80067aa:	d100      	bne.n	80067ae <__cvt+0x3e>
 80067ac:	3401      	adds	r4, #1
 80067ae:	2102      	movs	r1, #2
 80067b0:	e000      	b.n	80067b4 <__cvt+0x44>
 80067b2:	2103      	movs	r1, #3
 80067b4:	ab03      	add	r3, sp, #12
 80067b6:	9301      	str	r3, [sp, #4]
 80067b8:	ab02      	add	r3, sp, #8
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	ec47 6b10 	vmov	d0, r6, r7
 80067c0:	4653      	mov	r3, sl
 80067c2:	4622      	mov	r2, r4
 80067c4:	f000 fdb0 	bl	8007328 <_dtoa_r>
 80067c8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80067cc:	4605      	mov	r5, r0
 80067ce:	d119      	bne.n	8006804 <__cvt+0x94>
 80067d0:	f019 0f01 	tst.w	r9, #1
 80067d4:	d00e      	beq.n	80067f4 <__cvt+0x84>
 80067d6:	eb00 0904 	add.w	r9, r0, r4
 80067da:	2200      	movs	r2, #0
 80067dc:	2300      	movs	r3, #0
 80067de:	4630      	mov	r0, r6
 80067e0:	4639      	mov	r1, r7
 80067e2:	f7fa f971 	bl	8000ac8 <__aeabi_dcmpeq>
 80067e6:	b108      	cbz	r0, 80067ec <__cvt+0x7c>
 80067e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80067ec:	2230      	movs	r2, #48	@ 0x30
 80067ee:	9b03      	ldr	r3, [sp, #12]
 80067f0:	454b      	cmp	r3, r9
 80067f2:	d31e      	bcc.n	8006832 <__cvt+0xc2>
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067f8:	1b5b      	subs	r3, r3, r5
 80067fa:	4628      	mov	r0, r5
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	b004      	add	sp, #16
 8006800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006804:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006808:	eb00 0904 	add.w	r9, r0, r4
 800680c:	d1e5      	bne.n	80067da <__cvt+0x6a>
 800680e:	7803      	ldrb	r3, [r0, #0]
 8006810:	2b30      	cmp	r3, #48	@ 0x30
 8006812:	d10a      	bne.n	800682a <__cvt+0xba>
 8006814:	2200      	movs	r2, #0
 8006816:	2300      	movs	r3, #0
 8006818:	4630      	mov	r0, r6
 800681a:	4639      	mov	r1, r7
 800681c:	f7fa f954 	bl	8000ac8 <__aeabi_dcmpeq>
 8006820:	b918      	cbnz	r0, 800682a <__cvt+0xba>
 8006822:	f1c4 0401 	rsb	r4, r4, #1
 8006826:	f8ca 4000 	str.w	r4, [sl]
 800682a:	f8da 3000 	ldr.w	r3, [sl]
 800682e:	4499      	add	r9, r3
 8006830:	e7d3      	b.n	80067da <__cvt+0x6a>
 8006832:	1c59      	adds	r1, r3, #1
 8006834:	9103      	str	r1, [sp, #12]
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	e7d9      	b.n	80067ee <__cvt+0x7e>

0800683a <__exponent>:
 800683a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800683c:	2900      	cmp	r1, #0
 800683e:	bfba      	itte	lt
 8006840:	4249      	neglt	r1, r1
 8006842:	232d      	movlt	r3, #45	@ 0x2d
 8006844:	232b      	movge	r3, #43	@ 0x2b
 8006846:	2909      	cmp	r1, #9
 8006848:	7002      	strb	r2, [r0, #0]
 800684a:	7043      	strb	r3, [r0, #1]
 800684c:	dd29      	ble.n	80068a2 <__exponent+0x68>
 800684e:	f10d 0307 	add.w	r3, sp, #7
 8006852:	461d      	mov	r5, r3
 8006854:	270a      	movs	r7, #10
 8006856:	461a      	mov	r2, r3
 8006858:	fbb1 f6f7 	udiv	r6, r1, r7
 800685c:	fb07 1416 	mls	r4, r7, r6, r1
 8006860:	3430      	adds	r4, #48	@ 0x30
 8006862:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006866:	460c      	mov	r4, r1
 8006868:	2c63      	cmp	r4, #99	@ 0x63
 800686a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800686e:	4631      	mov	r1, r6
 8006870:	dcf1      	bgt.n	8006856 <__exponent+0x1c>
 8006872:	3130      	adds	r1, #48	@ 0x30
 8006874:	1e94      	subs	r4, r2, #2
 8006876:	f803 1c01 	strb.w	r1, [r3, #-1]
 800687a:	1c41      	adds	r1, r0, #1
 800687c:	4623      	mov	r3, r4
 800687e:	42ab      	cmp	r3, r5
 8006880:	d30a      	bcc.n	8006898 <__exponent+0x5e>
 8006882:	f10d 0309 	add.w	r3, sp, #9
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	42ac      	cmp	r4, r5
 800688a:	bf88      	it	hi
 800688c:	2300      	movhi	r3, #0
 800688e:	3302      	adds	r3, #2
 8006890:	4403      	add	r3, r0
 8006892:	1a18      	subs	r0, r3, r0
 8006894:	b003      	add	sp, #12
 8006896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006898:	f813 6b01 	ldrb.w	r6, [r3], #1
 800689c:	f801 6f01 	strb.w	r6, [r1, #1]!
 80068a0:	e7ed      	b.n	800687e <__exponent+0x44>
 80068a2:	2330      	movs	r3, #48	@ 0x30
 80068a4:	3130      	adds	r1, #48	@ 0x30
 80068a6:	7083      	strb	r3, [r0, #2]
 80068a8:	70c1      	strb	r1, [r0, #3]
 80068aa:	1d03      	adds	r3, r0, #4
 80068ac:	e7f1      	b.n	8006892 <__exponent+0x58>
	...

080068b0 <_printf_float>:
 80068b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	b08d      	sub	sp, #52	@ 0x34
 80068b6:	460c      	mov	r4, r1
 80068b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80068bc:	4616      	mov	r6, r2
 80068be:	461f      	mov	r7, r3
 80068c0:	4605      	mov	r5, r0
 80068c2:	f000 fca3 	bl	800720c <_localeconv_r>
 80068c6:	6803      	ldr	r3, [r0, #0]
 80068c8:	9304      	str	r3, [sp, #16]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7f9 fcd0 	bl	8000270 <strlen>
 80068d0:	2300      	movs	r3, #0
 80068d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80068d4:	f8d8 3000 	ldr.w	r3, [r8]
 80068d8:	9005      	str	r0, [sp, #20]
 80068da:	3307      	adds	r3, #7
 80068dc:	f023 0307 	bic.w	r3, r3, #7
 80068e0:	f103 0208 	add.w	r2, r3, #8
 80068e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80068e8:	f8d4 b000 	ldr.w	fp, [r4]
 80068ec:	f8c8 2000 	str.w	r2, [r8]
 80068f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80068f8:	9307      	str	r3, [sp, #28]
 80068fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80068fe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006902:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006906:	4b9c      	ldr	r3, [pc, #624]	@ (8006b78 <_printf_float+0x2c8>)
 8006908:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800690c:	f7fa f90e 	bl	8000b2c <__aeabi_dcmpun>
 8006910:	bb70      	cbnz	r0, 8006970 <_printf_float+0xc0>
 8006912:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006916:	4b98      	ldr	r3, [pc, #608]	@ (8006b78 <_printf_float+0x2c8>)
 8006918:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800691c:	f7fa f8e8 	bl	8000af0 <__aeabi_dcmple>
 8006920:	bb30      	cbnz	r0, 8006970 <_printf_float+0xc0>
 8006922:	2200      	movs	r2, #0
 8006924:	2300      	movs	r3, #0
 8006926:	4640      	mov	r0, r8
 8006928:	4649      	mov	r1, r9
 800692a:	f7fa f8d7 	bl	8000adc <__aeabi_dcmplt>
 800692e:	b110      	cbz	r0, 8006936 <_printf_float+0x86>
 8006930:	232d      	movs	r3, #45	@ 0x2d
 8006932:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006936:	4a91      	ldr	r2, [pc, #580]	@ (8006b7c <_printf_float+0x2cc>)
 8006938:	4b91      	ldr	r3, [pc, #580]	@ (8006b80 <_printf_float+0x2d0>)
 800693a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800693e:	bf8c      	ite	hi
 8006940:	4690      	movhi	r8, r2
 8006942:	4698      	movls	r8, r3
 8006944:	2303      	movs	r3, #3
 8006946:	6123      	str	r3, [r4, #16]
 8006948:	f02b 0304 	bic.w	r3, fp, #4
 800694c:	6023      	str	r3, [r4, #0]
 800694e:	f04f 0900 	mov.w	r9, #0
 8006952:	9700      	str	r7, [sp, #0]
 8006954:	4633      	mov	r3, r6
 8006956:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006958:	4621      	mov	r1, r4
 800695a:	4628      	mov	r0, r5
 800695c:	f000 f9d2 	bl	8006d04 <_printf_common>
 8006960:	3001      	adds	r0, #1
 8006962:	f040 808d 	bne.w	8006a80 <_printf_float+0x1d0>
 8006966:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800696a:	b00d      	add	sp, #52	@ 0x34
 800696c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006970:	4642      	mov	r2, r8
 8006972:	464b      	mov	r3, r9
 8006974:	4640      	mov	r0, r8
 8006976:	4649      	mov	r1, r9
 8006978:	f7fa f8d8 	bl	8000b2c <__aeabi_dcmpun>
 800697c:	b140      	cbz	r0, 8006990 <_printf_float+0xe0>
 800697e:	464b      	mov	r3, r9
 8006980:	2b00      	cmp	r3, #0
 8006982:	bfbc      	itt	lt
 8006984:	232d      	movlt	r3, #45	@ 0x2d
 8006986:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800698a:	4a7e      	ldr	r2, [pc, #504]	@ (8006b84 <_printf_float+0x2d4>)
 800698c:	4b7e      	ldr	r3, [pc, #504]	@ (8006b88 <_printf_float+0x2d8>)
 800698e:	e7d4      	b.n	800693a <_printf_float+0x8a>
 8006990:	6863      	ldr	r3, [r4, #4]
 8006992:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006996:	9206      	str	r2, [sp, #24]
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	d13b      	bne.n	8006a14 <_printf_float+0x164>
 800699c:	2306      	movs	r3, #6
 800699e:	6063      	str	r3, [r4, #4]
 80069a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80069a4:	2300      	movs	r3, #0
 80069a6:	6022      	str	r2, [r4, #0]
 80069a8:	9303      	str	r3, [sp, #12]
 80069aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80069ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 80069b0:	ab09      	add	r3, sp, #36	@ 0x24
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	6861      	ldr	r1, [r4, #4]
 80069b6:	ec49 8b10 	vmov	d0, r8, r9
 80069ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80069be:	4628      	mov	r0, r5
 80069c0:	f7ff fed6 	bl	8006770 <__cvt>
 80069c4:	9b06      	ldr	r3, [sp, #24]
 80069c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069c8:	2b47      	cmp	r3, #71	@ 0x47
 80069ca:	4680      	mov	r8, r0
 80069cc:	d129      	bne.n	8006a22 <_printf_float+0x172>
 80069ce:	1cc8      	adds	r0, r1, #3
 80069d0:	db02      	blt.n	80069d8 <_printf_float+0x128>
 80069d2:	6863      	ldr	r3, [r4, #4]
 80069d4:	4299      	cmp	r1, r3
 80069d6:	dd41      	ble.n	8006a5c <_printf_float+0x1ac>
 80069d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80069dc:	fa5f fa8a 	uxtb.w	sl, sl
 80069e0:	3901      	subs	r1, #1
 80069e2:	4652      	mov	r2, sl
 80069e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80069e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80069ea:	f7ff ff26 	bl	800683a <__exponent>
 80069ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069f0:	1813      	adds	r3, r2, r0
 80069f2:	2a01      	cmp	r2, #1
 80069f4:	4681      	mov	r9, r0
 80069f6:	6123      	str	r3, [r4, #16]
 80069f8:	dc02      	bgt.n	8006a00 <_printf_float+0x150>
 80069fa:	6822      	ldr	r2, [r4, #0]
 80069fc:	07d2      	lsls	r2, r2, #31
 80069fe:	d501      	bpl.n	8006a04 <_printf_float+0x154>
 8006a00:	3301      	adds	r3, #1
 8006a02:	6123      	str	r3, [r4, #16]
 8006a04:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0a2      	beq.n	8006952 <_printf_float+0xa2>
 8006a0c:	232d      	movs	r3, #45	@ 0x2d
 8006a0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a12:	e79e      	b.n	8006952 <_printf_float+0xa2>
 8006a14:	9a06      	ldr	r2, [sp, #24]
 8006a16:	2a47      	cmp	r2, #71	@ 0x47
 8006a18:	d1c2      	bne.n	80069a0 <_printf_float+0xf0>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1c0      	bne.n	80069a0 <_printf_float+0xf0>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e7bd      	b.n	800699e <_printf_float+0xee>
 8006a22:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a26:	d9db      	bls.n	80069e0 <_printf_float+0x130>
 8006a28:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a2c:	d118      	bne.n	8006a60 <_printf_float+0x1b0>
 8006a2e:	2900      	cmp	r1, #0
 8006a30:	6863      	ldr	r3, [r4, #4]
 8006a32:	dd0b      	ble.n	8006a4c <_printf_float+0x19c>
 8006a34:	6121      	str	r1, [r4, #16]
 8006a36:	b913      	cbnz	r3, 8006a3e <_printf_float+0x18e>
 8006a38:	6822      	ldr	r2, [r4, #0]
 8006a3a:	07d0      	lsls	r0, r2, #31
 8006a3c:	d502      	bpl.n	8006a44 <_printf_float+0x194>
 8006a3e:	3301      	adds	r3, #1
 8006a40:	440b      	add	r3, r1
 8006a42:	6123      	str	r3, [r4, #16]
 8006a44:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a46:	f04f 0900 	mov.w	r9, #0
 8006a4a:	e7db      	b.n	8006a04 <_printf_float+0x154>
 8006a4c:	b913      	cbnz	r3, 8006a54 <_printf_float+0x1a4>
 8006a4e:	6822      	ldr	r2, [r4, #0]
 8006a50:	07d2      	lsls	r2, r2, #31
 8006a52:	d501      	bpl.n	8006a58 <_printf_float+0x1a8>
 8006a54:	3302      	adds	r3, #2
 8006a56:	e7f4      	b.n	8006a42 <_printf_float+0x192>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e7f2      	b.n	8006a42 <_printf_float+0x192>
 8006a5c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006a60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a62:	4299      	cmp	r1, r3
 8006a64:	db05      	blt.n	8006a72 <_printf_float+0x1c2>
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	6121      	str	r1, [r4, #16]
 8006a6a:	07d8      	lsls	r0, r3, #31
 8006a6c:	d5ea      	bpl.n	8006a44 <_printf_float+0x194>
 8006a6e:	1c4b      	adds	r3, r1, #1
 8006a70:	e7e7      	b.n	8006a42 <_printf_float+0x192>
 8006a72:	2900      	cmp	r1, #0
 8006a74:	bfd4      	ite	le
 8006a76:	f1c1 0202 	rsble	r2, r1, #2
 8006a7a:	2201      	movgt	r2, #1
 8006a7c:	4413      	add	r3, r2
 8006a7e:	e7e0      	b.n	8006a42 <_printf_float+0x192>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	055a      	lsls	r2, r3, #21
 8006a84:	d407      	bmi.n	8006a96 <_printf_float+0x1e6>
 8006a86:	6923      	ldr	r3, [r4, #16]
 8006a88:	4642      	mov	r2, r8
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	d12b      	bne.n	8006aec <_printf_float+0x23c>
 8006a94:	e767      	b.n	8006966 <_printf_float+0xb6>
 8006a96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a9a:	f240 80dd 	bls.w	8006c58 <_printf_float+0x3a8>
 8006a9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f7fa f80f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	d033      	beq.n	8006b16 <_printf_float+0x266>
 8006aae:	4a37      	ldr	r2, [pc, #220]	@ (8006b8c <_printf_float+0x2dc>)
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	f43f af54 	beq.w	8006966 <_printf_float+0xb6>
 8006abe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006ac2:	4543      	cmp	r3, r8
 8006ac4:	db02      	blt.n	8006acc <_printf_float+0x21c>
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	07d8      	lsls	r0, r3, #31
 8006aca:	d50f      	bpl.n	8006aec <_printf_float+0x23c>
 8006acc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	47b8      	blx	r7
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	f43f af45 	beq.w	8006966 <_printf_float+0xb6>
 8006adc:	f04f 0900 	mov.w	r9, #0
 8006ae0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006ae4:	f104 0a1a 	add.w	sl, r4, #26
 8006ae8:	45c8      	cmp	r8, r9
 8006aea:	dc09      	bgt.n	8006b00 <_printf_float+0x250>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	079b      	lsls	r3, r3, #30
 8006af0:	f100 8103 	bmi.w	8006cfa <_printf_float+0x44a>
 8006af4:	68e0      	ldr	r0, [r4, #12]
 8006af6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006af8:	4298      	cmp	r0, r3
 8006afa:	bfb8      	it	lt
 8006afc:	4618      	movlt	r0, r3
 8006afe:	e734      	b.n	800696a <_printf_float+0xba>
 8006b00:	2301      	movs	r3, #1
 8006b02:	4652      	mov	r2, sl
 8006b04:	4631      	mov	r1, r6
 8006b06:	4628      	mov	r0, r5
 8006b08:	47b8      	blx	r7
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	f43f af2b 	beq.w	8006966 <_printf_float+0xb6>
 8006b10:	f109 0901 	add.w	r9, r9, #1
 8006b14:	e7e8      	b.n	8006ae8 <_printf_float+0x238>
 8006b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	dc39      	bgt.n	8006b90 <_printf_float+0x2e0>
 8006b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8006b8c <_printf_float+0x2dc>)
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4631      	mov	r1, r6
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b8      	blx	r7
 8006b26:	3001      	adds	r0, #1
 8006b28:	f43f af1d 	beq.w	8006966 <_printf_float+0xb6>
 8006b2c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b30:	ea59 0303 	orrs.w	r3, r9, r3
 8006b34:	d102      	bne.n	8006b3c <_printf_float+0x28c>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	07d9      	lsls	r1, r3, #31
 8006b3a:	d5d7      	bpl.n	8006aec <_printf_float+0x23c>
 8006b3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b40:	4631      	mov	r1, r6
 8006b42:	4628      	mov	r0, r5
 8006b44:	47b8      	blx	r7
 8006b46:	3001      	adds	r0, #1
 8006b48:	f43f af0d 	beq.w	8006966 <_printf_float+0xb6>
 8006b4c:	f04f 0a00 	mov.w	sl, #0
 8006b50:	f104 0b1a 	add.w	fp, r4, #26
 8006b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b56:	425b      	negs	r3, r3
 8006b58:	4553      	cmp	r3, sl
 8006b5a:	dc01      	bgt.n	8006b60 <_printf_float+0x2b0>
 8006b5c:	464b      	mov	r3, r9
 8006b5e:	e793      	b.n	8006a88 <_printf_float+0x1d8>
 8006b60:	2301      	movs	r3, #1
 8006b62:	465a      	mov	r2, fp
 8006b64:	4631      	mov	r1, r6
 8006b66:	4628      	mov	r0, r5
 8006b68:	47b8      	blx	r7
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	f43f aefb 	beq.w	8006966 <_printf_float+0xb6>
 8006b70:	f10a 0a01 	add.w	sl, sl, #1
 8006b74:	e7ee      	b.n	8006b54 <_printf_float+0x2a4>
 8006b76:	bf00      	nop
 8006b78:	7fefffff 	.word	0x7fefffff
 8006b7c:	08009fe4 	.word	0x08009fe4
 8006b80:	08009fe0 	.word	0x08009fe0
 8006b84:	08009fec 	.word	0x08009fec
 8006b88:	08009fe8 	.word	0x08009fe8
 8006b8c:	08009ff0 	.word	0x08009ff0
 8006b90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b92:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b96:	4553      	cmp	r3, sl
 8006b98:	bfa8      	it	ge
 8006b9a:	4653      	movge	r3, sl
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	4699      	mov	r9, r3
 8006ba0:	dc36      	bgt.n	8006c10 <_printf_float+0x360>
 8006ba2:	f04f 0b00 	mov.w	fp, #0
 8006ba6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006baa:	f104 021a 	add.w	r2, r4, #26
 8006bae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006bb0:	9306      	str	r3, [sp, #24]
 8006bb2:	eba3 0309 	sub.w	r3, r3, r9
 8006bb6:	455b      	cmp	r3, fp
 8006bb8:	dc31      	bgt.n	8006c1e <_printf_float+0x36e>
 8006bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bbc:	459a      	cmp	sl, r3
 8006bbe:	dc3a      	bgt.n	8006c36 <_printf_float+0x386>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	07da      	lsls	r2, r3, #31
 8006bc4:	d437      	bmi.n	8006c36 <_printf_float+0x386>
 8006bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc8:	ebaa 0903 	sub.w	r9, sl, r3
 8006bcc:	9b06      	ldr	r3, [sp, #24]
 8006bce:	ebaa 0303 	sub.w	r3, sl, r3
 8006bd2:	4599      	cmp	r9, r3
 8006bd4:	bfa8      	it	ge
 8006bd6:	4699      	movge	r9, r3
 8006bd8:	f1b9 0f00 	cmp.w	r9, #0
 8006bdc:	dc33      	bgt.n	8006c46 <_printf_float+0x396>
 8006bde:	f04f 0800 	mov.w	r8, #0
 8006be2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006be6:	f104 0b1a 	add.w	fp, r4, #26
 8006bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bec:	ebaa 0303 	sub.w	r3, sl, r3
 8006bf0:	eba3 0309 	sub.w	r3, r3, r9
 8006bf4:	4543      	cmp	r3, r8
 8006bf6:	f77f af79 	ble.w	8006aec <_printf_float+0x23c>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	465a      	mov	r2, fp
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4628      	mov	r0, r5
 8006c02:	47b8      	blx	r7
 8006c04:	3001      	adds	r0, #1
 8006c06:	f43f aeae 	beq.w	8006966 <_printf_float+0xb6>
 8006c0a:	f108 0801 	add.w	r8, r8, #1
 8006c0e:	e7ec      	b.n	8006bea <_printf_float+0x33a>
 8006c10:	4642      	mov	r2, r8
 8006c12:	4631      	mov	r1, r6
 8006c14:	4628      	mov	r0, r5
 8006c16:	47b8      	blx	r7
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d1c2      	bne.n	8006ba2 <_printf_float+0x2f2>
 8006c1c:	e6a3      	b.n	8006966 <_printf_float+0xb6>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	4631      	mov	r1, r6
 8006c22:	4628      	mov	r0, r5
 8006c24:	9206      	str	r2, [sp, #24]
 8006c26:	47b8      	blx	r7
 8006c28:	3001      	adds	r0, #1
 8006c2a:	f43f ae9c 	beq.w	8006966 <_printf_float+0xb6>
 8006c2e:	9a06      	ldr	r2, [sp, #24]
 8006c30:	f10b 0b01 	add.w	fp, fp, #1
 8006c34:	e7bb      	b.n	8006bae <_printf_float+0x2fe>
 8006c36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b8      	blx	r7
 8006c40:	3001      	adds	r0, #1
 8006c42:	d1c0      	bne.n	8006bc6 <_printf_float+0x316>
 8006c44:	e68f      	b.n	8006966 <_printf_float+0xb6>
 8006c46:	9a06      	ldr	r2, [sp, #24]
 8006c48:	464b      	mov	r3, r9
 8006c4a:	4442      	add	r2, r8
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	4628      	mov	r0, r5
 8006c50:	47b8      	blx	r7
 8006c52:	3001      	adds	r0, #1
 8006c54:	d1c3      	bne.n	8006bde <_printf_float+0x32e>
 8006c56:	e686      	b.n	8006966 <_printf_float+0xb6>
 8006c58:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c5c:	f1ba 0f01 	cmp.w	sl, #1
 8006c60:	dc01      	bgt.n	8006c66 <_printf_float+0x3b6>
 8006c62:	07db      	lsls	r3, r3, #31
 8006c64:	d536      	bpl.n	8006cd4 <_printf_float+0x424>
 8006c66:	2301      	movs	r3, #1
 8006c68:	4642      	mov	r2, r8
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	47b8      	blx	r7
 8006c70:	3001      	adds	r0, #1
 8006c72:	f43f ae78 	beq.w	8006966 <_printf_float+0xb6>
 8006c76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c7a:	4631      	mov	r1, r6
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	47b8      	blx	r7
 8006c80:	3001      	adds	r0, #1
 8006c82:	f43f ae70 	beq.w	8006966 <_printf_float+0xb6>
 8006c86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006c92:	f7f9 ff19 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c96:	b9c0      	cbnz	r0, 8006cca <_printf_float+0x41a>
 8006c98:	4653      	mov	r3, sl
 8006c9a:	f108 0201 	add.w	r2, r8, #1
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	47b8      	blx	r7
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d10c      	bne.n	8006cc2 <_printf_float+0x412>
 8006ca8:	e65d      	b.n	8006966 <_printf_float+0xb6>
 8006caa:	2301      	movs	r3, #1
 8006cac:	465a      	mov	r2, fp
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	f43f ae56 	beq.w	8006966 <_printf_float+0xb6>
 8006cba:	f108 0801 	add.w	r8, r8, #1
 8006cbe:	45d0      	cmp	r8, sl
 8006cc0:	dbf3      	blt.n	8006caa <_printf_float+0x3fa>
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006cc8:	e6df      	b.n	8006a8a <_printf_float+0x1da>
 8006cca:	f04f 0800 	mov.w	r8, #0
 8006cce:	f104 0b1a 	add.w	fp, r4, #26
 8006cd2:	e7f4      	b.n	8006cbe <_printf_float+0x40e>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	4642      	mov	r2, r8
 8006cd8:	e7e1      	b.n	8006c9e <_printf_float+0x3ee>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	464a      	mov	r2, r9
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	47b8      	blx	r7
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	f43f ae3e 	beq.w	8006966 <_printf_float+0xb6>
 8006cea:	f108 0801 	add.w	r8, r8, #1
 8006cee:	68e3      	ldr	r3, [r4, #12]
 8006cf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cf2:	1a5b      	subs	r3, r3, r1
 8006cf4:	4543      	cmp	r3, r8
 8006cf6:	dcf0      	bgt.n	8006cda <_printf_float+0x42a>
 8006cf8:	e6fc      	b.n	8006af4 <_printf_float+0x244>
 8006cfa:	f04f 0800 	mov.w	r8, #0
 8006cfe:	f104 0919 	add.w	r9, r4, #25
 8006d02:	e7f4      	b.n	8006cee <_printf_float+0x43e>

08006d04 <_printf_common>:
 8006d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d08:	4616      	mov	r6, r2
 8006d0a:	4698      	mov	r8, r3
 8006d0c:	688a      	ldr	r2, [r1, #8]
 8006d0e:	690b      	ldr	r3, [r1, #16]
 8006d10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d14:	4293      	cmp	r3, r2
 8006d16:	bfb8      	it	lt
 8006d18:	4613      	movlt	r3, r2
 8006d1a:	6033      	str	r3, [r6, #0]
 8006d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d20:	4607      	mov	r7, r0
 8006d22:	460c      	mov	r4, r1
 8006d24:	b10a      	cbz	r2, 8006d2a <_printf_common+0x26>
 8006d26:	3301      	adds	r3, #1
 8006d28:	6033      	str	r3, [r6, #0]
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	0699      	lsls	r1, r3, #26
 8006d2e:	bf42      	ittt	mi
 8006d30:	6833      	ldrmi	r3, [r6, #0]
 8006d32:	3302      	addmi	r3, #2
 8006d34:	6033      	strmi	r3, [r6, #0]
 8006d36:	6825      	ldr	r5, [r4, #0]
 8006d38:	f015 0506 	ands.w	r5, r5, #6
 8006d3c:	d106      	bne.n	8006d4c <_printf_common+0x48>
 8006d3e:	f104 0a19 	add.w	sl, r4, #25
 8006d42:	68e3      	ldr	r3, [r4, #12]
 8006d44:	6832      	ldr	r2, [r6, #0]
 8006d46:	1a9b      	subs	r3, r3, r2
 8006d48:	42ab      	cmp	r3, r5
 8006d4a:	dc26      	bgt.n	8006d9a <_printf_common+0x96>
 8006d4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d50:	6822      	ldr	r2, [r4, #0]
 8006d52:	3b00      	subs	r3, #0
 8006d54:	bf18      	it	ne
 8006d56:	2301      	movne	r3, #1
 8006d58:	0692      	lsls	r2, r2, #26
 8006d5a:	d42b      	bmi.n	8006db4 <_printf_common+0xb0>
 8006d5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d60:	4641      	mov	r1, r8
 8006d62:	4638      	mov	r0, r7
 8006d64:	47c8      	blx	r9
 8006d66:	3001      	adds	r0, #1
 8006d68:	d01e      	beq.n	8006da8 <_printf_common+0xa4>
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	6922      	ldr	r2, [r4, #16]
 8006d6e:	f003 0306 	and.w	r3, r3, #6
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	bf02      	ittt	eq
 8006d76:	68e5      	ldreq	r5, [r4, #12]
 8006d78:	6833      	ldreq	r3, [r6, #0]
 8006d7a:	1aed      	subeq	r5, r5, r3
 8006d7c:	68a3      	ldr	r3, [r4, #8]
 8006d7e:	bf0c      	ite	eq
 8006d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d84:	2500      	movne	r5, #0
 8006d86:	4293      	cmp	r3, r2
 8006d88:	bfc4      	itt	gt
 8006d8a:	1a9b      	subgt	r3, r3, r2
 8006d8c:	18ed      	addgt	r5, r5, r3
 8006d8e:	2600      	movs	r6, #0
 8006d90:	341a      	adds	r4, #26
 8006d92:	42b5      	cmp	r5, r6
 8006d94:	d11a      	bne.n	8006dcc <_printf_common+0xc8>
 8006d96:	2000      	movs	r0, #0
 8006d98:	e008      	b.n	8006dac <_printf_common+0xa8>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4652      	mov	r2, sl
 8006d9e:	4641      	mov	r1, r8
 8006da0:	4638      	mov	r0, r7
 8006da2:	47c8      	blx	r9
 8006da4:	3001      	adds	r0, #1
 8006da6:	d103      	bne.n	8006db0 <_printf_common+0xac>
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db0:	3501      	adds	r5, #1
 8006db2:	e7c6      	b.n	8006d42 <_printf_common+0x3e>
 8006db4:	18e1      	adds	r1, r4, r3
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	2030      	movs	r0, #48	@ 0x30
 8006dba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006dbe:	4422      	add	r2, r4
 8006dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006dc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006dc8:	3302      	adds	r3, #2
 8006dca:	e7c7      	b.n	8006d5c <_printf_common+0x58>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	4622      	mov	r2, r4
 8006dd0:	4641      	mov	r1, r8
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	47c8      	blx	r9
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	d0e6      	beq.n	8006da8 <_printf_common+0xa4>
 8006dda:	3601      	adds	r6, #1
 8006ddc:	e7d9      	b.n	8006d92 <_printf_common+0x8e>
	...

08006de0 <_printf_i>:
 8006de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006de4:	7e0f      	ldrb	r7, [r1, #24]
 8006de6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006de8:	2f78      	cmp	r7, #120	@ 0x78
 8006dea:	4691      	mov	r9, r2
 8006dec:	4680      	mov	r8, r0
 8006dee:	460c      	mov	r4, r1
 8006df0:	469a      	mov	sl, r3
 8006df2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006df6:	d807      	bhi.n	8006e08 <_printf_i+0x28>
 8006df8:	2f62      	cmp	r7, #98	@ 0x62
 8006dfa:	d80a      	bhi.n	8006e12 <_printf_i+0x32>
 8006dfc:	2f00      	cmp	r7, #0
 8006dfe:	f000 80d1 	beq.w	8006fa4 <_printf_i+0x1c4>
 8006e02:	2f58      	cmp	r7, #88	@ 0x58
 8006e04:	f000 80b8 	beq.w	8006f78 <_printf_i+0x198>
 8006e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e10:	e03a      	b.n	8006e88 <_printf_i+0xa8>
 8006e12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e16:	2b15      	cmp	r3, #21
 8006e18:	d8f6      	bhi.n	8006e08 <_printf_i+0x28>
 8006e1a:	a101      	add	r1, pc, #4	@ (adr r1, 8006e20 <_printf_i+0x40>)
 8006e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e20:	08006e79 	.word	0x08006e79
 8006e24:	08006e8d 	.word	0x08006e8d
 8006e28:	08006e09 	.word	0x08006e09
 8006e2c:	08006e09 	.word	0x08006e09
 8006e30:	08006e09 	.word	0x08006e09
 8006e34:	08006e09 	.word	0x08006e09
 8006e38:	08006e8d 	.word	0x08006e8d
 8006e3c:	08006e09 	.word	0x08006e09
 8006e40:	08006e09 	.word	0x08006e09
 8006e44:	08006e09 	.word	0x08006e09
 8006e48:	08006e09 	.word	0x08006e09
 8006e4c:	08006f8b 	.word	0x08006f8b
 8006e50:	08006eb7 	.word	0x08006eb7
 8006e54:	08006f45 	.word	0x08006f45
 8006e58:	08006e09 	.word	0x08006e09
 8006e5c:	08006e09 	.word	0x08006e09
 8006e60:	08006fad 	.word	0x08006fad
 8006e64:	08006e09 	.word	0x08006e09
 8006e68:	08006eb7 	.word	0x08006eb7
 8006e6c:	08006e09 	.word	0x08006e09
 8006e70:	08006e09 	.word	0x08006e09
 8006e74:	08006f4d 	.word	0x08006f4d
 8006e78:	6833      	ldr	r3, [r6, #0]
 8006e7a:	1d1a      	adds	r2, r3, #4
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6032      	str	r2, [r6, #0]
 8006e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e09c      	b.n	8006fc6 <_printf_i+0x1e6>
 8006e8c:	6833      	ldr	r3, [r6, #0]
 8006e8e:	6820      	ldr	r0, [r4, #0]
 8006e90:	1d19      	adds	r1, r3, #4
 8006e92:	6031      	str	r1, [r6, #0]
 8006e94:	0606      	lsls	r6, r0, #24
 8006e96:	d501      	bpl.n	8006e9c <_printf_i+0xbc>
 8006e98:	681d      	ldr	r5, [r3, #0]
 8006e9a:	e003      	b.n	8006ea4 <_printf_i+0xc4>
 8006e9c:	0645      	lsls	r5, r0, #25
 8006e9e:	d5fb      	bpl.n	8006e98 <_printf_i+0xb8>
 8006ea0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	da03      	bge.n	8006eb0 <_printf_i+0xd0>
 8006ea8:	232d      	movs	r3, #45	@ 0x2d
 8006eaa:	426d      	negs	r5, r5
 8006eac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006eb0:	4858      	ldr	r0, [pc, #352]	@ (8007014 <_printf_i+0x234>)
 8006eb2:	230a      	movs	r3, #10
 8006eb4:	e011      	b.n	8006eda <_printf_i+0xfa>
 8006eb6:	6821      	ldr	r1, [r4, #0]
 8006eb8:	6833      	ldr	r3, [r6, #0]
 8006eba:	0608      	lsls	r0, r1, #24
 8006ebc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ec0:	d402      	bmi.n	8006ec8 <_printf_i+0xe8>
 8006ec2:	0649      	lsls	r1, r1, #25
 8006ec4:	bf48      	it	mi
 8006ec6:	b2ad      	uxthmi	r5, r5
 8006ec8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006eca:	4852      	ldr	r0, [pc, #328]	@ (8007014 <_printf_i+0x234>)
 8006ecc:	6033      	str	r3, [r6, #0]
 8006ece:	bf14      	ite	ne
 8006ed0:	230a      	movne	r3, #10
 8006ed2:	2308      	moveq	r3, #8
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006eda:	6866      	ldr	r6, [r4, #4]
 8006edc:	60a6      	str	r6, [r4, #8]
 8006ede:	2e00      	cmp	r6, #0
 8006ee0:	db05      	blt.n	8006eee <_printf_i+0x10e>
 8006ee2:	6821      	ldr	r1, [r4, #0]
 8006ee4:	432e      	orrs	r6, r5
 8006ee6:	f021 0104 	bic.w	r1, r1, #4
 8006eea:	6021      	str	r1, [r4, #0]
 8006eec:	d04b      	beq.n	8006f86 <_printf_i+0x1a6>
 8006eee:	4616      	mov	r6, r2
 8006ef0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ef4:	fb03 5711 	mls	r7, r3, r1, r5
 8006ef8:	5dc7      	ldrb	r7, [r0, r7]
 8006efa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006efe:	462f      	mov	r7, r5
 8006f00:	42bb      	cmp	r3, r7
 8006f02:	460d      	mov	r5, r1
 8006f04:	d9f4      	bls.n	8006ef0 <_printf_i+0x110>
 8006f06:	2b08      	cmp	r3, #8
 8006f08:	d10b      	bne.n	8006f22 <_printf_i+0x142>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	07df      	lsls	r7, r3, #31
 8006f0e:	d508      	bpl.n	8006f22 <_printf_i+0x142>
 8006f10:	6923      	ldr	r3, [r4, #16]
 8006f12:	6861      	ldr	r1, [r4, #4]
 8006f14:	4299      	cmp	r1, r3
 8006f16:	bfde      	ittt	le
 8006f18:	2330      	movle	r3, #48	@ 0x30
 8006f1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f1e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006f22:	1b92      	subs	r2, r2, r6
 8006f24:	6122      	str	r2, [r4, #16]
 8006f26:	f8cd a000 	str.w	sl, [sp]
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	aa03      	add	r2, sp, #12
 8006f2e:	4621      	mov	r1, r4
 8006f30:	4640      	mov	r0, r8
 8006f32:	f7ff fee7 	bl	8006d04 <_printf_common>
 8006f36:	3001      	adds	r0, #1
 8006f38:	d14a      	bne.n	8006fd0 <_printf_i+0x1f0>
 8006f3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f3e:	b004      	add	sp, #16
 8006f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	f043 0320 	orr.w	r3, r3, #32
 8006f4a:	6023      	str	r3, [r4, #0]
 8006f4c:	4832      	ldr	r0, [pc, #200]	@ (8007018 <_printf_i+0x238>)
 8006f4e:	2778      	movs	r7, #120	@ 0x78
 8006f50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	6831      	ldr	r1, [r6, #0]
 8006f58:	061f      	lsls	r7, r3, #24
 8006f5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f5e:	d402      	bmi.n	8006f66 <_printf_i+0x186>
 8006f60:	065f      	lsls	r7, r3, #25
 8006f62:	bf48      	it	mi
 8006f64:	b2ad      	uxthmi	r5, r5
 8006f66:	6031      	str	r1, [r6, #0]
 8006f68:	07d9      	lsls	r1, r3, #31
 8006f6a:	bf44      	itt	mi
 8006f6c:	f043 0320 	orrmi.w	r3, r3, #32
 8006f70:	6023      	strmi	r3, [r4, #0]
 8006f72:	b11d      	cbz	r5, 8006f7c <_printf_i+0x19c>
 8006f74:	2310      	movs	r3, #16
 8006f76:	e7ad      	b.n	8006ed4 <_printf_i+0xf4>
 8006f78:	4826      	ldr	r0, [pc, #152]	@ (8007014 <_printf_i+0x234>)
 8006f7a:	e7e9      	b.n	8006f50 <_printf_i+0x170>
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	f023 0320 	bic.w	r3, r3, #32
 8006f82:	6023      	str	r3, [r4, #0]
 8006f84:	e7f6      	b.n	8006f74 <_printf_i+0x194>
 8006f86:	4616      	mov	r6, r2
 8006f88:	e7bd      	b.n	8006f06 <_printf_i+0x126>
 8006f8a:	6833      	ldr	r3, [r6, #0]
 8006f8c:	6825      	ldr	r5, [r4, #0]
 8006f8e:	6961      	ldr	r1, [r4, #20]
 8006f90:	1d18      	adds	r0, r3, #4
 8006f92:	6030      	str	r0, [r6, #0]
 8006f94:	062e      	lsls	r6, r5, #24
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	d501      	bpl.n	8006f9e <_printf_i+0x1be>
 8006f9a:	6019      	str	r1, [r3, #0]
 8006f9c:	e002      	b.n	8006fa4 <_printf_i+0x1c4>
 8006f9e:	0668      	lsls	r0, r5, #25
 8006fa0:	d5fb      	bpl.n	8006f9a <_printf_i+0x1ba>
 8006fa2:	8019      	strh	r1, [r3, #0]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	6123      	str	r3, [r4, #16]
 8006fa8:	4616      	mov	r6, r2
 8006faa:	e7bc      	b.n	8006f26 <_printf_i+0x146>
 8006fac:	6833      	ldr	r3, [r6, #0]
 8006fae:	1d1a      	adds	r2, r3, #4
 8006fb0:	6032      	str	r2, [r6, #0]
 8006fb2:	681e      	ldr	r6, [r3, #0]
 8006fb4:	6862      	ldr	r2, [r4, #4]
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f7f9 f909 	bl	80001d0 <memchr>
 8006fbe:	b108      	cbz	r0, 8006fc4 <_printf_i+0x1e4>
 8006fc0:	1b80      	subs	r0, r0, r6
 8006fc2:	6060      	str	r0, [r4, #4]
 8006fc4:	6863      	ldr	r3, [r4, #4]
 8006fc6:	6123      	str	r3, [r4, #16]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fce:	e7aa      	b.n	8006f26 <_printf_i+0x146>
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	4632      	mov	r2, r6
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	47d0      	blx	sl
 8006fda:	3001      	adds	r0, #1
 8006fdc:	d0ad      	beq.n	8006f3a <_printf_i+0x15a>
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	079b      	lsls	r3, r3, #30
 8006fe2:	d413      	bmi.n	800700c <_printf_i+0x22c>
 8006fe4:	68e0      	ldr	r0, [r4, #12]
 8006fe6:	9b03      	ldr	r3, [sp, #12]
 8006fe8:	4298      	cmp	r0, r3
 8006fea:	bfb8      	it	lt
 8006fec:	4618      	movlt	r0, r3
 8006fee:	e7a6      	b.n	8006f3e <_printf_i+0x15e>
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	4632      	mov	r2, r6
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	47d0      	blx	sl
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	d09d      	beq.n	8006f3a <_printf_i+0x15a>
 8006ffe:	3501      	adds	r5, #1
 8007000:	68e3      	ldr	r3, [r4, #12]
 8007002:	9903      	ldr	r1, [sp, #12]
 8007004:	1a5b      	subs	r3, r3, r1
 8007006:	42ab      	cmp	r3, r5
 8007008:	dcf2      	bgt.n	8006ff0 <_printf_i+0x210>
 800700a:	e7eb      	b.n	8006fe4 <_printf_i+0x204>
 800700c:	2500      	movs	r5, #0
 800700e:	f104 0619 	add.w	r6, r4, #25
 8007012:	e7f5      	b.n	8007000 <_printf_i+0x220>
 8007014:	08009ff2 	.word	0x08009ff2
 8007018:	0800a003 	.word	0x0800a003

0800701c <std>:
 800701c:	2300      	movs	r3, #0
 800701e:	b510      	push	{r4, lr}
 8007020:	4604      	mov	r4, r0
 8007022:	e9c0 3300 	strd	r3, r3, [r0]
 8007026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800702a:	6083      	str	r3, [r0, #8]
 800702c:	8181      	strh	r1, [r0, #12]
 800702e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007030:	81c2      	strh	r2, [r0, #14]
 8007032:	6183      	str	r3, [r0, #24]
 8007034:	4619      	mov	r1, r3
 8007036:	2208      	movs	r2, #8
 8007038:	305c      	adds	r0, #92	@ 0x5c
 800703a:	f000 f8b1 	bl	80071a0 <memset>
 800703e:	4b0d      	ldr	r3, [pc, #52]	@ (8007074 <std+0x58>)
 8007040:	6263      	str	r3, [r4, #36]	@ 0x24
 8007042:	4b0d      	ldr	r3, [pc, #52]	@ (8007078 <std+0x5c>)
 8007044:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007046:	4b0d      	ldr	r3, [pc, #52]	@ (800707c <std+0x60>)
 8007048:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800704a:	4b0d      	ldr	r3, [pc, #52]	@ (8007080 <std+0x64>)
 800704c:	6323      	str	r3, [r4, #48]	@ 0x30
 800704e:	4b0d      	ldr	r3, [pc, #52]	@ (8007084 <std+0x68>)
 8007050:	6224      	str	r4, [r4, #32]
 8007052:	429c      	cmp	r4, r3
 8007054:	d006      	beq.n	8007064 <std+0x48>
 8007056:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800705a:	4294      	cmp	r4, r2
 800705c:	d002      	beq.n	8007064 <std+0x48>
 800705e:	33d0      	adds	r3, #208	@ 0xd0
 8007060:	429c      	cmp	r4, r3
 8007062:	d105      	bne.n	8007070 <std+0x54>
 8007064:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800706c:	f000 b8ca 	b.w	8007204 <__retarget_lock_init_recursive>
 8007070:	bd10      	pop	{r4, pc}
 8007072:	bf00      	nop
 8007074:	08008b05 	.word	0x08008b05
 8007078:	08008b27 	.word	0x08008b27
 800707c:	08008b5f 	.word	0x08008b5f
 8007080:	08008b83 	.word	0x08008b83
 8007084:	20002e58 	.word	0x20002e58

08007088 <stdio_exit_handler>:
 8007088:	4a02      	ldr	r2, [pc, #8]	@ (8007094 <stdio_exit_handler+0xc>)
 800708a:	4903      	ldr	r1, [pc, #12]	@ (8007098 <stdio_exit_handler+0x10>)
 800708c:	4803      	ldr	r0, [pc, #12]	@ (800709c <stdio_exit_handler+0x14>)
 800708e:	f000 b869 	b.w	8007164 <_fwalk_sglue>
 8007092:	bf00      	nop
 8007094:	20000010 	.word	0x20000010
 8007098:	080083a9 	.word	0x080083a9
 800709c:	20000020 	.word	0x20000020

080070a0 <cleanup_stdio>:
 80070a0:	6841      	ldr	r1, [r0, #4]
 80070a2:	4b0c      	ldr	r3, [pc, #48]	@ (80070d4 <cleanup_stdio+0x34>)
 80070a4:	4299      	cmp	r1, r3
 80070a6:	b510      	push	{r4, lr}
 80070a8:	4604      	mov	r4, r0
 80070aa:	d001      	beq.n	80070b0 <cleanup_stdio+0x10>
 80070ac:	f001 f97c 	bl	80083a8 <_fflush_r>
 80070b0:	68a1      	ldr	r1, [r4, #8]
 80070b2:	4b09      	ldr	r3, [pc, #36]	@ (80070d8 <cleanup_stdio+0x38>)
 80070b4:	4299      	cmp	r1, r3
 80070b6:	d002      	beq.n	80070be <cleanup_stdio+0x1e>
 80070b8:	4620      	mov	r0, r4
 80070ba:	f001 f975 	bl	80083a8 <_fflush_r>
 80070be:	68e1      	ldr	r1, [r4, #12]
 80070c0:	4b06      	ldr	r3, [pc, #24]	@ (80070dc <cleanup_stdio+0x3c>)
 80070c2:	4299      	cmp	r1, r3
 80070c4:	d004      	beq.n	80070d0 <cleanup_stdio+0x30>
 80070c6:	4620      	mov	r0, r4
 80070c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070cc:	f001 b96c 	b.w	80083a8 <_fflush_r>
 80070d0:	bd10      	pop	{r4, pc}
 80070d2:	bf00      	nop
 80070d4:	20002e58 	.word	0x20002e58
 80070d8:	20002ec0 	.word	0x20002ec0
 80070dc:	20002f28 	.word	0x20002f28

080070e0 <global_stdio_init.part.0>:
 80070e0:	b510      	push	{r4, lr}
 80070e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007110 <global_stdio_init.part.0+0x30>)
 80070e4:	4c0b      	ldr	r4, [pc, #44]	@ (8007114 <global_stdio_init.part.0+0x34>)
 80070e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007118 <global_stdio_init.part.0+0x38>)
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	4620      	mov	r0, r4
 80070ec:	2200      	movs	r2, #0
 80070ee:	2104      	movs	r1, #4
 80070f0:	f7ff ff94 	bl	800701c <std>
 80070f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070f8:	2201      	movs	r2, #1
 80070fa:	2109      	movs	r1, #9
 80070fc:	f7ff ff8e 	bl	800701c <std>
 8007100:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007104:	2202      	movs	r2, #2
 8007106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800710a:	2112      	movs	r1, #18
 800710c:	f7ff bf86 	b.w	800701c <std>
 8007110:	20002f90 	.word	0x20002f90
 8007114:	20002e58 	.word	0x20002e58
 8007118:	08007089 	.word	0x08007089

0800711c <__sfp_lock_acquire>:
 800711c:	4801      	ldr	r0, [pc, #4]	@ (8007124 <__sfp_lock_acquire+0x8>)
 800711e:	f000 b872 	b.w	8007206 <__retarget_lock_acquire_recursive>
 8007122:	bf00      	nop
 8007124:	20002f95 	.word	0x20002f95

08007128 <__sfp_lock_release>:
 8007128:	4801      	ldr	r0, [pc, #4]	@ (8007130 <__sfp_lock_release+0x8>)
 800712a:	f000 b86d 	b.w	8007208 <__retarget_lock_release_recursive>
 800712e:	bf00      	nop
 8007130:	20002f95 	.word	0x20002f95

08007134 <__sinit>:
 8007134:	b510      	push	{r4, lr}
 8007136:	4604      	mov	r4, r0
 8007138:	f7ff fff0 	bl	800711c <__sfp_lock_acquire>
 800713c:	6a23      	ldr	r3, [r4, #32]
 800713e:	b11b      	cbz	r3, 8007148 <__sinit+0x14>
 8007140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007144:	f7ff bff0 	b.w	8007128 <__sfp_lock_release>
 8007148:	4b04      	ldr	r3, [pc, #16]	@ (800715c <__sinit+0x28>)
 800714a:	6223      	str	r3, [r4, #32]
 800714c:	4b04      	ldr	r3, [pc, #16]	@ (8007160 <__sinit+0x2c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1f5      	bne.n	8007140 <__sinit+0xc>
 8007154:	f7ff ffc4 	bl	80070e0 <global_stdio_init.part.0>
 8007158:	e7f2      	b.n	8007140 <__sinit+0xc>
 800715a:	bf00      	nop
 800715c:	080070a1 	.word	0x080070a1
 8007160:	20002f90 	.word	0x20002f90

08007164 <_fwalk_sglue>:
 8007164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007168:	4607      	mov	r7, r0
 800716a:	4688      	mov	r8, r1
 800716c:	4614      	mov	r4, r2
 800716e:	2600      	movs	r6, #0
 8007170:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007174:	f1b9 0901 	subs.w	r9, r9, #1
 8007178:	d505      	bpl.n	8007186 <_fwalk_sglue+0x22>
 800717a:	6824      	ldr	r4, [r4, #0]
 800717c:	2c00      	cmp	r4, #0
 800717e:	d1f7      	bne.n	8007170 <_fwalk_sglue+0xc>
 8007180:	4630      	mov	r0, r6
 8007182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007186:	89ab      	ldrh	r3, [r5, #12]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d907      	bls.n	800719c <_fwalk_sglue+0x38>
 800718c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007190:	3301      	adds	r3, #1
 8007192:	d003      	beq.n	800719c <_fwalk_sglue+0x38>
 8007194:	4629      	mov	r1, r5
 8007196:	4638      	mov	r0, r7
 8007198:	47c0      	blx	r8
 800719a:	4306      	orrs	r6, r0
 800719c:	3568      	adds	r5, #104	@ 0x68
 800719e:	e7e9      	b.n	8007174 <_fwalk_sglue+0x10>

080071a0 <memset>:
 80071a0:	4402      	add	r2, r0
 80071a2:	4603      	mov	r3, r0
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d100      	bne.n	80071aa <memset+0xa>
 80071a8:	4770      	bx	lr
 80071aa:	f803 1b01 	strb.w	r1, [r3], #1
 80071ae:	e7f9      	b.n	80071a4 <memset+0x4>

080071b0 <__errno>:
 80071b0:	4b01      	ldr	r3, [pc, #4]	@ (80071b8 <__errno+0x8>)
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	2000001c 	.word	0x2000001c

080071bc <__libc_init_array>:
 80071bc:	b570      	push	{r4, r5, r6, lr}
 80071be:	4d0d      	ldr	r5, [pc, #52]	@ (80071f4 <__libc_init_array+0x38>)
 80071c0:	4c0d      	ldr	r4, [pc, #52]	@ (80071f8 <__libc_init_array+0x3c>)
 80071c2:	1b64      	subs	r4, r4, r5
 80071c4:	10a4      	asrs	r4, r4, #2
 80071c6:	2600      	movs	r6, #0
 80071c8:	42a6      	cmp	r6, r4
 80071ca:	d109      	bne.n	80071e0 <__libc_init_array+0x24>
 80071cc:	4d0b      	ldr	r5, [pc, #44]	@ (80071fc <__libc_init_array+0x40>)
 80071ce:	4c0c      	ldr	r4, [pc, #48]	@ (8007200 <__libc_init_array+0x44>)
 80071d0:	f002 fed8 	bl	8009f84 <_init>
 80071d4:	1b64      	subs	r4, r4, r5
 80071d6:	10a4      	asrs	r4, r4, #2
 80071d8:	2600      	movs	r6, #0
 80071da:	42a6      	cmp	r6, r4
 80071dc:	d105      	bne.n	80071ea <__libc_init_array+0x2e>
 80071de:	bd70      	pop	{r4, r5, r6, pc}
 80071e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e4:	4798      	blx	r3
 80071e6:	3601      	adds	r6, #1
 80071e8:	e7ee      	b.n	80071c8 <__libc_init_array+0xc>
 80071ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ee:	4798      	blx	r3
 80071f0:	3601      	adds	r6, #1
 80071f2:	e7f2      	b.n	80071da <__libc_init_array+0x1e>
 80071f4:	0800a3a0 	.word	0x0800a3a0
 80071f8:	0800a3a0 	.word	0x0800a3a0
 80071fc:	0800a3a0 	.word	0x0800a3a0
 8007200:	0800a3a4 	.word	0x0800a3a4

08007204 <__retarget_lock_init_recursive>:
 8007204:	4770      	bx	lr

08007206 <__retarget_lock_acquire_recursive>:
 8007206:	4770      	bx	lr

08007208 <__retarget_lock_release_recursive>:
 8007208:	4770      	bx	lr
	...

0800720c <_localeconv_r>:
 800720c:	4800      	ldr	r0, [pc, #0]	@ (8007210 <_localeconv_r+0x4>)
 800720e:	4770      	bx	lr
 8007210:	2000015c 	.word	0x2000015c

08007214 <quorem>:
 8007214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	6903      	ldr	r3, [r0, #16]
 800721a:	690c      	ldr	r4, [r1, #16]
 800721c:	42a3      	cmp	r3, r4
 800721e:	4607      	mov	r7, r0
 8007220:	db7e      	blt.n	8007320 <quorem+0x10c>
 8007222:	3c01      	subs	r4, #1
 8007224:	f101 0814 	add.w	r8, r1, #20
 8007228:	00a3      	lsls	r3, r4, #2
 800722a:	f100 0514 	add.w	r5, r0, #20
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800723a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800723e:	3301      	adds	r3, #1
 8007240:	429a      	cmp	r2, r3
 8007242:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007246:	fbb2 f6f3 	udiv	r6, r2, r3
 800724a:	d32e      	bcc.n	80072aa <quorem+0x96>
 800724c:	f04f 0a00 	mov.w	sl, #0
 8007250:	46c4      	mov	ip, r8
 8007252:	46ae      	mov	lr, r5
 8007254:	46d3      	mov	fp, sl
 8007256:	f85c 3b04 	ldr.w	r3, [ip], #4
 800725a:	b298      	uxth	r0, r3
 800725c:	fb06 a000 	mla	r0, r6, r0, sl
 8007260:	0c02      	lsrs	r2, r0, #16
 8007262:	0c1b      	lsrs	r3, r3, #16
 8007264:	fb06 2303 	mla	r3, r6, r3, r2
 8007268:	f8de 2000 	ldr.w	r2, [lr]
 800726c:	b280      	uxth	r0, r0
 800726e:	b292      	uxth	r2, r2
 8007270:	1a12      	subs	r2, r2, r0
 8007272:	445a      	add	r2, fp
 8007274:	f8de 0000 	ldr.w	r0, [lr]
 8007278:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800727c:	b29b      	uxth	r3, r3
 800727e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007282:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007286:	b292      	uxth	r2, r2
 8007288:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800728c:	45e1      	cmp	r9, ip
 800728e:	f84e 2b04 	str.w	r2, [lr], #4
 8007292:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007296:	d2de      	bcs.n	8007256 <quorem+0x42>
 8007298:	9b00      	ldr	r3, [sp, #0]
 800729a:	58eb      	ldr	r3, [r5, r3]
 800729c:	b92b      	cbnz	r3, 80072aa <quorem+0x96>
 800729e:	9b01      	ldr	r3, [sp, #4]
 80072a0:	3b04      	subs	r3, #4
 80072a2:	429d      	cmp	r5, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	d32f      	bcc.n	8007308 <quorem+0xf4>
 80072a8:	613c      	str	r4, [r7, #16]
 80072aa:	4638      	mov	r0, r7
 80072ac:	f001 fb22 	bl	80088f4 <__mcmp>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	db25      	blt.n	8007300 <quorem+0xec>
 80072b4:	4629      	mov	r1, r5
 80072b6:	2000      	movs	r0, #0
 80072b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80072bc:	f8d1 c000 	ldr.w	ip, [r1]
 80072c0:	fa1f fe82 	uxth.w	lr, r2
 80072c4:	fa1f f38c 	uxth.w	r3, ip
 80072c8:	eba3 030e 	sub.w	r3, r3, lr
 80072cc:	4403      	add	r3, r0
 80072ce:	0c12      	lsrs	r2, r2, #16
 80072d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80072d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80072d8:	b29b      	uxth	r3, r3
 80072da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072de:	45c1      	cmp	r9, r8
 80072e0:	f841 3b04 	str.w	r3, [r1], #4
 80072e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072e8:	d2e6      	bcs.n	80072b8 <quorem+0xa4>
 80072ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072f2:	b922      	cbnz	r2, 80072fe <quorem+0xea>
 80072f4:	3b04      	subs	r3, #4
 80072f6:	429d      	cmp	r5, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	d30b      	bcc.n	8007314 <quorem+0x100>
 80072fc:	613c      	str	r4, [r7, #16]
 80072fe:	3601      	adds	r6, #1
 8007300:	4630      	mov	r0, r6
 8007302:	b003      	add	sp, #12
 8007304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	3b04      	subs	r3, #4
 800730c:	2a00      	cmp	r2, #0
 800730e:	d1cb      	bne.n	80072a8 <quorem+0x94>
 8007310:	3c01      	subs	r4, #1
 8007312:	e7c6      	b.n	80072a2 <quorem+0x8e>
 8007314:	6812      	ldr	r2, [r2, #0]
 8007316:	3b04      	subs	r3, #4
 8007318:	2a00      	cmp	r2, #0
 800731a:	d1ef      	bne.n	80072fc <quorem+0xe8>
 800731c:	3c01      	subs	r4, #1
 800731e:	e7ea      	b.n	80072f6 <quorem+0xe2>
 8007320:	2000      	movs	r0, #0
 8007322:	e7ee      	b.n	8007302 <quorem+0xee>
 8007324:	0000      	movs	r0, r0
	...

08007328 <_dtoa_r>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	69c7      	ldr	r7, [r0, #28]
 800732e:	b097      	sub	sp, #92	@ 0x5c
 8007330:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007334:	ec55 4b10 	vmov	r4, r5, d0
 8007338:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800733a:	9107      	str	r1, [sp, #28]
 800733c:	4681      	mov	r9, r0
 800733e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007340:	9311      	str	r3, [sp, #68]	@ 0x44
 8007342:	b97f      	cbnz	r7, 8007364 <_dtoa_r+0x3c>
 8007344:	2010      	movs	r0, #16
 8007346:	f000 ff01 	bl	800814c <malloc>
 800734a:	4602      	mov	r2, r0
 800734c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007350:	b920      	cbnz	r0, 800735c <_dtoa_r+0x34>
 8007352:	4ba9      	ldr	r3, [pc, #676]	@ (80075f8 <_dtoa_r+0x2d0>)
 8007354:	21ef      	movs	r1, #239	@ 0xef
 8007356:	48a9      	ldr	r0, [pc, #676]	@ (80075fc <_dtoa_r+0x2d4>)
 8007358:	f001 fd94 	bl	8008e84 <__assert_func>
 800735c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007360:	6007      	str	r7, [r0, #0]
 8007362:	60c7      	str	r7, [r0, #12]
 8007364:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007368:	6819      	ldr	r1, [r3, #0]
 800736a:	b159      	cbz	r1, 8007384 <_dtoa_r+0x5c>
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	604a      	str	r2, [r1, #4]
 8007370:	2301      	movs	r3, #1
 8007372:	4093      	lsls	r3, r2
 8007374:	608b      	str	r3, [r1, #8]
 8007376:	4648      	mov	r0, r9
 8007378:	f001 f88a 	bl	8008490 <_Bfree>
 800737c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	1e2b      	subs	r3, r5, #0
 8007386:	bfb9      	ittee	lt
 8007388:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800738c:	9305      	strlt	r3, [sp, #20]
 800738e:	2300      	movge	r3, #0
 8007390:	6033      	strge	r3, [r6, #0]
 8007392:	9f05      	ldr	r7, [sp, #20]
 8007394:	4b9a      	ldr	r3, [pc, #616]	@ (8007600 <_dtoa_r+0x2d8>)
 8007396:	bfbc      	itt	lt
 8007398:	2201      	movlt	r2, #1
 800739a:	6032      	strlt	r2, [r6, #0]
 800739c:	43bb      	bics	r3, r7
 800739e:	d112      	bne.n	80073c6 <_dtoa_r+0x9e>
 80073a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80073a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80073ac:	4323      	orrs	r3, r4
 80073ae:	f000 855a 	beq.w	8007e66 <_dtoa_r+0xb3e>
 80073b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80073b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007614 <_dtoa_r+0x2ec>
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 855c 	beq.w	8007e76 <_dtoa_r+0xb4e>
 80073be:	f10a 0303 	add.w	r3, sl, #3
 80073c2:	f000 bd56 	b.w	8007e72 <_dtoa_r+0xb4a>
 80073c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80073ca:	2200      	movs	r2, #0
 80073cc:	ec51 0b17 	vmov	r0, r1, d7
 80073d0:	2300      	movs	r3, #0
 80073d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80073d6:	f7f9 fb77 	bl	8000ac8 <__aeabi_dcmpeq>
 80073da:	4680      	mov	r8, r0
 80073dc:	b158      	cbz	r0, 80073f6 <_dtoa_r+0xce>
 80073de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80073e0:	2301      	movs	r3, #1
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80073e6:	b113      	cbz	r3, 80073ee <_dtoa_r+0xc6>
 80073e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80073ea:	4b86      	ldr	r3, [pc, #536]	@ (8007604 <_dtoa_r+0x2dc>)
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007618 <_dtoa_r+0x2f0>
 80073f2:	f000 bd40 	b.w	8007e76 <_dtoa_r+0xb4e>
 80073f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80073fa:	aa14      	add	r2, sp, #80	@ 0x50
 80073fc:	a915      	add	r1, sp, #84	@ 0x54
 80073fe:	4648      	mov	r0, r9
 8007400:	f001 fb28 	bl	8008a54 <__d2b>
 8007404:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007408:	9002      	str	r0, [sp, #8]
 800740a:	2e00      	cmp	r6, #0
 800740c:	d078      	beq.n	8007500 <_dtoa_r+0x1d8>
 800740e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007410:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007418:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800741c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007420:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007424:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007428:	4619      	mov	r1, r3
 800742a:	2200      	movs	r2, #0
 800742c:	4b76      	ldr	r3, [pc, #472]	@ (8007608 <_dtoa_r+0x2e0>)
 800742e:	f7f8 ff2b 	bl	8000288 <__aeabi_dsub>
 8007432:	a36b      	add	r3, pc, #428	@ (adr r3, 80075e0 <_dtoa_r+0x2b8>)
 8007434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007438:	f7f9 f8de 	bl	80005f8 <__aeabi_dmul>
 800743c:	a36a      	add	r3, pc, #424	@ (adr r3, 80075e8 <_dtoa_r+0x2c0>)
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	f7f8 ff23 	bl	800028c <__adddf3>
 8007446:	4604      	mov	r4, r0
 8007448:	4630      	mov	r0, r6
 800744a:	460d      	mov	r5, r1
 800744c:	f7f9 f86a 	bl	8000524 <__aeabi_i2d>
 8007450:	a367      	add	r3, pc, #412	@ (adr r3, 80075f0 <_dtoa_r+0x2c8>)
 8007452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007456:	f7f9 f8cf 	bl	80005f8 <__aeabi_dmul>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4620      	mov	r0, r4
 8007460:	4629      	mov	r1, r5
 8007462:	f7f8 ff13 	bl	800028c <__adddf3>
 8007466:	4604      	mov	r4, r0
 8007468:	460d      	mov	r5, r1
 800746a:	f7f9 fb75 	bl	8000b58 <__aeabi_d2iz>
 800746e:	2200      	movs	r2, #0
 8007470:	4607      	mov	r7, r0
 8007472:	2300      	movs	r3, #0
 8007474:	4620      	mov	r0, r4
 8007476:	4629      	mov	r1, r5
 8007478:	f7f9 fb30 	bl	8000adc <__aeabi_dcmplt>
 800747c:	b140      	cbz	r0, 8007490 <_dtoa_r+0x168>
 800747e:	4638      	mov	r0, r7
 8007480:	f7f9 f850 	bl	8000524 <__aeabi_i2d>
 8007484:	4622      	mov	r2, r4
 8007486:	462b      	mov	r3, r5
 8007488:	f7f9 fb1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800748c:	b900      	cbnz	r0, 8007490 <_dtoa_r+0x168>
 800748e:	3f01      	subs	r7, #1
 8007490:	2f16      	cmp	r7, #22
 8007492:	d852      	bhi.n	800753a <_dtoa_r+0x212>
 8007494:	4b5d      	ldr	r3, [pc, #372]	@ (800760c <_dtoa_r+0x2e4>)
 8007496:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80074a2:	f7f9 fb1b 	bl	8000adc <__aeabi_dcmplt>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d049      	beq.n	800753e <_dtoa_r+0x216>
 80074aa:	3f01      	subs	r7, #1
 80074ac:	2300      	movs	r3, #0
 80074ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80074b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80074b2:	1b9b      	subs	r3, r3, r6
 80074b4:	1e5a      	subs	r2, r3, #1
 80074b6:	bf45      	ittet	mi
 80074b8:	f1c3 0301 	rsbmi	r3, r3, #1
 80074bc:	9300      	strmi	r3, [sp, #0]
 80074be:	2300      	movpl	r3, #0
 80074c0:	2300      	movmi	r3, #0
 80074c2:	9206      	str	r2, [sp, #24]
 80074c4:	bf54      	ite	pl
 80074c6:	9300      	strpl	r3, [sp, #0]
 80074c8:	9306      	strmi	r3, [sp, #24]
 80074ca:	2f00      	cmp	r7, #0
 80074cc:	db39      	blt.n	8007542 <_dtoa_r+0x21a>
 80074ce:	9b06      	ldr	r3, [sp, #24]
 80074d0:	970d      	str	r7, [sp, #52]	@ 0x34
 80074d2:	443b      	add	r3, r7
 80074d4:	9306      	str	r3, [sp, #24]
 80074d6:	2300      	movs	r3, #0
 80074d8:	9308      	str	r3, [sp, #32]
 80074da:	9b07      	ldr	r3, [sp, #28]
 80074dc:	2b09      	cmp	r3, #9
 80074de:	d863      	bhi.n	80075a8 <_dtoa_r+0x280>
 80074e0:	2b05      	cmp	r3, #5
 80074e2:	bfc4      	itt	gt
 80074e4:	3b04      	subgt	r3, #4
 80074e6:	9307      	strgt	r3, [sp, #28]
 80074e8:	9b07      	ldr	r3, [sp, #28]
 80074ea:	f1a3 0302 	sub.w	r3, r3, #2
 80074ee:	bfcc      	ite	gt
 80074f0:	2400      	movgt	r4, #0
 80074f2:	2401      	movle	r4, #1
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d863      	bhi.n	80075c0 <_dtoa_r+0x298>
 80074f8:	e8df f003 	tbb	[pc, r3]
 80074fc:	2b375452 	.word	0x2b375452
 8007500:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007504:	441e      	add	r6, r3
 8007506:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800750a:	2b20      	cmp	r3, #32
 800750c:	bfc1      	itttt	gt
 800750e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007512:	409f      	lslgt	r7, r3
 8007514:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007518:	fa24 f303 	lsrgt.w	r3, r4, r3
 800751c:	bfd6      	itet	le
 800751e:	f1c3 0320 	rsble	r3, r3, #32
 8007522:	ea47 0003 	orrgt.w	r0, r7, r3
 8007526:	fa04 f003 	lslle.w	r0, r4, r3
 800752a:	f7f8 ffeb 	bl	8000504 <__aeabi_ui2d>
 800752e:	2201      	movs	r2, #1
 8007530:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007534:	3e01      	subs	r6, #1
 8007536:	9212      	str	r2, [sp, #72]	@ 0x48
 8007538:	e776      	b.n	8007428 <_dtoa_r+0x100>
 800753a:	2301      	movs	r3, #1
 800753c:	e7b7      	b.n	80074ae <_dtoa_r+0x186>
 800753e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007540:	e7b6      	b.n	80074b0 <_dtoa_r+0x188>
 8007542:	9b00      	ldr	r3, [sp, #0]
 8007544:	1bdb      	subs	r3, r3, r7
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	427b      	negs	r3, r7
 800754a:	9308      	str	r3, [sp, #32]
 800754c:	2300      	movs	r3, #0
 800754e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007550:	e7c3      	b.n	80074da <_dtoa_r+0x1b2>
 8007552:	2301      	movs	r3, #1
 8007554:	9309      	str	r3, [sp, #36]	@ 0x24
 8007556:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007558:	eb07 0b03 	add.w	fp, r7, r3
 800755c:	f10b 0301 	add.w	r3, fp, #1
 8007560:	2b01      	cmp	r3, #1
 8007562:	9303      	str	r3, [sp, #12]
 8007564:	bfb8      	it	lt
 8007566:	2301      	movlt	r3, #1
 8007568:	e006      	b.n	8007578 <_dtoa_r+0x250>
 800756a:	2301      	movs	r3, #1
 800756c:	9309      	str	r3, [sp, #36]	@ 0x24
 800756e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007570:	2b00      	cmp	r3, #0
 8007572:	dd28      	ble.n	80075c6 <_dtoa_r+0x29e>
 8007574:	469b      	mov	fp, r3
 8007576:	9303      	str	r3, [sp, #12]
 8007578:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800757c:	2100      	movs	r1, #0
 800757e:	2204      	movs	r2, #4
 8007580:	f102 0514 	add.w	r5, r2, #20
 8007584:	429d      	cmp	r5, r3
 8007586:	d926      	bls.n	80075d6 <_dtoa_r+0x2ae>
 8007588:	6041      	str	r1, [r0, #4]
 800758a:	4648      	mov	r0, r9
 800758c:	f000 ff40 	bl	8008410 <_Balloc>
 8007590:	4682      	mov	sl, r0
 8007592:	2800      	cmp	r0, #0
 8007594:	d142      	bne.n	800761c <_dtoa_r+0x2f4>
 8007596:	4b1e      	ldr	r3, [pc, #120]	@ (8007610 <_dtoa_r+0x2e8>)
 8007598:	4602      	mov	r2, r0
 800759a:	f240 11af 	movw	r1, #431	@ 0x1af
 800759e:	e6da      	b.n	8007356 <_dtoa_r+0x2e>
 80075a0:	2300      	movs	r3, #0
 80075a2:	e7e3      	b.n	800756c <_dtoa_r+0x244>
 80075a4:	2300      	movs	r3, #0
 80075a6:	e7d5      	b.n	8007554 <_dtoa_r+0x22c>
 80075a8:	2401      	movs	r4, #1
 80075aa:	2300      	movs	r3, #0
 80075ac:	9307      	str	r3, [sp, #28]
 80075ae:	9409      	str	r4, [sp, #36]	@ 0x24
 80075b0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8cd b00c 	str.w	fp, [sp, #12]
 80075ba:	2312      	movs	r3, #18
 80075bc:	920c      	str	r2, [sp, #48]	@ 0x30
 80075be:	e7db      	b.n	8007578 <_dtoa_r+0x250>
 80075c0:	2301      	movs	r3, #1
 80075c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80075c4:	e7f4      	b.n	80075b0 <_dtoa_r+0x288>
 80075c6:	f04f 0b01 	mov.w	fp, #1
 80075ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80075ce:	465b      	mov	r3, fp
 80075d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80075d4:	e7d0      	b.n	8007578 <_dtoa_r+0x250>
 80075d6:	3101      	adds	r1, #1
 80075d8:	0052      	lsls	r2, r2, #1
 80075da:	e7d1      	b.n	8007580 <_dtoa_r+0x258>
 80075dc:	f3af 8000 	nop.w
 80075e0:	636f4361 	.word	0x636f4361
 80075e4:	3fd287a7 	.word	0x3fd287a7
 80075e8:	8b60c8b3 	.word	0x8b60c8b3
 80075ec:	3fc68a28 	.word	0x3fc68a28
 80075f0:	509f79fb 	.word	0x509f79fb
 80075f4:	3fd34413 	.word	0x3fd34413
 80075f8:	0800a021 	.word	0x0800a021
 80075fc:	0800a038 	.word	0x0800a038
 8007600:	7ff00000 	.word	0x7ff00000
 8007604:	08009ff1 	.word	0x08009ff1
 8007608:	3ff80000 	.word	0x3ff80000
 800760c:	0800a188 	.word	0x0800a188
 8007610:	0800a090 	.word	0x0800a090
 8007614:	0800a01d 	.word	0x0800a01d
 8007618:	08009ff0 	.word	0x08009ff0
 800761c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007620:	6018      	str	r0, [r3, #0]
 8007622:	9b03      	ldr	r3, [sp, #12]
 8007624:	2b0e      	cmp	r3, #14
 8007626:	f200 80a1 	bhi.w	800776c <_dtoa_r+0x444>
 800762a:	2c00      	cmp	r4, #0
 800762c:	f000 809e 	beq.w	800776c <_dtoa_r+0x444>
 8007630:	2f00      	cmp	r7, #0
 8007632:	dd33      	ble.n	800769c <_dtoa_r+0x374>
 8007634:	4b9c      	ldr	r3, [pc, #624]	@ (80078a8 <_dtoa_r+0x580>)
 8007636:	f007 020f 	and.w	r2, r7, #15
 800763a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800763e:	ed93 7b00 	vldr	d7, [r3]
 8007642:	05f8      	lsls	r0, r7, #23
 8007644:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007648:	ea4f 1427 	mov.w	r4, r7, asr #4
 800764c:	d516      	bpl.n	800767c <_dtoa_r+0x354>
 800764e:	4b97      	ldr	r3, [pc, #604]	@ (80078ac <_dtoa_r+0x584>)
 8007650:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007658:	f7f9 f8f8 	bl	800084c <__aeabi_ddiv>
 800765c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007660:	f004 040f 	and.w	r4, r4, #15
 8007664:	2603      	movs	r6, #3
 8007666:	4d91      	ldr	r5, [pc, #580]	@ (80078ac <_dtoa_r+0x584>)
 8007668:	b954      	cbnz	r4, 8007680 <_dtoa_r+0x358>
 800766a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800766e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007672:	f7f9 f8eb 	bl	800084c <__aeabi_ddiv>
 8007676:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800767a:	e028      	b.n	80076ce <_dtoa_r+0x3a6>
 800767c:	2602      	movs	r6, #2
 800767e:	e7f2      	b.n	8007666 <_dtoa_r+0x33e>
 8007680:	07e1      	lsls	r1, r4, #31
 8007682:	d508      	bpl.n	8007696 <_dtoa_r+0x36e>
 8007684:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007688:	e9d5 2300 	ldrd	r2, r3, [r5]
 800768c:	f7f8 ffb4 	bl	80005f8 <__aeabi_dmul>
 8007690:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007694:	3601      	adds	r6, #1
 8007696:	1064      	asrs	r4, r4, #1
 8007698:	3508      	adds	r5, #8
 800769a:	e7e5      	b.n	8007668 <_dtoa_r+0x340>
 800769c:	f000 80af 	beq.w	80077fe <_dtoa_r+0x4d6>
 80076a0:	427c      	negs	r4, r7
 80076a2:	4b81      	ldr	r3, [pc, #516]	@ (80078a8 <_dtoa_r+0x580>)
 80076a4:	4d81      	ldr	r5, [pc, #516]	@ (80078ac <_dtoa_r+0x584>)
 80076a6:	f004 020f 	and.w	r2, r4, #15
 80076aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80076b6:	f7f8 ff9f 	bl	80005f8 <__aeabi_dmul>
 80076ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076be:	1124      	asrs	r4, r4, #4
 80076c0:	2300      	movs	r3, #0
 80076c2:	2602      	movs	r6, #2
 80076c4:	2c00      	cmp	r4, #0
 80076c6:	f040 808f 	bne.w	80077e8 <_dtoa_r+0x4c0>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1d3      	bne.n	8007676 <_dtoa_r+0x34e>
 80076ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80076d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 8094 	beq.w	8007802 <_dtoa_r+0x4da>
 80076da:	4b75      	ldr	r3, [pc, #468]	@ (80078b0 <_dtoa_r+0x588>)
 80076dc:	2200      	movs	r2, #0
 80076de:	4620      	mov	r0, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	f7f9 f9fb 	bl	8000adc <__aeabi_dcmplt>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	f000 808b 	beq.w	8007802 <_dtoa_r+0x4da>
 80076ec:	9b03      	ldr	r3, [sp, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 8087 	beq.w	8007802 <_dtoa_r+0x4da>
 80076f4:	f1bb 0f00 	cmp.w	fp, #0
 80076f8:	dd34      	ble.n	8007764 <_dtoa_r+0x43c>
 80076fa:	4620      	mov	r0, r4
 80076fc:	4b6d      	ldr	r3, [pc, #436]	@ (80078b4 <_dtoa_r+0x58c>)
 80076fe:	2200      	movs	r2, #0
 8007700:	4629      	mov	r1, r5
 8007702:	f7f8 ff79 	bl	80005f8 <__aeabi_dmul>
 8007706:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800770a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800770e:	3601      	adds	r6, #1
 8007710:	465c      	mov	r4, fp
 8007712:	4630      	mov	r0, r6
 8007714:	f7f8 ff06 	bl	8000524 <__aeabi_i2d>
 8007718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800771c:	f7f8 ff6c 	bl	80005f8 <__aeabi_dmul>
 8007720:	4b65      	ldr	r3, [pc, #404]	@ (80078b8 <_dtoa_r+0x590>)
 8007722:	2200      	movs	r2, #0
 8007724:	f7f8 fdb2 	bl	800028c <__adddf3>
 8007728:	4605      	mov	r5, r0
 800772a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800772e:	2c00      	cmp	r4, #0
 8007730:	d16a      	bne.n	8007808 <_dtoa_r+0x4e0>
 8007732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007736:	4b61      	ldr	r3, [pc, #388]	@ (80078bc <_dtoa_r+0x594>)
 8007738:	2200      	movs	r2, #0
 800773a:	f7f8 fda5 	bl	8000288 <__aeabi_dsub>
 800773e:	4602      	mov	r2, r0
 8007740:	460b      	mov	r3, r1
 8007742:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007746:	462a      	mov	r2, r5
 8007748:	4633      	mov	r3, r6
 800774a:	f7f9 f9e5 	bl	8000b18 <__aeabi_dcmpgt>
 800774e:	2800      	cmp	r0, #0
 8007750:	f040 8298 	bne.w	8007c84 <_dtoa_r+0x95c>
 8007754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007758:	462a      	mov	r2, r5
 800775a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800775e:	f7f9 f9bd 	bl	8000adc <__aeabi_dcmplt>
 8007762:	bb38      	cbnz	r0, 80077b4 <_dtoa_r+0x48c>
 8007764:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007768:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800776c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800776e:	2b00      	cmp	r3, #0
 8007770:	f2c0 8157 	blt.w	8007a22 <_dtoa_r+0x6fa>
 8007774:	2f0e      	cmp	r7, #14
 8007776:	f300 8154 	bgt.w	8007a22 <_dtoa_r+0x6fa>
 800777a:	4b4b      	ldr	r3, [pc, #300]	@ (80078a8 <_dtoa_r+0x580>)
 800777c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007780:	ed93 7b00 	vldr	d7, [r3]
 8007784:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007786:	2b00      	cmp	r3, #0
 8007788:	ed8d 7b00 	vstr	d7, [sp]
 800778c:	f280 80e5 	bge.w	800795a <_dtoa_r+0x632>
 8007790:	9b03      	ldr	r3, [sp, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	f300 80e1 	bgt.w	800795a <_dtoa_r+0x632>
 8007798:	d10c      	bne.n	80077b4 <_dtoa_r+0x48c>
 800779a:	4b48      	ldr	r3, [pc, #288]	@ (80078bc <_dtoa_r+0x594>)
 800779c:	2200      	movs	r2, #0
 800779e:	ec51 0b17 	vmov	r0, r1, d7
 80077a2:	f7f8 ff29 	bl	80005f8 <__aeabi_dmul>
 80077a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077aa:	f7f9 f9ab 	bl	8000b04 <__aeabi_dcmpge>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	f000 8266 	beq.w	8007c80 <_dtoa_r+0x958>
 80077b4:	2400      	movs	r4, #0
 80077b6:	4625      	mov	r5, r4
 80077b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80077ba:	4656      	mov	r6, sl
 80077bc:	ea6f 0803 	mvn.w	r8, r3
 80077c0:	2700      	movs	r7, #0
 80077c2:	4621      	mov	r1, r4
 80077c4:	4648      	mov	r0, r9
 80077c6:	f000 fe63 	bl	8008490 <_Bfree>
 80077ca:	2d00      	cmp	r5, #0
 80077cc:	f000 80bd 	beq.w	800794a <_dtoa_r+0x622>
 80077d0:	b12f      	cbz	r7, 80077de <_dtoa_r+0x4b6>
 80077d2:	42af      	cmp	r7, r5
 80077d4:	d003      	beq.n	80077de <_dtoa_r+0x4b6>
 80077d6:	4639      	mov	r1, r7
 80077d8:	4648      	mov	r0, r9
 80077da:	f000 fe59 	bl	8008490 <_Bfree>
 80077de:	4629      	mov	r1, r5
 80077e0:	4648      	mov	r0, r9
 80077e2:	f000 fe55 	bl	8008490 <_Bfree>
 80077e6:	e0b0      	b.n	800794a <_dtoa_r+0x622>
 80077e8:	07e2      	lsls	r2, r4, #31
 80077ea:	d505      	bpl.n	80077f8 <_dtoa_r+0x4d0>
 80077ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077f0:	f7f8 ff02 	bl	80005f8 <__aeabi_dmul>
 80077f4:	3601      	adds	r6, #1
 80077f6:	2301      	movs	r3, #1
 80077f8:	1064      	asrs	r4, r4, #1
 80077fa:	3508      	adds	r5, #8
 80077fc:	e762      	b.n	80076c4 <_dtoa_r+0x39c>
 80077fe:	2602      	movs	r6, #2
 8007800:	e765      	b.n	80076ce <_dtoa_r+0x3a6>
 8007802:	9c03      	ldr	r4, [sp, #12]
 8007804:	46b8      	mov	r8, r7
 8007806:	e784      	b.n	8007712 <_dtoa_r+0x3ea>
 8007808:	4b27      	ldr	r3, [pc, #156]	@ (80078a8 <_dtoa_r+0x580>)
 800780a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800780c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007810:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007814:	4454      	add	r4, sl
 8007816:	2900      	cmp	r1, #0
 8007818:	d054      	beq.n	80078c4 <_dtoa_r+0x59c>
 800781a:	4929      	ldr	r1, [pc, #164]	@ (80078c0 <_dtoa_r+0x598>)
 800781c:	2000      	movs	r0, #0
 800781e:	f7f9 f815 	bl	800084c <__aeabi_ddiv>
 8007822:	4633      	mov	r3, r6
 8007824:	462a      	mov	r2, r5
 8007826:	f7f8 fd2f 	bl	8000288 <__aeabi_dsub>
 800782a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800782e:	4656      	mov	r6, sl
 8007830:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007834:	f7f9 f990 	bl	8000b58 <__aeabi_d2iz>
 8007838:	4605      	mov	r5, r0
 800783a:	f7f8 fe73 	bl	8000524 <__aeabi_i2d>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007846:	f7f8 fd1f 	bl	8000288 <__aeabi_dsub>
 800784a:	3530      	adds	r5, #48	@ 0x30
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007854:	f806 5b01 	strb.w	r5, [r6], #1
 8007858:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800785c:	f7f9 f93e 	bl	8000adc <__aeabi_dcmplt>
 8007860:	2800      	cmp	r0, #0
 8007862:	d172      	bne.n	800794a <_dtoa_r+0x622>
 8007864:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007868:	4911      	ldr	r1, [pc, #68]	@ (80078b0 <_dtoa_r+0x588>)
 800786a:	2000      	movs	r0, #0
 800786c:	f7f8 fd0c 	bl	8000288 <__aeabi_dsub>
 8007870:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007874:	f7f9 f932 	bl	8000adc <__aeabi_dcmplt>
 8007878:	2800      	cmp	r0, #0
 800787a:	f040 80b4 	bne.w	80079e6 <_dtoa_r+0x6be>
 800787e:	42a6      	cmp	r6, r4
 8007880:	f43f af70 	beq.w	8007764 <_dtoa_r+0x43c>
 8007884:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007888:	4b0a      	ldr	r3, [pc, #40]	@ (80078b4 <_dtoa_r+0x58c>)
 800788a:	2200      	movs	r2, #0
 800788c:	f7f8 feb4 	bl	80005f8 <__aeabi_dmul>
 8007890:	4b08      	ldr	r3, [pc, #32]	@ (80078b4 <_dtoa_r+0x58c>)
 8007892:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007896:	2200      	movs	r2, #0
 8007898:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800789c:	f7f8 feac 	bl	80005f8 <__aeabi_dmul>
 80078a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078a4:	e7c4      	b.n	8007830 <_dtoa_r+0x508>
 80078a6:	bf00      	nop
 80078a8:	0800a188 	.word	0x0800a188
 80078ac:	0800a160 	.word	0x0800a160
 80078b0:	3ff00000 	.word	0x3ff00000
 80078b4:	40240000 	.word	0x40240000
 80078b8:	401c0000 	.word	0x401c0000
 80078bc:	40140000 	.word	0x40140000
 80078c0:	3fe00000 	.word	0x3fe00000
 80078c4:	4631      	mov	r1, r6
 80078c6:	4628      	mov	r0, r5
 80078c8:	f7f8 fe96 	bl	80005f8 <__aeabi_dmul>
 80078cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80078d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80078d2:	4656      	mov	r6, sl
 80078d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078d8:	f7f9 f93e 	bl	8000b58 <__aeabi_d2iz>
 80078dc:	4605      	mov	r5, r0
 80078de:	f7f8 fe21 	bl	8000524 <__aeabi_i2d>
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078ea:	f7f8 fccd 	bl	8000288 <__aeabi_dsub>
 80078ee:	3530      	adds	r5, #48	@ 0x30
 80078f0:	f806 5b01 	strb.w	r5, [r6], #1
 80078f4:	4602      	mov	r2, r0
 80078f6:	460b      	mov	r3, r1
 80078f8:	42a6      	cmp	r6, r4
 80078fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078fe:	f04f 0200 	mov.w	r2, #0
 8007902:	d124      	bne.n	800794e <_dtoa_r+0x626>
 8007904:	4baf      	ldr	r3, [pc, #700]	@ (8007bc4 <_dtoa_r+0x89c>)
 8007906:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800790a:	f7f8 fcbf 	bl	800028c <__adddf3>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007916:	f7f9 f8ff 	bl	8000b18 <__aeabi_dcmpgt>
 800791a:	2800      	cmp	r0, #0
 800791c:	d163      	bne.n	80079e6 <_dtoa_r+0x6be>
 800791e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007922:	49a8      	ldr	r1, [pc, #672]	@ (8007bc4 <_dtoa_r+0x89c>)
 8007924:	2000      	movs	r0, #0
 8007926:	f7f8 fcaf 	bl	8000288 <__aeabi_dsub>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007932:	f7f9 f8d3 	bl	8000adc <__aeabi_dcmplt>
 8007936:	2800      	cmp	r0, #0
 8007938:	f43f af14 	beq.w	8007764 <_dtoa_r+0x43c>
 800793c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800793e:	1e73      	subs	r3, r6, #1
 8007940:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007942:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007946:	2b30      	cmp	r3, #48	@ 0x30
 8007948:	d0f8      	beq.n	800793c <_dtoa_r+0x614>
 800794a:	4647      	mov	r7, r8
 800794c:	e03b      	b.n	80079c6 <_dtoa_r+0x69e>
 800794e:	4b9e      	ldr	r3, [pc, #632]	@ (8007bc8 <_dtoa_r+0x8a0>)
 8007950:	f7f8 fe52 	bl	80005f8 <__aeabi_dmul>
 8007954:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007958:	e7bc      	b.n	80078d4 <_dtoa_r+0x5ac>
 800795a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800795e:	4656      	mov	r6, sl
 8007960:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007964:	4620      	mov	r0, r4
 8007966:	4629      	mov	r1, r5
 8007968:	f7f8 ff70 	bl	800084c <__aeabi_ddiv>
 800796c:	f7f9 f8f4 	bl	8000b58 <__aeabi_d2iz>
 8007970:	4680      	mov	r8, r0
 8007972:	f7f8 fdd7 	bl	8000524 <__aeabi_i2d>
 8007976:	e9dd 2300 	ldrd	r2, r3, [sp]
 800797a:	f7f8 fe3d 	bl	80005f8 <__aeabi_dmul>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4620      	mov	r0, r4
 8007984:	4629      	mov	r1, r5
 8007986:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800798a:	f7f8 fc7d 	bl	8000288 <__aeabi_dsub>
 800798e:	f806 4b01 	strb.w	r4, [r6], #1
 8007992:	9d03      	ldr	r5, [sp, #12]
 8007994:	eba6 040a 	sub.w	r4, r6, sl
 8007998:	42a5      	cmp	r5, r4
 800799a:	4602      	mov	r2, r0
 800799c:	460b      	mov	r3, r1
 800799e:	d133      	bne.n	8007a08 <_dtoa_r+0x6e0>
 80079a0:	f7f8 fc74 	bl	800028c <__adddf3>
 80079a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079a8:	4604      	mov	r4, r0
 80079aa:	460d      	mov	r5, r1
 80079ac:	f7f9 f8b4 	bl	8000b18 <__aeabi_dcmpgt>
 80079b0:	b9c0      	cbnz	r0, 80079e4 <_dtoa_r+0x6bc>
 80079b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079b6:	4620      	mov	r0, r4
 80079b8:	4629      	mov	r1, r5
 80079ba:	f7f9 f885 	bl	8000ac8 <__aeabi_dcmpeq>
 80079be:	b110      	cbz	r0, 80079c6 <_dtoa_r+0x69e>
 80079c0:	f018 0f01 	tst.w	r8, #1
 80079c4:	d10e      	bne.n	80079e4 <_dtoa_r+0x6bc>
 80079c6:	9902      	ldr	r1, [sp, #8]
 80079c8:	4648      	mov	r0, r9
 80079ca:	f000 fd61 	bl	8008490 <_Bfree>
 80079ce:	2300      	movs	r3, #0
 80079d0:	7033      	strb	r3, [r6, #0]
 80079d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80079d4:	3701      	adds	r7, #1
 80079d6:	601f      	str	r7, [r3, #0]
 80079d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 824b 	beq.w	8007e76 <_dtoa_r+0xb4e>
 80079e0:	601e      	str	r6, [r3, #0]
 80079e2:	e248      	b.n	8007e76 <_dtoa_r+0xb4e>
 80079e4:	46b8      	mov	r8, r7
 80079e6:	4633      	mov	r3, r6
 80079e8:	461e      	mov	r6, r3
 80079ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079ee:	2a39      	cmp	r2, #57	@ 0x39
 80079f0:	d106      	bne.n	8007a00 <_dtoa_r+0x6d8>
 80079f2:	459a      	cmp	sl, r3
 80079f4:	d1f8      	bne.n	80079e8 <_dtoa_r+0x6c0>
 80079f6:	2230      	movs	r2, #48	@ 0x30
 80079f8:	f108 0801 	add.w	r8, r8, #1
 80079fc:	f88a 2000 	strb.w	r2, [sl]
 8007a00:	781a      	ldrb	r2, [r3, #0]
 8007a02:	3201      	adds	r2, #1
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	e7a0      	b.n	800794a <_dtoa_r+0x622>
 8007a08:	4b6f      	ldr	r3, [pc, #444]	@ (8007bc8 <_dtoa_r+0x8a0>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f7f8 fdf4 	bl	80005f8 <__aeabi_dmul>
 8007a10:	2200      	movs	r2, #0
 8007a12:	2300      	movs	r3, #0
 8007a14:	4604      	mov	r4, r0
 8007a16:	460d      	mov	r5, r1
 8007a18:	f7f9 f856 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d09f      	beq.n	8007960 <_dtoa_r+0x638>
 8007a20:	e7d1      	b.n	80079c6 <_dtoa_r+0x69e>
 8007a22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a24:	2a00      	cmp	r2, #0
 8007a26:	f000 80ea 	beq.w	8007bfe <_dtoa_r+0x8d6>
 8007a2a:	9a07      	ldr	r2, [sp, #28]
 8007a2c:	2a01      	cmp	r2, #1
 8007a2e:	f300 80cd 	bgt.w	8007bcc <_dtoa_r+0x8a4>
 8007a32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007a34:	2a00      	cmp	r2, #0
 8007a36:	f000 80c1 	beq.w	8007bbc <_dtoa_r+0x894>
 8007a3a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007a3e:	9c08      	ldr	r4, [sp, #32]
 8007a40:	9e00      	ldr	r6, [sp, #0]
 8007a42:	9a00      	ldr	r2, [sp, #0]
 8007a44:	441a      	add	r2, r3
 8007a46:	9200      	str	r2, [sp, #0]
 8007a48:	9a06      	ldr	r2, [sp, #24]
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	441a      	add	r2, r3
 8007a4e:	4648      	mov	r0, r9
 8007a50:	9206      	str	r2, [sp, #24]
 8007a52:	f000 fdd1 	bl	80085f8 <__i2b>
 8007a56:	4605      	mov	r5, r0
 8007a58:	b166      	cbz	r6, 8007a74 <_dtoa_r+0x74c>
 8007a5a:	9b06      	ldr	r3, [sp, #24]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	dd09      	ble.n	8007a74 <_dtoa_r+0x74c>
 8007a60:	42b3      	cmp	r3, r6
 8007a62:	9a00      	ldr	r2, [sp, #0]
 8007a64:	bfa8      	it	ge
 8007a66:	4633      	movge	r3, r6
 8007a68:	1ad2      	subs	r2, r2, r3
 8007a6a:	9200      	str	r2, [sp, #0]
 8007a6c:	9a06      	ldr	r2, [sp, #24]
 8007a6e:	1af6      	subs	r6, r6, r3
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	9306      	str	r3, [sp, #24]
 8007a74:	9b08      	ldr	r3, [sp, #32]
 8007a76:	b30b      	cbz	r3, 8007abc <_dtoa_r+0x794>
 8007a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 80c6 	beq.w	8007c0c <_dtoa_r+0x8e4>
 8007a80:	2c00      	cmp	r4, #0
 8007a82:	f000 80c0 	beq.w	8007c06 <_dtoa_r+0x8de>
 8007a86:	4629      	mov	r1, r5
 8007a88:	4622      	mov	r2, r4
 8007a8a:	4648      	mov	r0, r9
 8007a8c:	f000 fe6c 	bl	8008768 <__pow5mult>
 8007a90:	9a02      	ldr	r2, [sp, #8]
 8007a92:	4601      	mov	r1, r0
 8007a94:	4605      	mov	r5, r0
 8007a96:	4648      	mov	r0, r9
 8007a98:	f000 fdc4 	bl	8008624 <__multiply>
 8007a9c:	9902      	ldr	r1, [sp, #8]
 8007a9e:	4680      	mov	r8, r0
 8007aa0:	4648      	mov	r0, r9
 8007aa2:	f000 fcf5 	bl	8008490 <_Bfree>
 8007aa6:	9b08      	ldr	r3, [sp, #32]
 8007aa8:	1b1b      	subs	r3, r3, r4
 8007aaa:	9308      	str	r3, [sp, #32]
 8007aac:	f000 80b1 	beq.w	8007c12 <_dtoa_r+0x8ea>
 8007ab0:	9a08      	ldr	r2, [sp, #32]
 8007ab2:	4641      	mov	r1, r8
 8007ab4:	4648      	mov	r0, r9
 8007ab6:	f000 fe57 	bl	8008768 <__pow5mult>
 8007aba:	9002      	str	r0, [sp, #8]
 8007abc:	2101      	movs	r1, #1
 8007abe:	4648      	mov	r0, r9
 8007ac0:	f000 fd9a 	bl	80085f8 <__i2b>
 8007ac4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 81d8 	beq.w	8007e7e <_dtoa_r+0xb56>
 8007ace:	461a      	mov	r2, r3
 8007ad0:	4601      	mov	r1, r0
 8007ad2:	4648      	mov	r0, r9
 8007ad4:	f000 fe48 	bl	8008768 <__pow5mult>
 8007ad8:	9b07      	ldr	r3, [sp, #28]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	4604      	mov	r4, r0
 8007ade:	f300 809f 	bgt.w	8007c20 <_dtoa_r+0x8f8>
 8007ae2:	9b04      	ldr	r3, [sp, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f040 8097 	bne.w	8007c18 <_dtoa_r+0x8f0>
 8007aea:	9b05      	ldr	r3, [sp, #20]
 8007aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f040 8093 	bne.w	8007c1c <_dtoa_r+0x8f4>
 8007af6:	9b05      	ldr	r3, [sp, #20]
 8007af8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007afc:	0d1b      	lsrs	r3, r3, #20
 8007afe:	051b      	lsls	r3, r3, #20
 8007b00:	b133      	cbz	r3, 8007b10 <_dtoa_r+0x7e8>
 8007b02:	9b00      	ldr	r3, [sp, #0]
 8007b04:	3301      	adds	r3, #1
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	9b06      	ldr	r3, [sp, #24]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	9306      	str	r3, [sp, #24]
 8007b0e:	2301      	movs	r3, #1
 8007b10:	9308      	str	r3, [sp, #32]
 8007b12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 81b8 	beq.w	8007e8a <_dtoa_r+0xb62>
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b20:	6918      	ldr	r0, [r3, #16]
 8007b22:	f000 fd1d 	bl	8008560 <__hi0bits>
 8007b26:	f1c0 0020 	rsb	r0, r0, #32
 8007b2a:	9b06      	ldr	r3, [sp, #24]
 8007b2c:	4418      	add	r0, r3
 8007b2e:	f010 001f 	ands.w	r0, r0, #31
 8007b32:	f000 8082 	beq.w	8007c3a <_dtoa_r+0x912>
 8007b36:	f1c0 0320 	rsb	r3, r0, #32
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	dd73      	ble.n	8007c26 <_dtoa_r+0x8fe>
 8007b3e:	9b00      	ldr	r3, [sp, #0]
 8007b40:	f1c0 001c 	rsb	r0, r0, #28
 8007b44:	4403      	add	r3, r0
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	9b06      	ldr	r3, [sp, #24]
 8007b4a:	4403      	add	r3, r0
 8007b4c:	4406      	add	r6, r0
 8007b4e:	9306      	str	r3, [sp, #24]
 8007b50:	9b00      	ldr	r3, [sp, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	dd05      	ble.n	8007b62 <_dtoa_r+0x83a>
 8007b56:	9902      	ldr	r1, [sp, #8]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	4648      	mov	r0, r9
 8007b5c:	f000 fe5e 	bl	800881c <__lshift>
 8007b60:	9002      	str	r0, [sp, #8]
 8007b62:	9b06      	ldr	r3, [sp, #24]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	dd05      	ble.n	8007b74 <_dtoa_r+0x84c>
 8007b68:	4621      	mov	r1, r4
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	4648      	mov	r0, r9
 8007b6e:	f000 fe55 	bl	800881c <__lshift>
 8007b72:	4604      	mov	r4, r0
 8007b74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d061      	beq.n	8007c3e <_dtoa_r+0x916>
 8007b7a:	9802      	ldr	r0, [sp, #8]
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	f000 feb9 	bl	80088f4 <__mcmp>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	da5b      	bge.n	8007c3e <_dtoa_r+0x916>
 8007b86:	2300      	movs	r3, #0
 8007b88:	9902      	ldr	r1, [sp, #8]
 8007b8a:	220a      	movs	r2, #10
 8007b8c:	4648      	mov	r0, r9
 8007b8e:	f000 fca1 	bl	80084d4 <__multadd>
 8007b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b94:	9002      	str	r0, [sp, #8]
 8007b96:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 8177 	beq.w	8007e8e <_dtoa_r+0xb66>
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	220a      	movs	r2, #10
 8007ba6:	4648      	mov	r0, r9
 8007ba8:	f000 fc94 	bl	80084d4 <__multadd>
 8007bac:	f1bb 0f00 	cmp.w	fp, #0
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	dc6f      	bgt.n	8007c94 <_dtoa_r+0x96c>
 8007bb4:	9b07      	ldr	r3, [sp, #28]
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	dc49      	bgt.n	8007c4e <_dtoa_r+0x926>
 8007bba:	e06b      	b.n	8007c94 <_dtoa_r+0x96c>
 8007bbc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007bbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007bc2:	e73c      	b.n	8007a3e <_dtoa_r+0x716>
 8007bc4:	3fe00000 	.word	0x3fe00000
 8007bc8:	40240000 	.word	0x40240000
 8007bcc:	9b03      	ldr	r3, [sp, #12]
 8007bce:	1e5c      	subs	r4, r3, #1
 8007bd0:	9b08      	ldr	r3, [sp, #32]
 8007bd2:	42a3      	cmp	r3, r4
 8007bd4:	db09      	blt.n	8007bea <_dtoa_r+0x8c2>
 8007bd6:	1b1c      	subs	r4, r3, r4
 8007bd8:	9b03      	ldr	r3, [sp, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f6bf af30 	bge.w	8007a40 <_dtoa_r+0x718>
 8007be0:	9b00      	ldr	r3, [sp, #0]
 8007be2:	9a03      	ldr	r2, [sp, #12]
 8007be4:	1a9e      	subs	r6, r3, r2
 8007be6:	2300      	movs	r3, #0
 8007be8:	e72b      	b.n	8007a42 <_dtoa_r+0x71a>
 8007bea:	9b08      	ldr	r3, [sp, #32]
 8007bec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007bee:	9408      	str	r4, [sp, #32]
 8007bf0:	1ae3      	subs	r3, r4, r3
 8007bf2:	441a      	add	r2, r3
 8007bf4:	9e00      	ldr	r6, [sp, #0]
 8007bf6:	9b03      	ldr	r3, [sp, #12]
 8007bf8:	920d      	str	r2, [sp, #52]	@ 0x34
 8007bfa:	2400      	movs	r4, #0
 8007bfc:	e721      	b.n	8007a42 <_dtoa_r+0x71a>
 8007bfe:	9c08      	ldr	r4, [sp, #32]
 8007c00:	9e00      	ldr	r6, [sp, #0]
 8007c02:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007c04:	e728      	b.n	8007a58 <_dtoa_r+0x730>
 8007c06:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007c0a:	e751      	b.n	8007ab0 <_dtoa_r+0x788>
 8007c0c:	9a08      	ldr	r2, [sp, #32]
 8007c0e:	9902      	ldr	r1, [sp, #8]
 8007c10:	e750      	b.n	8007ab4 <_dtoa_r+0x78c>
 8007c12:	f8cd 8008 	str.w	r8, [sp, #8]
 8007c16:	e751      	b.n	8007abc <_dtoa_r+0x794>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	e779      	b.n	8007b10 <_dtoa_r+0x7e8>
 8007c1c:	9b04      	ldr	r3, [sp, #16]
 8007c1e:	e777      	b.n	8007b10 <_dtoa_r+0x7e8>
 8007c20:	2300      	movs	r3, #0
 8007c22:	9308      	str	r3, [sp, #32]
 8007c24:	e779      	b.n	8007b1a <_dtoa_r+0x7f2>
 8007c26:	d093      	beq.n	8007b50 <_dtoa_r+0x828>
 8007c28:	9a00      	ldr	r2, [sp, #0]
 8007c2a:	331c      	adds	r3, #28
 8007c2c:	441a      	add	r2, r3
 8007c2e:	9200      	str	r2, [sp, #0]
 8007c30:	9a06      	ldr	r2, [sp, #24]
 8007c32:	441a      	add	r2, r3
 8007c34:	441e      	add	r6, r3
 8007c36:	9206      	str	r2, [sp, #24]
 8007c38:	e78a      	b.n	8007b50 <_dtoa_r+0x828>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	e7f4      	b.n	8007c28 <_dtoa_r+0x900>
 8007c3e:	9b03      	ldr	r3, [sp, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	46b8      	mov	r8, r7
 8007c44:	dc20      	bgt.n	8007c88 <_dtoa_r+0x960>
 8007c46:	469b      	mov	fp, r3
 8007c48:	9b07      	ldr	r3, [sp, #28]
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	dd1e      	ble.n	8007c8c <_dtoa_r+0x964>
 8007c4e:	f1bb 0f00 	cmp.w	fp, #0
 8007c52:	f47f adb1 	bne.w	80077b8 <_dtoa_r+0x490>
 8007c56:	4621      	mov	r1, r4
 8007c58:	465b      	mov	r3, fp
 8007c5a:	2205      	movs	r2, #5
 8007c5c:	4648      	mov	r0, r9
 8007c5e:	f000 fc39 	bl	80084d4 <__multadd>
 8007c62:	4601      	mov	r1, r0
 8007c64:	4604      	mov	r4, r0
 8007c66:	9802      	ldr	r0, [sp, #8]
 8007c68:	f000 fe44 	bl	80088f4 <__mcmp>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	f77f ada3 	ble.w	80077b8 <_dtoa_r+0x490>
 8007c72:	4656      	mov	r6, sl
 8007c74:	2331      	movs	r3, #49	@ 0x31
 8007c76:	f806 3b01 	strb.w	r3, [r6], #1
 8007c7a:	f108 0801 	add.w	r8, r8, #1
 8007c7e:	e59f      	b.n	80077c0 <_dtoa_r+0x498>
 8007c80:	9c03      	ldr	r4, [sp, #12]
 8007c82:	46b8      	mov	r8, r7
 8007c84:	4625      	mov	r5, r4
 8007c86:	e7f4      	b.n	8007c72 <_dtoa_r+0x94a>
 8007c88:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007c8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 8101 	beq.w	8007e96 <_dtoa_r+0xb6e>
 8007c94:	2e00      	cmp	r6, #0
 8007c96:	dd05      	ble.n	8007ca4 <_dtoa_r+0x97c>
 8007c98:	4629      	mov	r1, r5
 8007c9a:	4632      	mov	r2, r6
 8007c9c:	4648      	mov	r0, r9
 8007c9e:	f000 fdbd 	bl	800881c <__lshift>
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	9b08      	ldr	r3, [sp, #32]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d05c      	beq.n	8007d64 <_dtoa_r+0xa3c>
 8007caa:	6869      	ldr	r1, [r5, #4]
 8007cac:	4648      	mov	r0, r9
 8007cae:	f000 fbaf 	bl	8008410 <_Balloc>
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	b928      	cbnz	r0, 8007cc2 <_dtoa_r+0x99a>
 8007cb6:	4b82      	ldr	r3, [pc, #520]	@ (8007ec0 <_dtoa_r+0xb98>)
 8007cb8:	4602      	mov	r2, r0
 8007cba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007cbe:	f7ff bb4a 	b.w	8007356 <_dtoa_r+0x2e>
 8007cc2:	692a      	ldr	r2, [r5, #16]
 8007cc4:	3202      	adds	r2, #2
 8007cc6:	0092      	lsls	r2, r2, #2
 8007cc8:	f105 010c 	add.w	r1, r5, #12
 8007ccc:	300c      	adds	r0, #12
 8007cce:	f001 f8cb 	bl	8008e68 <memcpy>
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	4648      	mov	r0, r9
 8007cd8:	f000 fda0 	bl	800881c <__lshift>
 8007cdc:	f10a 0301 	add.w	r3, sl, #1
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	eb0a 030b 	add.w	r3, sl, fp
 8007ce6:	9308      	str	r3, [sp, #32]
 8007ce8:	9b04      	ldr	r3, [sp, #16]
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	462f      	mov	r7, r5
 8007cf0:	9306      	str	r3, [sp, #24]
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	9b00      	ldr	r3, [sp, #0]
 8007cf6:	9802      	ldr	r0, [sp, #8]
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8007cfe:	f7ff fa89 	bl	8007214 <quorem>
 8007d02:	4603      	mov	r3, r0
 8007d04:	3330      	adds	r3, #48	@ 0x30
 8007d06:	9003      	str	r0, [sp, #12]
 8007d08:	4639      	mov	r1, r7
 8007d0a:	9802      	ldr	r0, [sp, #8]
 8007d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d0e:	f000 fdf1 	bl	80088f4 <__mcmp>
 8007d12:	462a      	mov	r2, r5
 8007d14:	9004      	str	r0, [sp, #16]
 8007d16:	4621      	mov	r1, r4
 8007d18:	4648      	mov	r0, r9
 8007d1a:	f000 fe07 	bl	800892c <__mdiff>
 8007d1e:	68c2      	ldr	r2, [r0, #12]
 8007d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d22:	4606      	mov	r6, r0
 8007d24:	bb02      	cbnz	r2, 8007d68 <_dtoa_r+0xa40>
 8007d26:	4601      	mov	r1, r0
 8007d28:	9802      	ldr	r0, [sp, #8]
 8007d2a:	f000 fde3 	bl	80088f4 <__mcmp>
 8007d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d30:	4602      	mov	r2, r0
 8007d32:	4631      	mov	r1, r6
 8007d34:	4648      	mov	r0, r9
 8007d36:	920c      	str	r2, [sp, #48]	@ 0x30
 8007d38:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d3a:	f000 fba9 	bl	8008490 <_Bfree>
 8007d3e:	9b07      	ldr	r3, [sp, #28]
 8007d40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007d42:	9e00      	ldr	r6, [sp, #0]
 8007d44:	ea42 0103 	orr.w	r1, r2, r3
 8007d48:	9b06      	ldr	r3, [sp, #24]
 8007d4a:	4319      	orrs	r1, r3
 8007d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d4e:	d10d      	bne.n	8007d6c <_dtoa_r+0xa44>
 8007d50:	2b39      	cmp	r3, #57	@ 0x39
 8007d52:	d027      	beq.n	8007da4 <_dtoa_r+0xa7c>
 8007d54:	9a04      	ldr	r2, [sp, #16]
 8007d56:	2a00      	cmp	r2, #0
 8007d58:	dd01      	ble.n	8007d5e <_dtoa_r+0xa36>
 8007d5a:	9b03      	ldr	r3, [sp, #12]
 8007d5c:	3331      	adds	r3, #49	@ 0x31
 8007d5e:	f88b 3000 	strb.w	r3, [fp]
 8007d62:	e52e      	b.n	80077c2 <_dtoa_r+0x49a>
 8007d64:	4628      	mov	r0, r5
 8007d66:	e7b9      	b.n	8007cdc <_dtoa_r+0x9b4>
 8007d68:	2201      	movs	r2, #1
 8007d6a:	e7e2      	b.n	8007d32 <_dtoa_r+0xa0a>
 8007d6c:	9904      	ldr	r1, [sp, #16]
 8007d6e:	2900      	cmp	r1, #0
 8007d70:	db04      	blt.n	8007d7c <_dtoa_r+0xa54>
 8007d72:	9807      	ldr	r0, [sp, #28]
 8007d74:	4301      	orrs	r1, r0
 8007d76:	9806      	ldr	r0, [sp, #24]
 8007d78:	4301      	orrs	r1, r0
 8007d7a:	d120      	bne.n	8007dbe <_dtoa_r+0xa96>
 8007d7c:	2a00      	cmp	r2, #0
 8007d7e:	ddee      	ble.n	8007d5e <_dtoa_r+0xa36>
 8007d80:	9902      	ldr	r1, [sp, #8]
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	2201      	movs	r2, #1
 8007d86:	4648      	mov	r0, r9
 8007d88:	f000 fd48 	bl	800881c <__lshift>
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	9002      	str	r0, [sp, #8]
 8007d90:	f000 fdb0 	bl	80088f4 <__mcmp>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	9b00      	ldr	r3, [sp, #0]
 8007d98:	dc02      	bgt.n	8007da0 <_dtoa_r+0xa78>
 8007d9a:	d1e0      	bne.n	8007d5e <_dtoa_r+0xa36>
 8007d9c:	07da      	lsls	r2, r3, #31
 8007d9e:	d5de      	bpl.n	8007d5e <_dtoa_r+0xa36>
 8007da0:	2b39      	cmp	r3, #57	@ 0x39
 8007da2:	d1da      	bne.n	8007d5a <_dtoa_r+0xa32>
 8007da4:	2339      	movs	r3, #57	@ 0x39
 8007da6:	f88b 3000 	strb.w	r3, [fp]
 8007daa:	4633      	mov	r3, r6
 8007dac:	461e      	mov	r6, r3
 8007dae:	3b01      	subs	r3, #1
 8007db0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007db4:	2a39      	cmp	r2, #57	@ 0x39
 8007db6:	d04e      	beq.n	8007e56 <_dtoa_r+0xb2e>
 8007db8:	3201      	adds	r2, #1
 8007dba:	701a      	strb	r2, [r3, #0]
 8007dbc:	e501      	b.n	80077c2 <_dtoa_r+0x49a>
 8007dbe:	2a00      	cmp	r2, #0
 8007dc0:	dd03      	ble.n	8007dca <_dtoa_r+0xaa2>
 8007dc2:	2b39      	cmp	r3, #57	@ 0x39
 8007dc4:	d0ee      	beq.n	8007da4 <_dtoa_r+0xa7c>
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	e7c9      	b.n	8007d5e <_dtoa_r+0xa36>
 8007dca:	9a00      	ldr	r2, [sp, #0]
 8007dcc:	9908      	ldr	r1, [sp, #32]
 8007dce:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007dd2:	428a      	cmp	r2, r1
 8007dd4:	d028      	beq.n	8007e28 <_dtoa_r+0xb00>
 8007dd6:	9902      	ldr	r1, [sp, #8]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	220a      	movs	r2, #10
 8007ddc:	4648      	mov	r0, r9
 8007dde:	f000 fb79 	bl	80084d4 <__multadd>
 8007de2:	42af      	cmp	r7, r5
 8007de4:	9002      	str	r0, [sp, #8]
 8007de6:	f04f 0300 	mov.w	r3, #0
 8007dea:	f04f 020a 	mov.w	r2, #10
 8007dee:	4639      	mov	r1, r7
 8007df0:	4648      	mov	r0, r9
 8007df2:	d107      	bne.n	8007e04 <_dtoa_r+0xadc>
 8007df4:	f000 fb6e 	bl	80084d4 <__multadd>
 8007df8:	4607      	mov	r7, r0
 8007dfa:	4605      	mov	r5, r0
 8007dfc:	9b00      	ldr	r3, [sp, #0]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	e777      	b.n	8007cf4 <_dtoa_r+0x9cc>
 8007e04:	f000 fb66 	bl	80084d4 <__multadd>
 8007e08:	4629      	mov	r1, r5
 8007e0a:	4607      	mov	r7, r0
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	220a      	movs	r2, #10
 8007e10:	4648      	mov	r0, r9
 8007e12:	f000 fb5f 	bl	80084d4 <__multadd>
 8007e16:	4605      	mov	r5, r0
 8007e18:	e7f0      	b.n	8007dfc <_dtoa_r+0xad4>
 8007e1a:	f1bb 0f00 	cmp.w	fp, #0
 8007e1e:	bfcc      	ite	gt
 8007e20:	465e      	movgt	r6, fp
 8007e22:	2601      	movle	r6, #1
 8007e24:	4456      	add	r6, sl
 8007e26:	2700      	movs	r7, #0
 8007e28:	9902      	ldr	r1, [sp, #8]
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	4648      	mov	r0, r9
 8007e30:	f000 fcf4 	bl	800881c <__lshift>
 8007e34:	4621      	mov	r1, r4
 8007e36:	9002      	str	r0, [sp, #8]
 8007e38:	f000 fd5c 	bl	80088f4 <__mcmp>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	dcb4      	bgt.n	8007daa <_dtoa_r+0xa82>
 8007e40:	d102      	bne.n	8007e48 <_dtoa_r+0xb20>
 8007e42:	9b00      	ldr	r3, [sp, #0]
 8007e44:	07db      	lsls	r3, r3, #31
 8007e46:	d4b0      	bmi.n	8007daa <_dtoa_r+0xa82>
 8007e48:	4633      	mov	r3, r6
 8007e4a:	461e      	mov	r6, r3
 8007e4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e50:	2a30      	cmp	r2, #48	@ 0x30
 8007e52:	d0fa      	beq.n	8007e4a <_dtoa_r+0xb22>
 8007e54:	e4b5      	b.n	80077c2 <_dtoa_r+0x49a>
 8007e56:	459a      	cmp	sl, r3
 8007e58:	d1a8      	bne.n	8007dac <_dtoa_r+0xa84>
 8007e5a:	2331      	movs	r3, #49	@ 0x31
 8007e5c:	f108 0801 	add.w	r8, r8, #1
 8007e60:	f88a 3000 	strb.w	r3, [sl]
 8007e64:	e4ad      	b.n	80077c2 <_dtoa_r+0x49a>
 8007e66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e68:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007ec4 <_dtoa_r+0xb9c>
 8007e6c:	b11b      	cbz	r3, 8007e76 <_dtoa_r+0xb4e>
 8007e6e:	f10a 0308 	add.w	r3, sl, #8
 8007e72:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	4650      	mov	r0, sl
 8007e78:	b017      	add	sp, #92	@ 0x5c
 8007e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7e:	9b07      	ldr	r3, [sp, #28]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	f77f ae2e 	ble.w	8007ae2 <_dtoa_r+0x7ba>
 8007e86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e88:	9308      	str	r3, [sp, #32]
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	e64d      	b.n	8007b2a <_dtoa_r+0x802>
 8007e8e:	f1bb 0f00 	cmp.w	fp, #0
 8007e92:	f77f aed9 	ble.w	8007c48 <_dtoa_r+0x920>
 8007e96:	4656      	mov	r6, sl
 8007e98:	9802      	ldr	r0, [sp, #8]
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	f7ff f9ba 	bl	8007214 <quorem>
 8007ea0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007ea4:	f806 3b01 	strb.w	r3, [r6], #1
 8007ea8:	eba6 020a 	sub.w	r2, r6, sl
 8007eac:	4593      	cmp	fp, r2
 8007eae:	ddb4      	ble.n	8007e1a <_dtoa_r+0xaf2>
 8007eb0:	9902      	ldr	r1, [sp, #8]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	220a      	movs	r2, #10
 8007eb6:	4648      	mov	r0, r9
 8007eb8:	f000 fb0c 	bl	80084d4 <__multadd>
 8007ebc:	9002      	str	r0, [sp, #8]
 8007ebe:	e7eb      	b.n	8007e98 <_dtoa_r+0xb70>
 8007ec0:	0800a090 	.word	0x0800a090
 8007ec4:	0800a014 	.word	0x0800a014

08007ec8 <__sfputc_r>:
 8007ec8:	6893      	ldr	r3, [r2, #8]
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	b410      	push	{r4}
 8007ed0:	6093      	str	r3, [r2, #8]
 8007ed2:	da08      	bge.n	8007ee6 <__sfputc_r+0x1e>
 8007ed4:	6994      	ldr	r4, [r2, #24]
 8007ed6:	42a3      	cmp	r3, r4
 8007ed8:	db01      	blt.n	8007ede <__sfputc_r+0x16>
 8007eda:	290a      	cmp	r1, #10
 8007edc:	d103      	bne.n	8007ee6 <__sfputc_r+0x1e>
 8007ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ee2:	f000 be52 	b.w	8008b8a <__swbuf_r>
 8007ee6:	6813      	ldr	r3, [r2, #0]
 8007ee8:	1c58      	adds	r0, r3, #1
 8007eea:	6010      	str	r0, [r2, #0]
 8007eec:	7019      	strb	r1, [r3, #0]
 8007eee:	4608      	mov	r0, r1
 8007ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <__sfputs_r>:
 8007ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef8:	4606      	mov	r6, r0
 8007efa:	460f      	mov	r7, r1
 8007efc:	4614      	mov	r4, r2
 8007efe:	18d5      	adds	r5, r2, r3
 8007f00:	42ac      	cmp	r4, r5
 8007f02:	d101      	bne.n	8007f08 <__sfputs_r+0x12>
 8007f04:	2000      	movs	r0, #0
 8007f06:	e007      	b.n	8007f18 <__sfputs_r+0x22>
 8007f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f0c:	463a      	mov	r2, r7
 8007f0e:	4630      	mov	r0, r6
 8007f10:	f7ff ffda 	bl	8007ec8 <__sfputc_r>
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d1f3      	bne.n	8007f00 <__sfputs_r+0xa>
 8007f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f1c <_vfiprintf_r>:
 8007f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f20:	460d      	mov	r5, r1
 8007f22:	b09d      	sub	sp, #116	@ 0x74
 8007f24:	4614      	mov	r4, r2
 8007f26:	4698      	mov	r8, r3
 8007f28:	4606      	mov	r6, r0
 8007f2a:	b118      	cbz	r0, 8007f34 <_vfiprintf_r+0x18>
 8007f2c:	6a03      	ldr	r3, [r0, #32]
 8007f2e:	b90b      	cbnz	r3, 8007f34 <_vfiprintf_r+0x18>
 8007f30:	f7ff f900 	bl	8007134 <__sinit>
 8007f34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f36:	07d9      	lsls	r1, r3, #31
 8007f38:	d405      	bmi.n	8007f46 <_vfiprintf_r+0x2a>
 8007f3a:	89ab      	ldrh	r3, [r5, #12]
 8007f3c:	059a      	lsls	r2, r3, #22
 8007f3e:	d402      	bmi.n	8007f46 <_vfiprintf_r+0x2a>
 8007f40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f42:	f7ff f960 	bl	8007206 <__retarget_lock_acquire_recursive>
 8007f46:	89ab      	ldrh	r3, [r5, #12]
 8007f48:	071b      	lsls	r3, r3, #28
 8007f4a:	d501      	bpl.n	8007f50 <_vfiprintf_r+0x34>
 8007f4c:	692b      	ldr	r3, [r5, #16]
 8007f4e:	b99b      	cbnz	r3, 8007f78 <_vfiprintf_r+0x5c>
 8007f50:	4629      	mov	r1, r5
 8007f52:	4630      	mov	r0, r6
 8007f54:	f000 fe58 	bl	8008c08 <__swsetup_r>
 8007f58:	b170      	cbz	r0, 8007f78 <_vfiprintf_r+0x5c>
 8007f5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f5c:	07dc      	lsls	r4, r3, #31
 8007f5e:	d504      	bpl.n	8007f6a <_vfiprintf_r+0x4e>
 8007f60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f64:	b01d      	add	sp, #116	@ 0x74
 8007f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6a:	89ab      	ldrh	r3, [r5, #12]
 8007f6c:	0598      	lsls	r0, r3, #22
 8007f6e:	d4f7      	bmi.n	8007f60 <_vfiprintf_r+0x44>
 8007f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f72:	f7ff f949 	bl	8007208 <__retarget_lock_release_recursive>
 8007f76:	e7f3      	b.n	8007f60 <_vfiprintf_r+0x44>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f7c:	2320      	movs	r3, #32
 8007f7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f82:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f86:	2330      	movs	r3, #48	@ 0x30
 8007f88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008138 <_vfiprintf_r+0x21c>
 8007f8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f90:	f04f 0901 	mov.w	r9, #1
 8007f94:	4623      	mov	r3, r4
 8007f96:	469a      	mov	sl, r3
 8007f98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f9c:	b10a      	cbz	r2, 8007fa2 <_vfiprintf_r+0x86>
 8007f9e:	2a25      	cmp	r2, #37	@ 0x25
 8007fa0:	d1f9      	bne.n	8007f96 <_vfiprintf_r+0x7a>
 8007fa2:	ebba 0b04 	subs.w	fp, sl, r4
 8007fa6:	d00b      	beq.n	8007fc0 <_vfiprintf_r+0xa4>
 8007fa8:	465b      	mov	r3, fp
 8007faa:	4622      	mov	r2, r4
 8007fac:	4629      	mov	r1, r5
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f7ff ffa1 	bl	8007ef6 <__sfputs_r>
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	f000 80a7 	beq.w	8008108 <_vfiprintf_r+0x1ec>
 8007fba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fbc:	445a      	add	r2, fp
 8007fbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 809f 	beq.w	8008108 <_vfiprintf_r+0x1ec>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fd4:	f10a 0a01 	add.w	sl, sl, #1
 8007fd8:	9304      	str	r3, [sp, #16]
 8007fda:	9307      	str	r3, [sp, #28]
 8007fdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007fe0:	931a      	str	r3, [sp, #104]	@ 0x68
 8007fe2:	4654      	mov	r4, sl
 8007fe4:	2205      	movs	r2, #5
 8007fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fea:	4853      	ldr	r0, [pc, #332]	@ (8008138 <_vfiprintf_r+0x21c>)
 8007fec:	f7f8 f8f0 	bl	80001d0 <memchr>
 8007ff0:	9a04      	ldr	r2, [sp, #16]
 8007ff2:	b9d8      	cbnz	r0, 800802c <_vfiprintf_r+0x110>
 8007ff4:	06d1      	lsls	r1, r2, #27
 8007ff6:	bf44      	itt	mi
 8007ff8:	2320      	movmi	r3, #32
 8007ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ffe:	0713      	lsls	r3, r2, #28
 8008000:	bf44      	itt	mi
 8008002:	232b      	movmi	r3, #43	@ 0x2b
 8008004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008008:	f89a 3000 	ldrb.w	r3, [sl]
 800800c:	2b2a      	cmp	r3, #42	@ 0x2a
 800800e:	d015      	beq.n	800803c <_vfiprintf_r+0x120>
 8008010:	9a07      	ldr	r2, [sp, #28]
 8008012:	4654      	mov	r4, sl
 8008014:	2000      	movs	r0, #0
 8008016:	f04f 0c0a 	mov.w	ip, #10
 800801a:	4621      	mov	r1, r4
 800801c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008020:	3b30      	subs	r3, #48	@ 0x30
 8008022:	2b09      	cmp	r3, #9
 8008024:	d94b      	bls.n	80080be <_vfiprintf_r+0x1a2>
 8008026:	b1b0      	cbz	r0, 8008056 <_vfiprintf_r+0x13a>
 8008028:	9207      	str	r2, [sp, #28]
 800802a:	e014      	b.n	8008056 <_vfiprintf_r+0x13a>
 800802c:	eba0 0308 	sub.w	r3, r0, r8
 8008030:	fa09 f303 	lsl.w	r3, r9, r3
 8008034:	4313      	orrs	r3, r2
 8008036:	9304      	str	r3, [sp, #16]
 8008038:	46a2      	mov	sl, r4
 800803a:	e7d2      	b.n	8007fe2 <_vfiprintf_r+0xc6>
 800803c:	9b03      	ldr	r3, [sp, #12]
 800803e:	1d19      	adds	r1, r3, #4
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	9103      	str	r1, [sp, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	bfbb      	ittet	lt
 8008048:	425b      	neglt	r3, r3
 800804a:	f042 0202 	orrlt.w	r2, r2, #2
 800804e:	9307      	strge	r3, [sp, #28]
 8008050:	9307      	strlt	r3, [sp, #28]
 8008052:	bfb8      	it	lt
 8008054:	9204      	strlt	r2, [sp, #16]
 8008056:	7823      	ldrb	r3, [r4, #0]
 8008058:	2b2e      	cmp	r3, #46	@ 0x2e
 800805a:	d10a      	bne.n	8008072 <_vfiprintf_r+0x156>
 800805c:	7863      	ldrb	r3, [r4, #1]
 800805e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008060:	d132      	bne.n	80080c8 <_vfiprintf_r+0x1ac>
 8008062:	9b03      	ldr	r3, [sp, #12]
 8008064:	1d1a      	adds	r2, r3, #4
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	9203      	str	r2, [sp, #12]
 800806a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800806e:	3402      	adds	r4, #2
 8008070:	9305      	str	r3, [sp, #20]
 8008072:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008148 <_vfiprintf_r+0x22c>
 8008076:	7821      	ldrb	r1, [r4, #0]
 8008078:	2203      	movs	r2, #3
 800807a:	4650      	mov	r0, sl
 800807c:	f7f8 f8a8 	bl	80001d0 <memchr>
 8008080:	b138      	cbz	r0, 8008092 <_vfiprintf_r+0x176>
 8008082:	9b04      	ldr	r3, [sp, #16]
 8008084:	eba0 000a 	sub.w	r0, r0, sl
 8008088:	2240      	movs	r2, #64	@ 0x40
 800808a:	4082      	lsls	r2, r0
 800808c:	4313      	orrs	r3, r2
 800808e:	3401      	adds	r4, #1
 8008090:	9304      	str	r3, [sp, #16]
 8008092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008096:	4829      	ldr	r0, [pc, #164]	@ (800813c <_vfiprintf_r+0x220>)
 8008098:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800809c:	2206      	movs	r2, #6
 800809e:	f7f8 f897 	bl	80001d0 <memchr>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d03f      	beq.n	8008126 <_vfiprintf_r+0x20a>
 80080a6:	4b26      	ldr	r3, [pc, #152]	@ (8008140 <_vfiprintf_r+0x224>)
 80080a8:	bb1b      	cbnz	r3, 80080f2 <_vfiprintf_r+0x1d6>
 80080aa:	9b03      	ldr	r3, [sp, #12]
 80080ac:	3307      	adds	r3, #7
 80080ae:	f023 0307 	bic.w	r3, r3, #7
 80080b2:	3308      	adds	r3, #8
 80080b4:	9303      	str	r3, [sp, #12]
 80080b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080b8:	443b      	add	r3, r7
 80080ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80080bc:	e76a      	b.n	8007f94 <_vfiprintf_r+0x78>
 80080be:	fb0c 3202 	mla	r2, ip, r2, r3
 80080c2:	460c      	mov	r4, r1
 80080c4:	2001      	movs	r0, #1
 80080c6:	e7a8      	b.n	800801a <_vfiprintf_r+0xfe>
 80080c8:	2300      	movs	r3, #0
 80080ca:	3401      	adds	r4, #1
 80080cc:	9305      	str	r3, [sp, #20]
 80080ce:	4619      	mov	r1, r3
 80080d0:	f04f 0c0a 	mov.w	ip, #10
 80080d4:	4620      	mov	r0, r4
 80080d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080da:	3a30      	subs	r2, #48	@ 0x30
 80080dc:	2a09      	cmp	r2, #9
 80080de:	d903      	bls.n	80080e8 <_vfiprintf_r+0x1cc>
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0c6      	beq.n	8008072 <_vfiprintf_r+0x156>
 80080e4:	9105      	str	r1, [sp, #20]
 80080e6:	e7c4      	b.n	8008072 <_vfiprintf_r+0x156>
 80080e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80080ec:	4604      	mov	r4, r0
 80080ee:	2301      	movs	r3, #1
 80080f0:	e7f0      	b.n	80080d4 <_vfiprintf_r+0x1b8>
 80080f2:	ab03      	add	r3, sp, #12
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	462a      	mov	r2, r5
 80080f8:	4b12      	ldr	r3, [pc, #72]	@ (8008144 <_vfiprintf_r+0x228>)
 80080fa:	a904      	add	r1, sp, #16
 80080fc:	4630      	mov	r0, r6
 80080fe:	f7fe fbd7 	bl	80068b0 <_printf_float>
 8008102:	4607      	mov	r7, r0
 8008104:	1c78      	adds	r0, r7, #1
 8008106:	d1d6      	bne.n	80080b6 <_vfiprintf_r+0x19a>
 8008108:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800810a:	07d9      	lsls	r1, r3, #31
 800810c:	d405      	bmi.n	800811a <_vfiprintf_r+0x1fe>
 800810e:	89ab      	ldrh	r3, [r5, #12]
 8008110:	059a      	lsls	r2, r3, #22
 8008112:	d402      	bmi.n	800811a <_vfiprintf_r+0x1fe>
 8008114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008116:	f7ff f877 	bl	8007208 <__retarget_lock_release_recursive>
 800811a:	89ab      	ldrh	r3, [r5, #12]
 800811c:	065b      	lsls	r3, r3, #25
 800811e:	f53f af1f 	bmi.w	8007f60 <_vfiprintf_r+0x44>
 8008122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008124:	e71e      	b.n	8007f64 <_vfiprintf_r+0x48>
 8008126:	ab03      	add	r3, sp, #12
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	462a      	mov	r2, r5
 800812c:	4b05      	ldr	r3, [pc, #20]	@ (8008144 <_vfiprintf_r+0x228>)
 800812e:	a904      	add	r1, sp, #16
 8008130:	4630      	mov	r0, r6
 8008132:	f7fe fe55 	bl	8006de0 <_printf_i>
 8008136:	e7e4      	b.n	8008102 <_vfiprintf_r+0x1e6>
 8008138:	0800a0a1 	.word	0x0800a0a1
 800813c:	0800a0ab 	.word	0x0800a0ab
 8008140:	080068b1 	.word	0x080068b1
 8008144:	08007ef7 	.word	0x08007ef7
 8008148:	0800a0a7 	.word	0x0800a0a7

0800814c <malloc>:
 800814c:	4b02      	ldr	r3, [pc, #8]	@ (8008158 <malloc+0xc>)
 800814e:	4601      	mov	r1, r0
 8008150:	6818      	ldr	r0, [r3, #0]
 8008152:	f000 b825 	b.w	80081a0 <_malloc_r>
 8008156:	bf00      	nop
 8008158:	2000001c 	.word	0x2000001c

0800815c <sbrk_aligned>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	4e0f      	ldr	r6, [pc, #60]	@ (800819c <sbrk_aligned+0x40>)
 8008160:	460c      	mov	r4, r1
 8008162:	6831      	ldr	r1, [r6, #0]
 8008164:	4605      	mov	r5, r0
 8008166:	b911      	cbnz	r1, 800816e <sbrk_aligned+0x12>
 8008168:	f000 fe3a 	bl	8008de0 <_sbrk_r>
 800816c:	6030      	str	r0, [r6, #0]
 800816e:	4621      	mov	r1, r4
 8008170:	4628      	mov	r0, r5
 8008172:	f000 fe35 	bl	8008de0 <_sbrk_r>
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	d103      	bne.n	8008182 <sbrk_aligned+0x26>
 800817a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800817e:	4620      	mov	r0, r4
 8008180:	bd70      	pop	{r4, r5, r6, pc}
 8008182:	1cc4      	adds	r4, r0, #3
 8008184:	f024 0403 	bic.w	r4, r4, #3
 8008188:	42a0      	cmp	r0, r4
 800818a:	d0f8      	beq.n	800817e <sbrk_aligned+0x22>
 800818c:	1a21      	subs	r1, r4, r0
 800818e:	4628      	mov	r0, r5
 8008190:	f000 fe26 	bl	8008de0 <_sbrk_r>
 8008194:	3001      	adds	r0, #1
 8008196:	d1f2      	bne.n	800817e <sbrk_aligned+0x22>
 8008198:	e7ef      	b.n	800817a <sbrk_aligned+0x1e>
 800819a:	bf00      	nop
 800819c:	20002f98 	.word	0x20002f98

080081a0 <_malloc_r>:
 80081a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a4:	1ccd      	adds	r5, r1, #3
 80081a6:	f025 0503 	bic.w	r5, r5, #3
 80081aa:	3508      	adds	r5, #8
 80081ac:	2d0c      	cmp	r5, #12
 80081ae:	bf38      	it	cc
 80081b0:	250c      	movcc	r5, #12
 80081b2:	2d00      	cmp	r5, #0
 80081b4:	4606      	mov	r6, r0
 80081b6:	db01      	blt.n	80081bc <_malloc_r+0x1c>
 80081b8:	42a9      	cmp	r1, r5
 80081ba:	d904      	bls.n	80081c6 <_malloc_r+0x26>
 80081bc:	230c      	movs	r3, #12
 80081be:	6033      	str	r3, [r6, #0]
 80081c0:	2000      	movs	r0, #0
 80081c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800829c <_malloc_r+0xfc>
 80081ca:	f000 f915 	bl	80083f8 <__malloc_lock>
 80081ce:	f8d8 3000 	ldr.w	r3, [r8]
 80081d2:	461c      	mov	r4, r3
 80081d4:	bb44      	cbnz	r4, 8008228 <_malloc_r+0x88>
 80081d6:	4629      	mov	r1, r5
 80081d8:	4630      	mov	r0, r6
 80081da:	f7ff ffbf 	bl	800815c <sbrk_aligned>
 80081de:	1c43      	adds	r3, r0, #1
 80081e0:	4604      	mov	r4, r0
 80081e2:	d158      	bne.n	8008296 <_malloc_r+0xf6>
 80081e4:	f8d8 4000 	ldr.w	r4, [r8]
 80081e8:	4627      	mov	r7, r4
 80081ea:	2f00      	cmp	r7, #0
 80081ec:	d143      	bne.n	8008276 <_malloc_r+0xd6>
 80081ee:	2c00      	cmp	r4, #0
 80081f0:	d04b      	beq.n	800828a <_malloc_r+0xea>
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	4639      	mov	r1, r7
 80081f6:	4630      	mov	r0, r6
 80081f8:	eb04 0903 	add.w	r9, r4, r3
 80081fc:	f000 fdf0 	bl	8008de0 <_sbrk_r>
 8008200:	4581      	cmp	r9, r0
 8008202:	d142      	bne.n	800828a <_malloc_r+0xea>
 8008204:	6821      	ldr	r1, [r4, #0]
 8008206:	1a6d      	subs	r5, r5, r1
 8008208:	4629      	mov	r1, r5
 800820a:	4630      	mov	r0, r6
 800820c:	f7ff ffa6 	bl	800815c <sbrk_aligned>
 8008210:	3001      	adds	r0, #1
 8008212:	d03a      	beq.n	800828a <_malloc_r+0xea>
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	442b      	add	r3, r5
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	f8d8 3000 	ldr.w	r3, [r8]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	bb62      	cbnz	r2, 800827c <_malloc_r+0xdc>
 8008222:	f8c8 7000 	str.w	r7, [r8]
 8008226:	e00f      	b.n	8008248 <_malloc_r+0xa8>
 8008228:	6822      	ldr	r2, [r4, #0]
 800822a:	1b52      	subs	r2, r2, r5
 800822c:	d420      	bmi.n	8008270 <_malloc_r+0xd0>
 800822e:	2a0b      	cmp	r2, #11
 8008230:	d917      	bls.n	8008262 <_malloc_r+0xc2>
 8008232:	1961      	adds	r1, r4, r5
 8008234:	42a3      	cmp	r3, r4
 8008236:	6025      	str	r5, [r4, #0]
 8008238:	bf18      	it	ne
 800823a:	6059      	strne	r1, [r3, #4]
 800823c:	6863      	ldr	r3, [r4, #4]
 800823e:	bf08      	it	eq
 8008240:	f8c8 1000 	streq.w	r1, [r8]
 8008244:	5162      	str	r2, [r4, r5]
 8008246:	604b      	str	r3, [r1, #4]
 8008248:	4630      	mov	r0, r6
 800824a:	f000 f8db 	bl	8008404 <__malloc_unlock>
 800824e:	f104 000b 	add.w	r0, r4, #11
 8008252:	1d23      	adds	r3, r4, #4
 8008254:	f020 0007 	bic.w	r0, r0, #7
 8008258:	1ac2      	subs	r2, r0, r3
 800825a:	bf1c      	itt	ne
 800825c:	1a1b      	subne	r3, r3, r0
 800825e:	50a3      	strne	r3, [r4, r2]
 8008260:	e7af      	b.n	80081c2 <_malloc_r+0x22>
 8008262:	6862      	ldr	r2, [r4, #4]
 8008264:	42a3      	cmp	r3, r4
 8008266:	bf0c      	ite	eq
 8008268:	f8c8 2000 	streq.w	r2, [r8]
 800826c:	605a      	strne	r2, [r3, #4]
 800826e:	e7eb      	b.n	8008248 <_malloc_r+0xa8>
 8008270:	4623      	mov	r3, r4
 8008272:	6864      	ldr	r4, [r4, #4]
 8008274:	e7ae      	b.n	80081d4 <_malloc_r+0x34>
 8008276:	463c      	mov	r4, r7
 8008278:	687f      	ldr	r7, [r7, #4]
 800827a:	e7b6      	b.n	80081ea <_malloc_r+0x4a>
 800827c:	461a      	mov	r2, r3
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	42a3      	cmp	r3, r4
 8008282:	d1fb      	bne.n	800827c <_malloc_r+0xdc>
 8008284:	2300      	movs	r3, #0
 8008286:	6053      	str	r3, [r2, #4]
 8008288:	e7de      	b.n	8008248 <_malloc_r+0xa8>
 800828a:	230c      	movs	r3, #12
 800828c:	6033      	str	r3, [r6, #0]
 800828e:	4630      	mov	r0, r6
 8008290:	f000 f8b8 	bl	8008404 <__malloc_unlock>
 8008294:	e794      	b.n	80081c0 <_malloc_r+0x20>
 8008296:	6005      	str	r5, [r0, #0]
 8008298:	e7d6      	b.n	8008248 <_malloc_r+0xa8>
 800829a:	bf00      	nop
 800829c:	20002f9c 	.word	0x20002f9c

080082a0 <__sflush_r>:
 80082a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a8:	0716      	lsls	r6, r2, #28
 80082aa:	4605      	mov	r5, r0
 80082ac:	460c      	mov	r4, r1
 80082ae:	d454      	bmi.n	800835a <__sflush_r+0xba>
 80082b0:	684b      	ldr	r3, [r1, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	dc02      	bgt.n	80082bc <__sflush_r+0x1c>
 80082b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	dd48      	ble.n	800834e <__sflush_r+0xae>
 80082bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082be:	2e00      	cmp	r6, #0
 80082c0:	d045      	beq.n	800834e <__sflush_r+0xae>
 80082c2:	2300      	movs	r3, #0
 80082c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082c8:	682f      	ldr	r7, [r5, #0]
 80082ca:	6a21      	ldr	r1, [r4, #32]
 80082cc:	602b      	str	r3, [r5, #0]
 80082ce:	d030      	beq.n	8008332 <__sflush_r+0x92>
 80082d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	0759      	lsls	r1, r3, #29
 80082d6:	d505      	bpl.n	80082e4 <__sflush_r+0x44>
 80082d8:	6863      	ldr	r3, [r4, #4]
 80082da:	1ad2      	subs	r2, r2, r3
 80082dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082de:	b10b      	cbz	r3, 80082e4 <__sflush_r+0x44>
 80082e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082e2:	1ad2      	subs	r2, r2, r3
 80082e4:	2300      	movs	r3, #0
 80082e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082e8:	6a21      	ldr	r1, [r4, #32]
 80082ea:	4628      	mov	r0, r5
 80082ec:	47b0      	blx	r6
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	d106      	bne.n	8008302 <__sflush_r+0x62>
 80082f4:	6829      	ldr	r1, [r5, #0]
 80082f6:	291d      	cmp	r1, #29
 80082f8:	d82b      	bhi.n	8008352 <__sflush_r+0xb2>
 80082fa:	4a2a      	ldr	r2, [pc, #168]	@ (80083a4 <__sflush_r+0x104>)
 80082fc:	40ca      	lsrs	r2, r1
 80082fe:	07d6      	lsls	r6, r2, #31
 8008300:	d527      	bpl.n	8008352 <__sflush_r+0xb2>
 8008302:	2200      	movs	r2, #0
 8008304:	6062      	str	r2, [r4, #4]
 8008306:	04d9      	lsls	r1, r3, #19
 8008308:	6922      	ldr	r2, [r4, #16]
 800830a:	6022      	str	r2, [r4, #0]
 800830c:	d504      	bpl.n	8008318 <__sflush_r+0x78>
 800830e:	1c42      	adds	r2, r0, #1
 8008310:	d101      	bne.n	8008316 <__sflush_r+0x76>
 8008312:	682b      	ldr	r3, [r5, #0]
 8008314:	b903      	cbnz	r3, 8008318 <__sflush_r+0x78>
 8008316:	6560      	str	r0, [r4, #84]	@ 0x54
 8008318:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800831a:	602f      	str	r7, [r5, #0]
 800831c:	b1b9      	cbz	r1, 800834e <__sflush_r+0xae>
 800831e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008322:	4299      	cmp	r1, r3
 8008324:	d002      	beq.n	800832c <__sflush_r+0x8c>
 8008326:	4628      	mov	r0, r5
 8008328:	f000 fdde 	bl	8008ee8 <_free_r>
 800832c:	2300      	movs	r3, #0
 800832e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008330:	e00d      	b.n	800834e <__sflush_r+0xae>
 8008332:	2301      	movs	r3, #1
 8008334:	4628      	mov	r0, r5
 8008336:	47b0      	blx	r6
 8008338:	4602      	mov	r2, r0
 800833a:	1c50      	adds	r0, r2, #1
 800833c:	d1c9      	bne.n	80082d2 <__sflush_r+0x32>
 800833e:	682b      	ldr	r3, [r5, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0c6      	beq.n	80082d2 <__sflush_r+0x32>
 8008344:	2b1d      	cmp	r3, #29
 8008346:	d001      	beq.n	800834c <__sflush_r+0xac>
 8008348:	2b16      	cmp	r3, #22
 800834a:	d11e      	bne.n	800838a <__sflush_r+0xea>
 800834c:	602f      	str	r7, [r5, #0]
 800834e:	2000      	movs	r0, #0
 8008350:	e022      	b.n	8008398 <__sflush_r+0xf8>
 8008352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008356:	b21b      	sxth	r3, r3
 8008358:	e01b      	b.n	8008392 <__sflush_r+0xf2>
 800835a:	690f      	ldr	r7, [r1, #16]
 800835c:	2f00      	cmp	r7, #0
 800835e:	d0f6      	beq.n	800834e <__sflush_r+0xae>
 8008360:	0793      	lsls	r3, r2, #30
 8008362:	680e      	ldr	r6, [r1, #0]
 8008364:	bf08      	it	eq
 8008366:	694b      	ldreq	r3, [r1, #20]
 8008368:	600f      	str	r7, [r1, #0]
 800836a:	bf18      	it	ne
 800836c:	2300      	movne	r3, #0
 800836e:	eba6 0807 	sub.w	r8, r6, r7
 8008372:	608b      	str	r3, [r1, #8]
 8008374:	f1b8 0f00 	cmp.w	r8, #0
 8008378:	dde9      	ble.n	800834e <__sflush_r+0xae>
 800837a:	6a21      	ldr	r1, [r4, #32]
 800837c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800837e:	4643      	mov	r3, r8
 8008380:	463a      	mov	r2, r7
 8008382:	4628      	mov	r0, r5
 8008384:	47b0      	blx	r6
 8008386:	2800      	cmp	r0, #0
 8008388:	dc08      	bgt.n	800839c <__sflush_r+0xfc>
 800838a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800838e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008392:	81a3      	strh	r3, [r4, #12]
 8008394:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800839c:	4407      	add	r7, r0
 800839e:	eba8 0800 	sub.w	r8, r8, r0
 80083a2:	e7e7      	b.n	8008374 <__sflush_r+0xd4>
 80083a4:	20400001 	.word	0x20400001

080083a8 <_fflush_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	690b      	ldr	r3, [r1, #16]
 80083ac:	4605      	mov	r5, r0
 80083ae:	460c      	mov	r4, r1
 80083b0:	b913      	cbnz	r3, 80083b8 <_fflush_r+0x10>
 80083b2:	2500      	movs	r5, #0
 80083b4:	4628      	mov	r0, r5
 80083b6:	bd38      	pop	{r3, r4, r5, pc}
 80083b8:	b118      	cbz	r0, 80083c2 <_fflush_r+0x1a>
 80083ba:	6a03      	ldr	r3, [r0, #32]
 80083bc:	b90b      	cbnz	r3, 80083c2 <_fflush_r+0x1a>
 80083be:	f7fe feb9 	bl	8007134 <__sinit>
 80083c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d0f3      	beq.n	80083b2 <_fflush_r+0xa>
 80083ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083cc:	07d0      	lsls	r0, r2, #31
 80083ce:	d404      	bmi.n	80083da <_fflush_r+0x32>
 80083d0:	0599      	lsls	r1, r3, #22
 80083d2:	d402      	bmi.n	80083da <_fflush_r+0x32>
 80083d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083d6:	f7fe ff16 	bl	8007206 <__retarget_lock_acquire_recursive>
 80083da:	4628      	mov	r0, r5
 80083dc:	4621      	mov	r1, r4
 80083de:	f7ff ff5f 	bl	80082a0 <__sflush_r>
 80083e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083e4:	07da      	lsls	r2, r3, #31
 80083e6:	4605      	mov	r5, r0
 80083e8:	d4e4      	bmi.n	80083b4 <_fflush_r+0xc>
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	059b      	lsls	r3, r3, #22
 80083ee:	d4e1      	bmi.n	80083b4 <_fflush_r+0xc>
 80083f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083f2:	f7fe ff09 	bl	8007208 <__retarget_lock_release_recursive>
 80083f6:	e7dd      	b.n	80083b4 <_fflush_r+0xc>

080083f8 <__malloc_lock>:
 80083f8:	4801      	ldr	r0, [pc, #4]	@ (8008400 <__malloc_lock+0x8>)
 80083fa:	f7fe bf04 	b.w	8007206 <__retarget_lock_acquire_recursive>
 80083fe:	bf00      	nop
 8008400:	20002f94 	.word	0x20002f94

08008404 <__malloc_unlock>:
 8008404:	4801      	ldr	r0, [pc, #4]	@ (800840c <__malloc_unlock+0x8>)
 8008406:	f7fe beff 	b.w	8007208 <__retarget_lock_release_recursive>
 800840a:	bf00      	nop
 800840c:	20002f94 	.word	0x20002f94

08008410 <_Balloc>:
 8008410:	b570      	push	{r4, r5, r6, lr}
 8008412:	69c6      	ldr	r6, [r0, #28]
 8008414:	4604      	mov	r4, r0
 8008416:	460d      	mov	r5, r1
 8008418:	b976      	cbnz	r6, 8008438 <_Balloc+0x28>
 800841a:	2010      	movs	r0, #16
 800841c:	f7ff fe96 	bl	800814c <malloc>
 8008420:	4602      	mov	r2, r0
 8008422:	61e0      	str	r0, [r4, #28]
 8008424:	b920      	cbnz	r0, 8008430 <_Balloc+0x20>
 8008426:	4b18      	ldr	r3, [pc, #96]	@ (8008488 <_Balloc+0x78>)
 8008428:	4818      	ldr	r0, [pc, #96]	@ (800848c <_Balloc+0x7c>)
 800842a:	216b      	movs	r1, #107	@ 0x6b
 800842c:	f000 fd2a 	bl	8008e84 <__assert_func>
 8008430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008434:	6006      	str	r6, [r0, #0]
 8008436:	60c6      	str	r6, [r0, #12]
 8008438:	69e6      	ldr	r6, [r4, #28]
 800843a:	68f3      	ldr	r3, [r6, #12]
 800843c:	b183      	cbz	r3, 8008460 <_Balloc+0x50>
 800843e:	69e3      	ldr	r3, [r4, #28]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008446:	b9b8      	cbnz	r0, 8008478 <_Balloc+0x68>
 8008448:	2101      	movs	r1, #1
 800844a:	fa01 f605 	lsl.w	r6, r1, r5
 800844e:	1d72      	adds	r2, r6, #5
 8008450:	0092      	lsls	r2, r2, #2
 8008452:	4620      	mov	r0, r4
 8008454:	f000 fd34 	bl	8008ec0 <_calloc_r>
 8008458:	b160      	cbz	r0, 8008474 <_Balloc+0x64>
 800845a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800845e:	e00e      	b.n	800847e <_Balloc+0x6e>
 8008460:	2221      	movs	r2, #33	@ 0x21
 8008462:	2104      	movs	r1, #4
 8008464:	4620      	mov	r0, r4
 8008466:	f000 fd2b 	bl	8008ec0 <_calloc_r>
 800846a:	69e3      	ldr	r3, [r4, #28]
 800846c:	60f0      	str	r0, [r6, #12]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1e4      	bne.n	800843e <_Balloc+0x2e>
 8008474:	2000      	movs	r0, #0
 8008476:	bd70      	pop	{r4, r5, r6, pc}
 8008478:	6802      	ldr	r2, [r0, #0]
 800847a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800847e:	2300      	movs	r3, #0
 8008480:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008484:	e7f7      	b.n	8008476 <_Balloc+0x66>
 8008486:	bf00      	nop
 8008488:	0800a021 	.word	0x0800a021
 800848c:	0800a0b2 	.word	0x0800a0b2

08008490 <_Bfree>:
 8008490:	b570      	push	{r4, r5, r6, lr}
 8008492:	69c6      	ldr	r6, [r0, #28]
 8008494:	4605      	mov	r5, r0
 8008496:	460c      	mov	r4, r1
 8008498:	b976      	cbnz	r6, 80084b8 <_Bfree+0x28>
 800849a:	2010      	movs	r0, #16
 800849c:	f7ff fe56 	bl	800814c <malloc>
 80084a0:	4602      	mov	r2, r0
 80084a2:	61e8      	str	r0, [r5, #28]
 80084a4:	b920      	cbnz	r0, 80084b0 <_Bfree+0x20>
 80084a6:	4b09      	ldr	r3, [pc, #36]	@ (80084cc <_Bfree+0x3c>)
 80084a8:	4809      	ldr	r0, [pc, #36]	@ (80084d0 <_Bfree+0x40>)
 80084aa:	218f      	movs	r1, #143	@ 0x8f
 80084ac:	f000 fcea 	bl	8008e84 <__assert_func>
 80084b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084b4:	6006      	str	r6, [r0, #0]
 80084b6:	60c6      	str	r6, [r0, #12]
 80084b8:	b13c      	cbz	r4, 80084ca <_Bfree+0x3a>
 80084ba:	69eb      	ldr	r3, [r5, #28]
 80084bc:	6862      	ldr	r2, [r4, #4]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084c4:	6021      	str	r1, [r4, #0]
 80084c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084ca:	bd70      	pop	{r4, r5, r6, pc}
 80084cc:	0800a021 	.word	0x0800a021
 80084d0:	0800a0b2 	.word	0x0800a0b2

080084d4 <__multadd>:
 80084d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084d8:	690d      	ldr	r5, [r1, #16]
 80084da:	4607      	mov	r7, r0
 80084dc:	460c      	mov	r4, r1
 80084de:	461e      	mov	r6, r3
 80084e0:	f101 0c14 	add.w	ip, r1, #20
 80084e4:	2000      	movs	r0, #0
 80084e6:	f8dc 3000 	ldr.w	r3, [ip]
 80084ea:	b299      	uxth	r1, r3
 80084ec:	fb02 6101 	mla	r1, r2, r1, r6
 80084f0:	0c1e      	lsrs	r6, r3, #16
 80084f2:	0c0b      	lsrs	r3, r1, #16
 80084f4:	fb02 3306 	mla	r3, r2, r6, r3
 80084f8:	b289      	uxth	r1, r1
 80084fa:	3001      	adds	r0, #1
 80084fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008500:	4285      	cmp	r5, r0
 8008502:	f84c 1b04 	str.w	r1, [ip], #4
 8008506:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800850a:	dcec      	bgt.n	80084e6 <__multadd+0x12>
 800850c:	b30e      	cbz	r6, 8008552 <__multadd+0x7e>
 800850e:	68a3      	ldr	r3, [r4, #8]
 8008510:	42ab      	cmp	r3, r5
 8008512:	dc19      	bgt.n	8008548 <__multadd+0x74>
 8008514:	6861      	ldr	r1, [r4, #4]
 8008516:	4638      	mov	r0, r7
 8008518:	3101      	adds	r1, #1
 800851a:	f7ff ff79 	bl	8008410 <_Balloc>
 800851e:	4680      	mov	r8, r0
 8008520:	b928      	cbnz	r0, 800852e <__multadd+0x5a>
 8008522:	4602      	mov	r2, r0
 8008524:	4b0c      	ldr	r3, [pc, #48]	@ (8008558 <__multadd+0x84>)
 8008526:	480d      	ldr	r0, [pc, #52]	@ (800855c <__multadd+0x88>)
 8008528:	21ba      	movs	r1, #186	@ 0xba
 800852a:	f000 fcab 	bl	8008e84 <__assert_func>
 800852e:	6922      	ldr	r2, [r4, #16]
 8008530:	3202      	adds	r2, #2
 8008532:	f104 010c 	add.w	r1, r4, #12
 8008536:	0092      	lsls	r2, r2, #2
 8008538:	300c      	adds	r0, #12
 800853a:	f000 fc95 	bl	8008e68 <memcpy>
 800853e:	4621      	mov	r1, r4
 8008540:	4638      	mov	r0, r7
 8008542:	f7ff ffa5 	bl	8008490 <_Bfree>
 8008546:	4644      	mov	r4, r8
 8008548:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800854c:	3501      	adds	r5, #1
 800854e:	615e      	str	r6, [r3, #20]
 8008550:	6125      	str	r5, [r4, #16]
 8008552:	4620      	mov	r0, r4
 8008554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008558:	0800a090 	.word	0x0800a090
 800855c:	0800a0b2 	.word	0x0800a0b2

08008560 <__hi0bits>:
 8008560:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008564:	4603      	mov	r3, r0
 8008566:	bf36      	itet	cc
 8008568:	0403      	lslcc	r3, r0, #16
 800856a:	2000      	movcs	r0, #0
 800856c:	2010      	movcc	r0, #16
 800856e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008572:	bf3c      	itt	cc
 8008574:	021b      	lslcc	r3, r3, #8
 8008576:	3008      	addcc	r0, #8
 8008578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800857c:	bf3c      	itt	cc
 800857e:	011b      	lslcc	r3, r3, #4
 8008580:	3004      	addcc	r0, #4
 8008582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008586:	bf3c      	itt	cc
 8008588:	009b      	lslcc	r3, r3, #2
 800858a:	3002      	addcc	r0, #2
 800858c:	2b00      	cmp	r3, #0
 800858e:	db05      	blt.n	800859c <__hi0bits+0x3c>
 8008590:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008594:	f100 0001 	add.w	r0, r0, #1
 8008598:	bf08      	it	eq
 800859a:	2020      	moveq	r0, #32
 800859c:	4770      	bx	lr

0800859e <__lo0bits>:
 800859e:	6803      	ldr	r3, [r0, #0]
 80085a0:	4602      	mov	r2, r0
 80085a2:	f013 0007 	ands.w	r0, r3, #7
 80085a6:	d00b      	beq.n	80085c0 <__lo0bits+0x22>
 80085a8:	07d9      	lsls	r1, r3, #31
 80085aa:	d421      	bmi.n	80085f0 <__lo0bits+0x52>
 80085ac:	0798      	lsls	r0, r3, #30
 80085ae:	bf49      	itett	mi
 80085b0:	085b      	lsrmi	r3, r3, #1
 80085b2:	089b      	lsrpl	r3, r3, #2
 80085b4:	2001      	movmi	r0, #1
 80085b6:	6013      	strmi	r3, [r2, #0]
 80085b8:	bf5c      	itt	pl
 80085ba:	6013      	strpl	r3, [r2, #0]
 80085bc:	2002      	movpl	r0, #2
 80085be:	4770      	bx	lr
 80085c0:	b299      	uxth	r1, r3
 80085c2:	b909      	cbnz	r1, 80085c8 <__lo0bits+0x2a>
 80085c4:	0c1b      	lsrs	r3, r3, #16
 80085c6:	2010      	movs	r0, #16
 80085c8:	b2d9      	uxtb	r1, r3
 80085ca:	b909      	cbnz	r1, 80085d0 <__lo0bits+0x32>
 80085cc:	3008      	adds	r0, #8
 80085ce:	0a1b      	lsrs	r3, r3, #8
 80085d0:	0719      	lsls	r1, r3, #28
 80085d2:	bf04      	itt	eq
 80085d4:	091b      	lsreq	r3, r3, #4
 80085d6:	3004      	addeq	r0, #4
 80085d8:	0799      	lsls	r1, r3, #30
 80085da:	bf04      	itt	eq
 80085dc:	089b      	lsreq	r3, r3, #2
 80085de:	3002      	addeq	r0, #2
 80085e0:	07d9      	lsls	r1, r3, #31
 80085e2:	d403      	bmi.n	80085ec <__lo0bits+0x4e>
 80085e4:	085b      	lsrs	r3, r3, #1
 80085e6:	f100 0001 	add.w	r0, r0, #1
 80085ea:	d003      	beq.n	80085f4 <__lo0bits+0x56>
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	4770      	bx	lr
 80085f0:	2000      	movs	r0, #0
 80085f2:	4770      	bx	lr
 80085f4:	2020      	movs	r0, #32
 80085f6:	4770      	bx	lr

080085f8 <__i2b>:
 80085f8:	b510      	push	{r4, lr}
 80085fa:	460c      	mov	r4, r1
 80085fc:	2101      	movs	r1, #1
 80085fe:	f7ff ff07 	bl	8008410 <_Balloc>
 8008602:	4602      	mov	r2, r0
 8008604:	b928      	cbnz	r0, 8008612 <__i2b+0x1a>
 8008606:	4b05      	ldr	r3, [pc, #20]	@ (800861c <__i2b+0x24>)
 8008608:	4805      	ldr	r0, [pc, #20]	@ (8008620 <__i2b+0x28>)
 800860a:	f240 1145 	movw	r1, #325	@ 0x145
 800860e:	f000 fc39 	bl	8008e84 <__assert_func>
 8008612:	2301      	movs	r3, #1
 8008614:	6144      	str	r4, [r0, #20]
 8008616:	6103      	str	r3, [r0, #16]
 8008618:	bd10      	pop	{r4, pc}
 800861a:	bf00      	nop
 800861c:	0800a090 	.word	0x0800a090
 8008620:	0800a0b2 	.word	0x0800a0b2

08008624 <__multiply>:
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	4617      	mov	r7, r2
 800862a:	690a      	ldr	r2, [r1, #16]
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	429a      	cmp	r2, r3
 8008630:	bfa8      	it	ge
 8008632:	463b      	movge	r3, r7
 8008634:	4689      	mov	r9, r1
 8008636:	bfa4      	itt	ge
 8008638:	460f      	movge	r7, r1
 800863a:	4699      	movge	r9, r3
 800863c:	693d      	ldr	r5, [r7, #16]
 800863e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	6879      	ldr	r1, [r7, #4]
 8008646:	eb05 060a 	add.w	r6, r5, sl
 800864a:	42b3      	cmp	r3, r6
 800864c:	b085      	sub	sp, #20
 800864e:	bfb8      	it	lt
 8008650:	3101      	addlt	r1, #1
 8008652:	f7ff fedd 	bl	8008410 <_Balloc>
 8008656:	b930      	cbnz	r0, 8008666 <__multiply+0x42>
 8008658:	4602      	mov	r2, r0
 800865a:	4b41      	ldr	r3, [pc, #260]	@ (8008760 <__multiply+0x13c>)
 800865c:	4841      	ldr	r0, [pc, #260]	@ (8008764 <__multiply+0x140>)
 800865e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008662:	f000 fc0f 	bl	8008e84 <__assert_func>
 8008666:	f100 0414 	add.w	r4, r0, #20
 800866a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800866e:	4623      	mov	r3, r4
 8008670:	2200      	movs	r2, #0
 8008672:	4573      	cmp	r3, lr
 8008674:	d320      	bcc.n	80086b8 <__multiply+0x94>
 8008676:	f107 0814 	add.w	r8, r7, #20
 800867a:	f109 0114 	add.w	r1, r9, #20
 800867e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008682:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008686:	9302      	str	r3, [sp, #8]
 8008688:	1beb      	subs	r3, r5, r7
 800868a:	3b15      	subs	r3, #21
 800868c:	f023 0303 	bic.w	r3, r3, #3
 8008690:	3304      	adds	r3, #4
 8008692:	3715      	adds	r7, #21
 8008694:	42bd      	cmp	r5, r7
 8008696:	bf38      	it	cc
 8008698:	2304      	movcc	r3, #4
 800869a:	9301      	str	r3, [sp, #4]
 800869c:	9b02      	ldr	r3, [sp, #8]
 800869e:	9103      	str	r1, [sp, #12]
 80086a0:	428b      	cmp	r3, r1
 80086a2:	d80c      	bhi.n	80086be <__multiply+0x9a>
 80086a4:	2e00      	cmp	r6, #0
 80086a6:	dd03      	ble.n	80086b0 <__multiply+0x8c>
 80086a8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d055      	beq.n	800875c <__multiply+0x138>
 80086b0:	6106      	str	r6, [r0, #16]
 80086b2:	b005      	add	sp, #20
 80086b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b8:	f843 2b04 	str.w	r2, [r3], #4
 80086bc:	e7d9      	b.n	8008672 <__multiply+0x4e>
 80086be:	f8b1 a000 	ldrh.w	sl, [r1]
 80086c2:	f1ba 0f00 	cmp.w	sl, #0
 80086c6:	d01f      	beq.n	8008708 <__multiply+0xe4>
 80086c8:	46c4      	mov	ip, r8
 80086ca:	46a1      	mov	r9, r4
 80086cc:	2700      	movs	r7, #0
 80086ce:	f85c 2b04 	ldr.w	r2, [ip], #4
 80086d2:	f8d9 3000 	ldr.w	r3, [r9]
 80086d6:	fa1f fb82 	uxth.w	fp, r2
 80086da:	b29b      	uxth	r3, r3
 80086dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80086e0:	443b      	add	r3, r7
 80086e2:	f8d9 7000 	ldr.w	r7, [r9]
 80086e6:	0c12      	lsrs	r2, r2, #16
 80086e8:	0c3f      	lsrs	r7, r7, #16
 80086ea:	fb0a 7202 	mla	r2, sl, r2, r7
 80086ee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086f8:	4565      	cmp	r5, ip
 80086fa:	f849 3b04 	str.w	r3, [r9], #4
 80086fe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008702:	d8e4      	bhi.n	80086ce <__multiply+0xaa>
 8008704:	9b01      	ldr	r3, [sp, #4]
 8008706:	50e7      	str	r7, [r4, r3]
 8008708:	9b03      	ldr	r3, [sp, #12]
 800870a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800870e:	3104      	adds	r1, #4
 8008710:	f1b9 0f00 	cmp.w	r9, #0
 8008714:	d020      	beq.n	8008758 <__multiply+0x134>
 8008716:	6823      	ldr	r3, [r4, #0]
 8008718:	4647      	mov	r7, r8
 800871a:	46a4      	mov	ip, r4
 800871c:	f04f 0a00 	mov.w	sl, #0
 8008720:	f8b7 b000 	ldrh.w	fp, [r7]
 8008724:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008728:	fb09 220b 	mla	r2, r9, fp, r2
 800872c:	4452      	add	r2, sl
 800872e:	b29b      	uxth	r3, r3
 8008730:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008734:	f84c 3b04 	str.w	r3, [ip], #4
 8008738:	f857 3b04 	ldr.w	r3, [r7], #4
 800873c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008740:	f8bc 3000 	ldrh.w	r3, [ip]
 8008744:	fb09 330a 	mla	r3, r9, sl, r3
 8008748:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800874c:	42bd      	cmp	r5, r7
 800874e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008752:	d8e5      	bhi.n	8008720 <__multiply+0xfc>
 8008754:	9a01      	ldr	r2, [sp, #4]
 8008756:	50a3      	str	r3, [r4, r2]
 8008758:	3404      	adds	r4, #4
 800875a:	e79f      	b.n	800869c <__multiply+0x78>
 800875c:	3e01      	subs	r6, #1
 800875e:	e7a1      	b.n	80086a4 <__multiply+0x80>
 8008760:	0800a090 	.word	0x0800a090
 8008764:	0800a0b2 	.word	0x0800a0b2

08008768 <__pow5mult>:
 8008768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800876c:	4615      	mov	r5, r2
 800876e:	f012 0203 	ands.w	r2, r2, #3
 8008772:	4607      	mov	r7, r0
 8008774:	460e      	mov	r6, r1
 8008776:	d007      	beq.n	8008788 <__pow5mult+0x20>
 8008778:	4c25      	ldr	r4, [pc, #148]	@ (8008810 <__pow5mult+0xa8>)
 800877a:	3a01      	subs	r2, #1
 800877c:	2300      	movs	r3, #0
 800877e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008782:	f7ff fea7 	bl	80084d4 <__multadd>
 8008786:	4606      	mov	r6, r0
 8008788:	10ad      	asrs	r5, r5, #2
 800878a:	d03d      	beq.n	8008808 <__pow5mult+0xa0>
 800878c:	69fc      	ldr	r4, [r7, #28]
 800878e:	b97c      	cbnz	r4, 80087b0 <__pow5mult+0x48>
 8008790:	2010      	movs	r0, #16
 8008792:	f7ff fcdb 	bl	800814c <malloc>
 8008796:	4602      	mov	r2, r0
 8008798:	61f8      	str	r0, [r7, #28]
 800879a:	b928      	cbnz	r0, 80087a8 <__pow5mult+0x40>
 800879c:	4b1d      	ldr	r3, [pc, #116]	@ (8008814 <__pow5mult+0xac>)
 800879e:	481e      	ldr	r0, [pc, #120]	@ (8008818 <__pow5mult+0xb0>)
 80087a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80087a4:	f000 fb6e 	bl	8008e84 <__assert_func>
 80087a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087ac:	6004      	str	r4, [r0, #0]
 80087ae:	60c4      	str	r4, [r0, #12]
 80087b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80087b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087b8:	b94c      	cbnz	r4, 80087ce <__pow5mult+0x66>
 80087ba:	f240 2171 	movw	r1, #625	@ 0x271
 80087be:	4638      	mov	r0, r7
 80087c0:	f7ff ff1a 	bl	80085f8 <__i2b>
 80087c4:	2300      	movs	r3, #0
 80087c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80087ca:	4604      	mov	r4, r0
 80087cc:	6003      	str	r3, [r0, #0]
 80087ce:	f04f 0900 	mov.w	r9, #0
 80087d2:	07eb      	lsls	r3, r5, #31
 80087d4:	d50a      	bpl.n	80087ec <__pow5mult+0x84>
 80087d6:	4631      	mov	r1, r6
 80087d8:	4622      	mov	r2, r4
 80087da:	4638      	mov	r0, r7
 80087dc:	f7ff ff22 	bl	8008624 <__multiply>
 80087e0:	4631      	mov	r1, r6
 80087e2:	4680      	mov	r8, r0
 80087e4:	4638      	mov	r0, r7
 80087e6:	f7ff fe53 	bl	8008490 <_Bfree>
 80087ea:	4646      	mov	r6, r8
 80087ec:	106d      	asrs	r5, r5, #1
 80087ee:	d00b      	beq.n	8008808 <__pow5mult+0xa0>
 80087f0:	6820      	ldr	r0, [r4, #0]
 80087f2:	b938      	cbnz	r0, 8008804 <__pow5mult+0x9c>
 80087f4:	4622      	mov	r2, r4
 80087f6:	4621      	mov	r1, r4
 80087f8:	4638      	mov	r0, r7
 80087fa:	f7ff ff13 	bl	8008624 <__multiply>
 80087fe:	6020      	str	r0, [r4, #0]
 8008800:	f8c0 9000 	str.w	r9, [r0]
 8008804:	4604      	mov	r4, r0
 8008806:	e7e4      	b.n	80087d2 <__pow5mult+0x6a>
 8008808:	4630      	mov	r0, r6
 800880a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800880e:	bf00      	nop
 8008810:	0800a154 	.word	0x0800a154
 8008814:	0800a021 	.word	0x0800a021
 8008818:	0800a0b2 	.word	0x0800a0b2

0800881c <__lshift>:
 800881c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008820:	460c      	mov	r4, r1
 8008822:	6849      	ldr	r1, [r1, #4]
 8008824:	6923      	ldr	r3, [r4, #16]
 8008826:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800882a:	68a3      	ldr	r3, [r4, #8]
 800882c:	4607      	mov	r7, r0
 800882e:	4691      	mov	r9, r2
 8008830:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008834:	f108 0601 	add.w	r6, r8, #1
 8008838:	42b3      	cmp	r3, r6
 800883a:	db0b      	blt.n	8008854 <__lshift+0x38>
 800883c:	4638      	mov	r0, r7
 800883e:	f7ff fde7 	bl	8008410 <_Balloc>
 8008842:	4605      	mov	r5, r0
 8008844:	b948      	cbnz	r0, 800885a <__lshift+0x3e>
 8008846:	4602      	mov	r2, r0
 8008848:	4b28      	ldr	r3, [pc, #160]	@ (80088ec <__lshift+0xd0>)
 800884a:	4829      	ldr	r0, [pc, #164]	@ (80088f0 <__lshift+0xd4>)
 800884c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008850:	f000 fb18 	bl	8008e84 <__assert_func>
 8008854:	3101      	adds	r1, #1
 8008856:	005b      	lsls	r3, r3, #1
 8008858:	e7ee      	b.n	8008838 <__lshift+0x1c>
 800885a:	2300      	movs	r3, #0
 800885c:	f100 0114 	add.w	r1, r0, #20
 8008860:	f100 0210 	add.w	r2, r0, #16
 8008864:	4618      	mov	r0, r3
 8008866:	4553      	cmp	r3, sl
 8008868:	db33      	blt.n	80088d2 <__lshift+0xb6>
 800886a:	6920      	ldr	r0, [r4, #16]
 800886c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008870:	f104 0314 	add.w	r3, r4, #20
 8008874:	f019 091f 	ands.w	r9, r9, #31
 8008878:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800887c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008880:	d02b      	beq.n	80088da <__lshift+0xbe>
 8008882:	f1c9 0e20 	rsb	lr, r9, #32
 8008886:	468a      	mov	sl, r1
 8008888:	2200      	movs	r2, #0
 800888a:	6818      	ldr	r0, [r3, #0]
 800888c:	fa00 f009 	lsl.w	r0, r0, r9
 8008890:	4310      	orrs	r0, r2
 8008892:	f84a 0b04 	str.w	r0, [sl], #4
 8008896:	f853 2b04 	ldr.w	r2, [r3], #4
 800889a:	459c      	cmp	ip, r3
 800889c:	fa22 f20e 	lsr.w	r2, r2, lr
 80088a0:	d8f3      	bhi.n	800888a <__lshift+0x6e>
 80088a2:	ebac 0304 	sub.w	r3, ip, r4
 80088a6:	3b15      	subs	r3, #21
 80088a8:	f023 0303 	bic.w	r3, r3, #3
 80088ac:	3304      	adds	r3, #4
 80088ae:	f104 0015 	add.w	r0, r4, #21
 80088b2:	4560      	cmp	r0, ip
 80088b4:	bf88      	it	hi
 80088b6:	2304      	movhi	r3, #4
 80088b8:	50ca      	str	r2, [r1, r3]
 80088ba:	b10a      	cbz	r2, 80088c0 <__lshift+0xa4>
 80088bc:	f108 0602 	add.w	r6, r8, #2
 80088c0:	3e01      	subs	r6, #1
 80088c2:	4638      	mov	r0, r7
 80088c4:	612e      	str	r6, [r5, #16]
 80088c6:	4621      	mov	r1, r4
 80088c8:	f7ff fde2 	bl	8008490 <_Bfree>
 80088cc:	4628      	mov	r0, r5
 80088ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80088d6:	3301      	adds	r3, #1
 80088d8:	e7c5      	b.n	8008866 <__lshift+0x4a>
 80088da:	3904      	subs	r1, #4
 80088dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80088e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80088e4:	459c      	cmp	ip, r3
 80088e6:	d8f9      	bhi.n	80088dc <__lshift+0xc0>
 80088e8:	e7ea      	b.n	80088c0 <__lshift+0xa4>
 80088ea:	bf00      	nop
 80088ec:	0800a090 	.word	0x0800a090
 80088f0:	0800a0b2 	.word	0x0800a0b2

080088f4 <__mcmp>:
 80088f4:	690a      	ldr	r2, [r1, #16]
 80088f6:	4603      	mov	r3, r0
 80088f8:	6900      	ldr	r0, [r0, #16]
 80088fa:	1a80      	subs	r0, r0, r2
 80088fc:	b530      	push	{r4, r5, lr}
 80088fe:	d10e      	bne.n	800891e <__mcmp+0x2a>
 8008900:	3314      	adds	r3, #20
 8008902:	3114      	adds	r1, #20
 8008904:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008908:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800890c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008910:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008914:	4295      	cmp	r5, r2
 8008916:	d003      	beq.n	8008920 <__mcmp+0x2c>
 8008918:	d205      	bcs.n	8008926 <__mcmp+0x32>
 800891a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800891e:	bd30      	pop	{r4, r5, pc}
 8008920:	42a3      	cmp	r3, r4
 8008922:	d3f3      	bcc.n	800890c <__mcmp+0x18>
 8008924:	e7fb      	b.n	800891e <__mcmp+0x2a>
 8008926:	2001      	movs	r0, #1
 8008928:	e7f9      	b.n	800891e <__mcmp+0x2a>
	...

0800892c <__mdiff>:
 800892c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008930:	4689      	mov	r9, r1
 8008932:	4606      	mov	r6, r0
 8008934:	4611      	mov	r1, r2
 8008936:	4648      	mov	r0, r9
 8008938:	4614      	mov	r4, r2
 800893a:	f7ff ffdb 	bl	80088f4 <__mcmp>
 800893e:	1e05      	subs	r5, r0, #0
 8008940:	d112      	bne.n	8008968 <__mdiff+0x3c>
 8008942:	4629      	mov	r1, r5
 8008944:	4630      	mov	r0, r6
 8008946:	f7ff fd63 	bl	8008410 <_Balloc>
 800894a:	4602      	mov	r2, r0
 800894c:	b928      	cbnz	r0, 800895a <__mdiff+0x2e>
 800894e:	4b3f      	ldr	r3, [pc, #252]	@ (8008a4c <__mdiff+0x120>)
 8008950:	f240 2137 	movw	r1, #567	@ 0x237
 8008954:	483e      	ldr	r0, [pc, #248]	@ (8008a50 <__mdiff+0x124>)
 8008956:	f000 fa95 	bl	8008e84 <__assert_func>
 800895a:	2301      	movs	r3, #1
 800895c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008960:	4610      	mov	r0, r2
 8008962:	b003      	add	sp, #12
 8008964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008968:	bfbc      	itt	lt
 800896a:	464b      	movlt	r3, r9
 800896c:	46a1      	movlt	r9, r4
 800896e:	4630      	mov	r0, r6
 8008970:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008974:	bfba      	itte	lt
 8008976:	461c      	movlt	r4, r3
 8008978:	2501      	movlt	r5, #1
 800897a:	2500      	movge	r5, #0
 800897c:	f7ff fd48 	bl	8008410 <_Balloc>
 8008980:	4602      	mov	r2, r0
 8008982:	b918      	cbnz	r0, 800898c <__mdiff+0x60>
 8008984:	4b31      	ldr	r3, [pc, #196]	@ (8008a4c <__mdiff+0x120>)
 8008986:	f240 2145 	movw	r1, #581	@ 0x245
 800898a:	e7e3      	b.n	8008954 <__mdiff+0x28>
 800898c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008990:	6926      	ldr	r6, [r4, #16]
 8008992:	60c5      	str	r5, [r0, #12]
 8008994:	f109 0310 	add.w	r3, r9, #16
 8008998:	f109 0514 	add.w	r5, r9, #20
 800899c:	f104 0e14 	add.w	lr, r4, #20
 80089a0:	f100 0b14 	add.w	fp, r0, #20
 80089a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80089a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	46d9      	mov	r9, fp
 80089b0:	f04f 0c00 	mov.w	ip, #0
 80089b4:	9b01      	ldr	r3, [sp, #4]
 80089b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80089ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	fa1f f38a 	uxth.w	r3, sl
 80089c4:	4619      	mov	r1, r3
 80089c6:	b283      	uxth	r3, r0
 80089c8:	1acb      	subs	r3, r1, r3
 80089ca:	0c00      	lsrs	r0, r0, #16
 80089cc:	4463      	add	r3, ip
 80089ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80089d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80089dc:	4576      	cmp	r6, lr
 80089de:	f849 3b04 	str.w	r3, [r9], #4
 80089e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089e6:	d8e5      	bhi.n	80089b4 <__mdiff+0x88>
 80089e8:	1b33      	subs	r3, r6, r4
 80089ea:	3b15      	subs	r3, #21
 80089ec:	f023 0303 	bic.w	r3, r3, #3
 80089f0:	3415      	adds	r4, #21
 80089f2:	3304      	adds	r3, #4
 80089f4:	42a6      	cmp	r6, r4
 80089f6:	bf38      	it	cc
 80089f8:	2304      	movcc	r3, #4
 80089fa:	441d      	add	r5, r3
 80089fc:	445b      	add	r3, fp
 80089fe:	461e      	mov	r6, r3
 8008a00:	462c      	mov	r4, r5
 8008a02:	4544      	cmp	r4, r8
 8008a04:	d30e      	bcc.n	8008a24 <__mdiff+0xf8>
 8008a06:	f108 0103 	add.w	r1, r8, #3
 8008a0a:	1b49      	subs	r1, r1, r5
 8008a0c:	f021 0103 	bic.w	r1, r1, #3
 8008a10:	3d03      	subs	r5, #3
 8008a12:	45a8      	cmp	r8, r5
 8008a14:	bf38      	it	cc
 8008a16:	2100      	movcc	r1, #0
 8008a18:	440b      	add	r3, r1
 8008a1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a1e:	b191      	cbz	r1, 8008a46 <__mdiff+0x11a>
 8008a20:	6117      	str	r7, [r2, #16]
 8008a22:	e79d      	b.n	8008960 <__mdiff+0x34>
 8008a24:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a28:	46e6      	mov	lr, ip
 8008a2a:	0c08      	lsrs	r0, r1, #16
 8008a2c:	fa1c fc81 	uxtah	ip, ip, r1
 8008a30:	4471      	add	r1, lr
 8008a32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a36:	b289      	uxth	r1, r1
 8008a38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a3c:	f846 1b04 	str.w	r1, [r6], #4
 8008a40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a44:	e7dd      	b.n	8008a02 <__mdiff+0xd6>
 8008a46:	3f01      	subs	r7, #1
 8008a48:	e7e7      	b.n	8008a1a <__mdiff+0xee>
 8008a4a:	bf00      	nop
 8008a4c:	0800a090 	.word	0x0800a090
 8008a50:	0800a0b2 	.word	0x0800a0b2

08008a54 <__d2b>:
 8008a54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a58:	460f      	mov	r7, r1
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	ec59 8b10 	vmov	r8, r9, d0
 8008a60:	4616      	mov	r6, r2
 8008a62:	f7ff fcd5 	bl	8008410 <_Balloc>
 8008a66:	4604      	mov	r4, r0
 8008a68:	b930      	cbnz	r0, 8008a78 <__d2b+0x24>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	4b23      	ldr	r3, [pc, #140]	@ (8008afc <__d2b+0xa8>)
 8008a6e:	4824      	ldr	r0, [pc, #144]	@ (8008b00 <__d2b+0xac>)
 8008a70:	f240 310f 	movw	r1, #783	@ 0x30f
 8008a74:	f000 fa06 	bl	8008e84 <__assert_func>
 8008a78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a80:	b10d      	cbz	r5, 8008a86 <__d2b+0x32>
 8008a82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a86:	9301      	str	r3, [sp, #4]
 8008a88:	f1b8 0300 	subs.w	r3, r8, #0
 8008a8c:	d023      	beq.n	8008ad6 <__d2b+0x82>
 8008a8e:	4668      	mov	r0, sp
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	f7ff fd84 	bl	800859e <__lo0bits>
 8008a96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a9a:	b1d0      	cbz	r0, 8008ad2 <__d2b+0x7e>
 8008a9c:	f1c0 0320 	rsb	r3, r0, #32
 8008aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa4:	430b      	orrs	r3, r1
 8008aa6:	40c2      	lsrs	r2, r0
 8008aa8:	6163      	str	r3, [r4, #20]
 8008aaa:	9201      	str	r2, [sp, #4]
 8008aac:	9b01      	ldr	r3, [sp, #4]
 8008aae:	61a3      	str	r3, [r4, #24]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	bf0c      	ite	eq
 8008ab4:	2201      	moveq	r2, #1
 8008ab6:	2202      	movne	r2, #2
 8008ab8:	6122      	str	r2, [r4, #16]
 8008aba:	b1a5      	cbz	r5, 8008ae6 <__d2b+0x92>
 8008abc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ac0:	4405      	add	r5, r0
 8008ac2:	603d      	str	r5, [r7, #0]
 8008ac4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ac8:	6030      	str	r0, [r6, #0]
 8008aca:	4620      	mov	r0, r4
 8008acc:	b003      	add	sp, #12
 8008ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ad2:	6161      	str	r1, [r4, #20]
 8008ad4:	e7ea      	b.n	8008aac <__d2b+0x58>
 8008ad6:	a801      	add	r0, sp, #4
 8008ad8:	f7ff fd61 	bl	800859e <__lo0bits>
 8008adc:	9b01      	ldr	r3, [sp, #4]
 8008ade:	6163      	str	r3, [r4, #20]
 8008ae0:	3020      	adds	r0, #32
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	e7e8      	b.n	8008ab8 <__d2b+0x64>
 8008ae6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008aea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008aee:	6038      	str	r0, [r7, #0]
 8008af0:	6918      	ldr	r0, [r3, #16]
 8008af2:	f7ff fd35 	bl	8008560 <__hi0bits>
 8008af6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008afa:	e7e5      	b.n	8008ac8 <__d2b+0x74>
 8008afc:	0800a090 	.word	0x0800a090
 8008b00:	0800a0b2 	.word	0x0800a0b2

08008b04 <__sread>:
 8008b04:	b510      	push	{r4, lr}
 8008b06:	460c      	mov	r4, r1
 8008b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b0c:	f000 f956 	bl	8008dbc <_read_r>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	bfab      	itete	ge
 8008b14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b16:	89a3      	ldrhlt	r3, [r4, #12]
 8008b18:	181b      	addge	r3, r3, r0
 8008b1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b1e:	bfac      	ite	ge
 8008b20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b22:	81a3      	strhlt	r3, [r4, #12]
 8008b24:	bd10      	pop	{r4, pc}

08008b26 <__swrite>:
 8008b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2a:	461f      	mov	r7, r3
 8008b2c:	898b      	ldrh	r3, [r1, #12]
 8008b2e:	05db      	lsls	r3, r3, #23
 8008b30:	4605      	mov	r5, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	4616      	mov	r6, r2
 8008b36:	d505      	bpl.n	8008b44 <__swrite+0x1e>
 8008b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f000 f92a 	bl	8008d98 <_lseek_r>
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b4e:	81a3      	strh	r3, [r4, #12]
 8008b50:	4632      	mov	r2, r6
 8008b52:	463b      	mov	r3, r7
 8008b54:	4628      	mov	r0, r5
 8008b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5a:	f000 b951 	b.w	8008e00 <_write_r>

08008b5e <__sseek>:
 8008b5e:	b510      	push	{r4, lr}
 8008b60:	460c      	mov	r4, r1
 8008b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b66:	f000 f917 	bl	8008d98 <_lseek_r>
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	89a3      	ldrh	r3, [r4, #12]
 8008b6e:	bf15      	itete	ne
 8008b70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b7a:	81a3      	strheq	r3, [r4, #12]
 8008b7c:	bf18      	it	ne
 8008b7e:	81a3      	strhne	r3, [r4, #12]
 8008b80:	bd10      	pop	{r4, pc}

08008b82 <__sclose>:
 8008b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b86:	f000 b94d 	b.w	8008e24 <_close_r>

08008b8a <__swbuf_r>:
 8008b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8c:	460e      	mov	r6, r1
 8008b8e:	4614      	mov	r4, r2
 8008b90:	4605      	mov	r5, r0
 8008b92:	b118      	cbz	r0, 8008b9c <__swbuf_r+0x12>
 8008b94:	6a03      	ldr	r3, [r0, #32]
 8008b96:	b90b      	cbnz	r3, 8008b9c <__swbuf_r+0x12>
 8008b98:	f7fe facc 	bl	8007134 <__sinit>
 8008b9c:	69a3      	ldr	r3, [r4, #24]
 8008b9e:	60a3      	str	r3, [r4, #8]
 8008ba0:	89a3      	ldrh	r3, [r4, #12]
 8008ba2:	071a      	lsls	r2, r3, #28
 8008ba4:	d501      	bpl.n	8008baa <__swbuf_r+0x20>
 8008ba6:	6923      	ldr	r3, [r4, #16]
 8008ba8:	b943      	cbnz	r3, 8008bbc <__swbuf_r+0x32>
 8008baa:	4621      	mov	r1, r4
 8008bac:	4628      	mov	r0, r5
 8008bae:	f000 f82b 	bl	8008c08 <__swsetup_r>
 8008bb2:	b118      	cbz	r0, 8008bbc <__swbuf_r+0x32>
 8008bb4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008bb8:	4638      	mov	r0, r7
 8008bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bbc:	6823      	ldr	r3, [r4, #0]
 8008bbe:	6922      	ldr	r2, [r4, #16]
 8008bc0:	1a98      	subs	r0, r3, r2
 8008bc2:	6963      	ldr	r3, [r4, #20]
 8008bc4:	b2f6      	uxtb	r6, r6
 8008bc6:	4283      	cmp	r3, r0
 8008bc8:	4637      	mov	r7, r6
 8008bca:	dc05      	bgt.n	8008bd8 <__swbuf_r+0x4e>
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4628      	mov	r0, r5
 8008bd0:	f7ff fbea 	bl	80083a8 <_fflush_r>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d1ed      	bne.n	8008bb4 <__swbuf_r+0x2a>
 8008bd8:	68a3      	ldr	r3, [r4, #8]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	60a3      	str	r3, [r4, #8]
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	6022      	str	r2, [r4, #0]
 8008be4:	701e      	strb	r6, [r3, #0]
 8008be6:	6962      	ldr	r2, [r4, #20]
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d004      	beq.n	8008bf8 <__swbuf_r+0x6e>
 8008bee:	89a3      	ldrh	r3, [r4, #12]
 8008bf0:	07db      	lsls	r3, r3, #31
 8008bf2:	d5e1      	bpl.n	8008bb8 <__swbuf_r+0x2e>
 8008bf4:	2e0a      	cmp	r6, #10
 8008bf6:	d1df      	bne.n	8008bb8 <__swbuf_r+0x2e>
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f7ff fbd4 	bl	80083a8 <_fflush_r>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d0d9      	beq.n	8008bb8 <__swbuf_r+0x2e>
 8008c04:	e7d6      	b.n	8008bb4 <__swbuf_r+0x2a>
	...

08008c08 <__swsetup_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4b29      	ldr	r3, [pc, #164]	@ (8008cb0 <__swsetup_r+0xa8>)
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	6818      	ldr	r0, [r3, #0]
 8008c10:	460c      	mov	r4, r1
 8008c12:	b118      	cbz	r0, 8008c1c <__swsetup_r+0x14>
 8008c14:	6a03      	ldr	r3, [r0, #32]
 8008c16:	b90b      	cbnz	r3, 8008c1c <__swsetup_r+0x14>
 8008c18:	f7fe fa8c 	bl	8007134 <__sinit>
 8008c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c20:	0719      	lsls	r1, r3, #28
 8008c22:	d422      	bmi.n	8008c6a <__swsetup_r+0x62>
 8008c24:	06da      	lsls	r2, r3, #27
 8008c26:	d407      	bmi.n	8008c38 <__swsetup_r+0x30>
 8008c28:	2209      	movs	r2, #9
 8008c2a:	602a      	str	r2, [r5, #0]
 8008c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c30:	81a3      	strh	r3, [r4, #12]
 8008c32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c36:	e033      	b.n	8008ca0 <__swsetup_r+0x98>
 8008c38:	0758      	lsls	r0, r3, #29
 8008c3a:	d512      	bpl.n	8008c62 <__swsetup_r+0x5a>
 8008c3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c3e:	b141      	cbz	r1, 8008c52 <__swsetup_r+0x4a>
 8008c40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c44:	4299      	cmp	r1, r3
 8008c46:	d002      	beq.n	8008c4e <__swsetup_r+0x46>
 8008c48:	4628      	mov	r0, r5
 8008c4a:	f000 f94d 	bl	8008ee8 <_free_r>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	6063      	str	r3, [r4, #4]
 8008c5e:	6923      	ldr	r3, [r4, #16]
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	f043 0308 	orr.w	r3, r3, #8
 8008c68:	81a3      	strh	r3, [r4, #12]
 8008c6a:	6923      	ldr	r3, [r4, #16]
 8008c6c:	b94b      	cbnz	r3, 8008c82 <__swsetup_r+0x7a>
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c78:	d003      	beq.n	8008c82 <__swsetup_r+0x7a>
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	f000 f83f 	bl	8008d00 <__smakebuf_r>
 8008c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c86:	f013 0201 	ands.w	r2, r3, #1
 8008c8a:	d00a      	beq.n	8008ca2 <__swsetup_r+0x9a>
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	60a2      	str	r2, [r4, #8]
 8008c90:	6962      	ldr	r2, [r4, #20]
 8008c92:	4252      	negs	r2, r2
 8008c94:	61a2      	str	r2, [r4, #24]
 8008c96:	6922      	ldr	r2, [r4, #16]
 8008c98:	b942      	cbnz	r2, 8008cac <__swsetup_r+0xa4>
 8008c9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c9e:	d1c5      	bne.n	8008c2c <__swsetup_r+0x24>
 8008ca0:	bd38      	pop	{r3, r4, r5, pc}
 8008ca2:	0799      	lsls	r1, r3, #30
 8008ca4:	bf58      	it	pl
 8008ca6:	6962      	ldrpl	r2, [r4, #20]
 8008ca8:	60a2      	str	r2, [r4, #8]
 8008caa:	e7f4      	b.n	8008c96 <__swsetup_r+0x8e>
 8008cac:	2000      	movs	r0, #0
 8008cae:	e7f7      	b.n	8008ca0 <__swsetup_r+0x98>
 8008cb0:	2000001c 	.word	0x2000001c

08008cb4 <__swhatbuf_r>:
 8008cb4:	b570      	push	{r4, r5, r6, lr}
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cbc:	2900      	cmp	r1, #0
 8008cbe:	b096      	sub	sp, #88	@ 0x58
 8008cc0:	4615      	mov	r5, r2
 8008cc2:	461e      	mov	r6, r3
 8008cc4:	da0d      	bge.n	8008ce2 <__swhatbuf_r+0x2e>
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ccc:	f04f 0100 	mov.w	r1, #0
 8008cd0:	bf14      	ite	ne
 8008cd2:	2340      	movne	r3, #64	@ 0x40
 8008cd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008cd8:	2000      	movs	r0, #0
 8008cda:	6031      	str	r1, [r6, #0]
 8008cdc:	602b      	str	r3, [r5, #0]
 8008cde:	b016      	add	sp, #88	@ 0x58
 8008ce0:	bd70      	pop	{r4, r5, r6, pc}
 8008ce2:	466a      	mov	r2, sp
 8008ce4:	f000 f8ae 	bl	8008e44 <_fstat_r>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	dbec      	blt.n	8008cc6 <__swhatbuf_r+0x12>
 8008cec:	9901      	ldr	r1, [sp, #4]
 8008cee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008cf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008cf6:	4259      	negs	r1, r3
 8008cf8:	4159      	adcs	r1, r3
 8008cfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cfe:	e7eb      	b.n	8008cd8 <__swhatbuf_r+0x24>

08008d00 <__smakebuf_r>:
 8008d00:	898b      	ldrh	r3, [r1, #12]
 8008d02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d04:	079d      	lsls	r5, r3, #30
 8008d06:	4606      	mov	r6, r0
 8008d08:	460c      	mov	r4, r1
 8008d0a:	d507      	bpl.n	8008d1c <__smakebuf_r+0x1c>
 8008d0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	6123      	str	r3, [r4, #16]
 8008d14:	2301      	movs	r3, #1
 8008d16:	6163      	str	r3, [r4, #20]
 8008d18:	b003      	add	sp, #12
 8008d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d1c:	ab01      	add	r3, sp, #4
 8008d1e:	466a      	mov	r2, sp
 8008d20:	f7ff ffc8 	bl	8008cb4 <__swhatbuf_r>
 8008d24:	9f00      	ldr	r7, [sp, #0]
 8008d26:	4605      	mov	r5, r0
 8008d28:	4639      	mov	r1, r7
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f7ff fa38 	bl	80081a0 <_malloc_r>
 8008d30:	b948      	cbnz	r0, 8008d46 <__smakebuf_r+0x46>
 8008d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d36:	059a      	lsls	r2, r3, #22
 8008d38:	d4ee      	bmi.n	8008d18 <__smakebuf_r+0x18>
 8008d3a:	f023 0303 	bic.w	r3, r3, #3
 8008d3e:	f043 0302 	orr.w	r3, r3, #2
 8008d42:	81a3      	strh	r3, [r4, #12]
 8008d44:	e7e2      	b.n	8008d0c <__smakebuf_r+0xc>
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	6020      	str	r0, [r4, #0]
 8008d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d4e:	81a3      	strh	r3, [r4, #12]
 8008d50:	9b01      	ldr	r3, [sp, #4]
 8008d52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d56:	b15b      	cbz	r3, 8008d70 <__smakebuf_r+0x70>
 8008d58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	f000 f80b 	bl	8008d78 <_isatty_r>
 8008d62:	b128      	cbz	r0, 8008d70 <__smakebuf_r+0x70>
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	f023 0303 	bic.w	r3, r3, #3
 8008d6a:	f043 0301 	orr.w	r3, r3, #1
 8008d6e:	81a3      	strh	r3, [r4, #12]
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	431d      	orrs	r5, r3
 8008d74:	81a5      	strh	r5, [r4, #12]
 8008d76:	e7cf      	b.n	8008d18 <__smakebuf_r+0x18>

08008d78 <_isatty_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	4d06      	ldr	r5, [pc, #24]	@ (8008d94 <_isatty_r+0x1c>)
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	4604      	mov	r4, r0
 8008d80:	4608      	mov	r0, r1
 8008d82:	602b      	str	r3, [r5, #0]
 8008d84:	f7fb f9fd 	bl	8004182 <_isatty>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	d102      	bne.n	8008d92 <_isatty_r+0x1a>
 8008d8c:	682b      	ldr	r3, [r5, #0]
 8008d8e:	b103      	cbz	r3, 8008d92 <_isatty_r+0x1a>
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	bd38      	pop	{r3, r4, r5, pc}
 8008d94:	20002fa0 	.word	0x20002fa0

08008d98 <_lseek_r>:
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	4d07      	ldr	r5, [pc, #28]	@ (8008db8 <_lseek_r+0x20>)
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	4608      	mov	r0, r1
 8008da0:	4611      	mov	r1, r2
 8008da2:	2200      	movs	r2, #0
 8008da4:	602a      	str	r2, [r5, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	f7fb f9f6 	bl	8004198 <_lseek>
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	d102      	bne.n	8008db6 <_lseek_r+0x1e>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	b103      	cbz	r3, 8008db6 <_lseek_r+0x1e>
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	bd38      	pop	{r3, r4, r5, pc}
 8008db8:	20002fa0 	.word	0x20002fa0

08008dbc <_read_r>:
 8008dbc:	b538      	push	{r3, r4, r5, lr}
 8008dbe:	4d07      	ldr	r5, [pc, #28]	@ (8008ddc <_read_r+0x20>)
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	4608      	mov	r0, r1
 8008dc4:	4611      	mov	r1, r2
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	602a      	str	r2, [r5, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f7fb f984 	bl	80040d8 <_read>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d102      	bne.n	8008dda <_read_r+0x1e>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	b103      	cbz	r3, 8008dda <_read_r+0x1e>
 8008dd8:	6023      	str	r3, [r4, #0]
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	20002fa0 	.word	0x20002fa0

08008de0 <_sbrk_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4d06      	ldr	r5, [pc, #24]	@ (8008dfc <_sbrk_r+0x1c>)
 8008de4:	2300      	movs	r3, #0
 8008de6:	4604      	mov	r4, r0
 8008de8:	4608      	mov	r0, r1
 8008dea:	602b      	str	r3, [r5, #0]
 8008dec:	f7fb f9e2 	bl	80041b4 <_sbrk>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	d102      	bne.n	8008dfa <_sbrk_r+0x1a>
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	b103      	cbz	r3, 8008dfa <_sbrk_r+0x1a>
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	bd38      	pop	{r3, r4, r5, pc}
 8008dfc:	20002fa0 	.word	0x20002fa0

08008e00 <_write_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	4d07      	ldr	r5, [pc, #28]	@ (8008e20 <_write_r+0x20>)
 8008e04:	4604      	mov	r4, r0
 8008e06:	4608      	mov	r0, r1
 8008e08:	4611      	mov	r1, r2
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	602a      	str	r2, [r5, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f7fb f97f 	bl	8004112 <_write>
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	d102      	bne.n	8008e1e <_write_r+0x1e>
 8008e18:	682b      	ldr	r3, [r5, #0]
 8008e1a:	b103      	cbz	r3, 8008e1e <_write_r+0x1e>
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	bd38      	pop	{r3, r4, r5, pc}
 8008e20:	20002fa0 	.word	0x20002fa0

08008e24 <_close_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	4d06      	ldr	r5, [pc, #24]	@ (8008e40 <_close_r+0x1c>)
 8008e28:	2300      	movs	r3, #0
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	4608      	mov	r0, r1
 8008e2e:	602b      	str	r3, [r5, #0]
 8008e30:	f7fb f98b 	bl	800414a <_close>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d102      	bne.n	8008e3e <_close_r+0x1a>
 8008e38:	682b      	ldr	r3, [r5, #0]
 8008e3a:	b103      	cbz	r3, 8008e3e <_close_r+0x1a>
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
 8008e40:	20002fa0 	.word	0x20002fa0

08008e44 <_fstat_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4d07      	ldr	r5, [pc, #28]	@ (8008e64 <_fstat_r+0x20>)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	4611      	mov	r1, r2
 8008e50:	602b      	str	r3, [r5, #0]
 8008e52:	f7fb f986 	bl	8004162 <_fstat>
 8008e56:	1c43      	adds	r3, r0, #1
 8008e58:	d102      	bne.n	8008e60 <_fstat_r+0x1c>
 8008e5a:	682b      	ldr	r3, [r5, #0]
 8008e5c:	b103      	cbz	r3, 8008e60 <_fstat_r+0x1c>
 8008e5e:	6023      	str	r3, [r4, #0]
 8008e60:	bd38      	pop	{r3, r4, r5, pc}
 8008e62:	bf00      	nop
 8008e64:	20002fa0 	.word	0x20002fa0

08008e68 <memcpy>:
 8008e68:	440a      	add	r2, r1
 8008e6a:	4291      	cmp	r1, r2
 8008e6c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008e70:	d100      	bne.n	8008e74 <memcpy+0xc>
 8008e72:	4770      	bx	lr
 8008e74:	b510      	push	{r4, lr}
 8008e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e7e:	4291      	cmp	r1, r2
 8008e80:	d1f9      	bne.n	8008e76 <memcpy+0xe>
 8008e82:	bd10      	pop	{r4, pc}

08008e84 <__assert_func>:
 8008e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e86:	4614      	mov	r4, r2
 8008e88:	461a      	mov	r2, r3
 8008e8a:	4b09      	ldr	r3, [pc, #36]	@ (8008eb0 <__assert_func+0x2c>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4605      	mov	r5, r0
 8008e90:	68d8      	ldr	r0, [r3, #12]
 8008e92:	b14c      	cbz	r4, 8008ea8 <__assert_func+0x24>
 8008e94:	4b07      	ldr	r3, [pc, #28]	@ (8008eb4 <__assert_func+0x30>)
 8008e96:	9100      	str	r1, [sp, #0]
 8008e98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e9c:	4906      	ldr	r1, [pc, #24]	@ (8008eb8 <__assert_func+0x34>)
 8008e9e:	462b      	mov	r3, r5
 8008ea0:	f000 f87e 	bl	8008fa0 <fiprintf>
 8008ea4:	f000 f89b 	bl	8008fde <abort>
 8008ea8:	4b04      	ldr	r3, [pc, #16]	@ (8008ebc <__assert_func+0x38>)
 8008eaa:	461c      	mov	r4, r3
 8008eac:	e7f3      	b.n	8008e96 <__assert_func+0x12>
 8008eae:	bf00      	nop
 8008eb0:	2000001c 	.word	0x2000001c
 8008eb4:	0800a115 	.word	0x0800a115
 8008eb8:	0800a122 	.word	0x0800a122
 8008ebc:	0800a150 	.word	0x0800a150

08008ec0 <_calloc_r>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	fba1 5402 	umull	r5, r4, r1, r2
 8008ec6:	b934      	cbnz	r4, 8008ed6 <_calloc_r+0x16>
 8008ec8:	4629      	mov	r1, r5
 8008eca:	f7ff f969 	bl	80081a0 <_malloc_r>
 8008ece:	4606      	mov	r6, r0
 8008ed0:	b928      	cbnz	r0, 8008ede <_calloc_r+0x1e>
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	bd70      	pop	{r4, r5, r6, pc}
 8008ed6:	220c      	movs	r2, #12
 8008ed8:	6002      	str	r2, [r0, #0]
 8008eda:	2600      	movs	r6, #0
 8008edc:	e7f9      	b.n	8008ed2 <_calloc_r+0x12>
 8008ede:	462a      	mov	r2, r5
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	f7fe f95d 	bl	80071a0 <memset>
 8008ee6:	e7f4      	b.n	8008ed2 <_calloc_r+0x12>

08008ee8 <_free_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4605      	mov	r5, r0
 8008eec:	2900      	cmp	r1, #0
 8008eee:	d041      	beq.n	8008f74 <_free_r+0x8c>
 8008ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef4:	1f0c      	subs	r4, r1, #4
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	bfb8      	it	lt
 8008efa:	18e4      	addlt	r4, r4, r3
 8008efc:	f7ff fa7c 	bl	80083f8 <__malloc_lock>
 8008f00:	4a1d      	ldr	r2, [pc, #116]	@ (8008f78 <_free_r+0x90>)
 8008f02:	6813      	ldr	r3, [r2, #0]
 8008f04:	b933      	cbnz	r3, 8008f14 <_free_r+0x2c>
 8008f06:	6063      	str	r3, [r4, #4]
 8008f08:	6014      	str	r4, [r2, #0]
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f10:	f7ff ba78 	b.w	8008404 <__malloc_unlock>
 8008f14:	42a3      	cmp	r3, r4
 8008f16:	d908      	bls.n	8008f2a <_free_r+0x42>
 8008f18:	6820      	ldr	r0, [r4, #0]
 8008f1a:	1821      	adds	r1, r4, r0
 8008f1c:	428b      	cmp	r3, r1
 8008f1e:	bf01      	itttt	eq
 8008f20:	6819      	ldreq	r1, [r3, #0]
 8008f22:	685b      	ldreq	r3, [r3, #4]
 8008f24:	1809      	addeq	r1, r1, r0
 8008f26:	6021      	streq	r1, [r4, #0]
 8008f28:	e7ed      	b.n	8008f06 <_free_r+0x1e>
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	b10b      	cbz	r3, 8008f34 <_free_r+0x4c>
 8008f30:	42a3      	cmp	r3, r4
 8008f32:	d9fa      	bls.n	8008f2a <_free_r+0x42>
 8008f34:	6811      	ldr	r1, [r2, #0]
 8008f36:	1850      	adds	r0, r2, r1
 8008f38:	42a0      	cmp	r0, r4
 8008f3a:	d10b      	bne.n	8008f54 <_free_r+0x6c>
 8008f3c:	6820      	ldr	r0, [r4, #0]
 8008f3e:	4401      	add	r1, r0
 8008f40:	1850      	adds	r0, r2, r1
 8008f42:	4283      	cmp	r3, r0
 8008f44:	6011      	str	r1, [r2, #0]
 8008f46:	d1e0      	bne.n	8008f0a <_free_r+0x22>
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	6053      	str	r3, [r2, #4]
 8008f4e:	4408      	add	r0, r1
 8008f50:	6010      	str	r0, [r2, #0]
 8008f52:	e7da      	b.n	8008f0a <_free_r+0x22>
 8008f54:	d902      	bls.n	8008f5c <_free_r+0x74>
 8008f56:	230c      	movs	r3, #12
 8008f58:	602b      	str	r3, [r5, #0]
 8008f5a:	e7d6      	b.n	8008f0a <_free_r+0x22>
 8008f5c:	6820      	ldr	r0, [r4, #0]
 8008f5e:	1821      	adds	r1, r4, r0
 8008f60:	428b      	cmp	r3, r1
 8008f62:	bf04      	itt	eq
 8008f64:	6819      	ldreq	r1, [r3, #0]
 8008f66:	685b      	ldreq	r3, [r3, #4]
 8008f68:	6063      	str	r3, [r4, #4]
 8008f6a:	bf04      	itt	eq
 8008f6c:	1809      	addeq	r1, r1, r0
 8008f6e:	6021      	streq	r1, [r4, #0]
 8008f70:	6054      	str	r4, [r2, #4]
 8008f72:	e7ca      	b.n	8008f0a <_free_r+0x22>
 8008f74:	bd38      	pop	{r3, r4, r5, pc}
 8008f76:	bf00      	nop
 8008f78:	20002f9c 	.word	0x20002f9c

08008f7c <__ascii_mbtowc>:
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	b901      	cbnz	r1, 8008f82 <__ascii_mbtowc+0x6>
 8008f80:	a901      	add	r1, sp, #4
 8008f82:	b142      	cbz	r2, 8008f96 <__ascii_mbtowc+0x1a>
 8008f84:	b14b      	cbz	r3, 8008f9a <__ascii_mbtowc+0x1e>
 8008f86:	7813      	ldrb	r3, [r2, #0]
 8008f88:	600b      	str	r3, [r1, #0]
 8008f8a:	7812      	ldrb	r2, [r2, #0]
 8008f8c:	1e10      	subs	r0, r2, #0
 8008f8e:	bf18      	it	ne
 8008f90:	2001      	movne	r0, #1
 8008f92:	b002      	add	sp, #8
 8008f94:	4770      	bx	lr
 8008f96:	4610      	mov	r0, r2
 8008f98:	e7fb      	b.n	8008f92 <__ascii_mbtowc+0x16>
 8008f9a:	f06f 0001 	mvn.w	r0, #1
 8008f9e:	e7f8      	b.n	8008f92 <__ascii_mbtowc+0x16>

08008fa0 <fiprintf>:
 8008fa0:	b40e      	push	{r1, r2, r3}
 8008fa2:	b503      	push	{r0, r1, lr}
 8008fa4:	4601      	mov	r1, r0
 8008fa6:	ab03      	add	r3, sp, #12
 8008fa8:	4805      	ldr	r0, [pc, #20]	@ (8008fc0 <fiprintf+0x20>)
 8008faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fae:	6800      	ldr	r0, [r0, #0]
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	f7fe ffb3 	bl	8007f1c <_vfiprintf_r>
 8008fb6:	b002      	add	sp, #8
 8008fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fbc:	b003      	add	sp, #12
 8008fbe:	4770      	bx	lr
 8008fc0:	2000001c 	.word	0x2000001c

08008fc4 <__ascii_wctomb>:
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	4608      	mov	r0, r1
 8008fc8:	b141      	cbz	r1, 8008fdc <__ascii_wctomb+0x18>
 8008fca:	2aff      	cmp	r2, #255	@ 0xff
 8008fcc:	d904      	bls.n	8008fd8 <__ascii_wctomb+0x14>
 8008fce:	228a      	movs	r2, #138	@ 0x8a
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fd6:	4770      	bx	lr
 8008fd8:	700a      	strb	r2, [r1, #0]
 8008fda:	2001      	movs	r0, #1
 8008fdc:	4770      	bx	lr

08008fde <abort>:
 8008fde:	b508      	push	{r3, lr}
 8008fe0:	2006      	movs	r0, #6
 8008fe2:	f000 f82b 	bl	800903c <raise>
 8008fe6:	2001      	movs	r0, #1
 8008fe8:	f7fb f86b 	bl	80040c2 <_exit>

08008fec <_raise_r>:
 8008fec:	291f      	cmp	r1, #31
 8008fee:	b538      	push	{r3, r4, r5, lr}
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	d904      	bls.n	8009000 <_raise_r+0x14>
 8008ff6:	2316      	movs	r3, #22
 8008ff8:	6003      	str	r3, [r0, #0]
 8008ffa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ffe:	bd38      	pop	{r3, r4, r5, pc}
 8009000:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009002:	b112      	cbz	r2, 800900a <_raise_r+0x1e>
 8009004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009008:	b94b      	cbnz	r3, 800901e <_raise_r+0x32>
 800900a:	4628      	mov	r0, r5
 800900c:	f000 f830 	bl	8009070 <_getpid_r>
 8009010:	4622      	mov	r2, r4
 8009012:	4601      	mov	r1, r0
 8009014:	4628      	mov	r0, r5
 8009016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800901a:	f000 b817 	b.w	800904c <_kill_r>
 800901e:	2b01      	cmp	r3, #1
 8009020:	d00a      	beq.n	8009038 <_raise_r+0x4c>
 8009022:	1c59      	adds	r1, r3, #1
 8009024:	d103      	bne.n	800902e <_raise_r+0x42>
 8009026:	2316      	movs	r3, #22
 8009028:	6003      	str	r3, [r0, #0]
 800902a:	2001      	movs	r0, #1
 800902c:	e7e7      	b.n	8008ffe <_raise_r+0x12>
 800902e:	2100      	movs	r1, #0
 8009030:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009034:	4620      	mov	r0, r4
 8009036:	4798      	blx	r3
 8009038:	2000      	movs	r0, #0
 800903a:	e7e0      	b.n	8008ffe <_raise_r+0x12>

0800903c <raise>:
 800903c:	4b02      	ldr	r3, [pc, #8]	@ (8009048 <raise+0xc>)
 800903e:	4601      	mov	r1, r0
 8009040:	6818      	ldr	r0, [r3, #0]
 8009042:	f7ff bfd3 	b.w	8008fec <_raise_r>
 8009046:	bf00      	nop
 8009048:	2000001c 	.word	0x2000001c

0800904c <_kill_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4d07      	ldr	r5, [pc, #28]	@ (800906c <_kill_r+0x20>)
 8009050:	2300      	movs	r3, #0
 8009052:	4604      	mov	r4, r0
 8009054:	4608      	mov	r0, r1
 8009056:	4611      	mov	r1, r2
 8009058:	602b      	str	r3, [r5, #0]
 800905a:	f7fb f822 	bl	80040a2 <_kill>
 800905e:	1c43      	adds	r3, r0, #1
 8009060:	d102      	bne.n	8009068 <_kill_r+0x1c>
 8009062:	682b      	ldr	r3, [r5, #0]
 8009064:	b103      	cbz	r3, 8009068 <_kill_r+0x1c>
 8009066:	6023      	str	r3, [r4, #0]
 8009068:	bd38      	pop	{r3, r4, r5, pc}
 800906a:	bf00      	nop
 800906c:	20002fa0 	.word	0x20002fa0

08009070 <_getpid_r>:
 8009070:	f7fb b80f 	b.w	8004092 <_getpid>

08009074 <pow>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	ed2d 8b02 	vpush	{d8}
 800907a:	eeb0 8a40 	vmov.f32	s16, s0
 800907e:	eef0 8a60 	vmov.f32	s17, s1
 8009082:	ec55 4b11 	vmov	r4, r5, d1
 8009086:	f000 f973 	bl	8009370 <__ieee754_pow>
 800908a:	4622      	mov	r2, r4
 800908c:	462b      	mov	r3, r5
 800908e:	4620      	mov	r0, r4
 8009090:	4629      	mov	r1, r5
 8009092:	ec57 6b10 	vmov	r6, r7, d0
 8009096:	f7f7 fd49 	bl	8000b2c <__aeabi_dcmpun>
 800909a:	2800      	cmp	r0, #0
 800909c:	d13b      	bne.n	8009116 <pow+0xa2>
 800909e:	ec51 0b18 	vmov	r0, r1, d8
 80090a2:	2200      	movs	r2, #0
 80090a4:	2300      	movs	r3, #0
 80090a6:	f7f7 fd0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80090aa:	b1b8      	cbz	r0, 80090dc <pow+0x68>
 80090ac:	2200      	movs	r2, #0
 80090ae:	2300      	movs	r3, #0
 80090b0:	4620      	mov	r0, r4
 80090b2:	4629      	mov	r1, r5
 80090b4:	f7f7 fd08 	bl	8000ac8 <__aeabi_dcmpeq>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d146      	bne.n	800914a <pow+0xd6>
 80090bc:	ec45 4b10 	vmov	d0, r4, r5
 80090c0:	f000 f874 	bl	80091ac <finite>
 80090c4:	b338      	cbz	r0, 8009116 <pow+0xa2>
 80090c6:	2200      	movs	r2, #0
 80090c8:	2300      	movs	r3, #0
 80090ca:	4620      	mov	r0, r4
 80090cc:	4629      	mov	r1, r5
 80090ce:	f7f7 fd05 	bl	8000adc <__aeabi_dcmplt>
 80090d2:	b300      	cbz	r0, 8009116 <pow+0xa2>
 80090d4:	f7fe f86c 	bl	80071b0 <__errno>
 80090d8:	2322      	movs	r3, #34	@ 0x22
 80090da:	e01b      	b.n	8009114 <pow+0xa0>
 80090dc:	ec47 6b10 	vmov	d0, r6, r7
 80090e0:	f000 f864 	bl	80091ac <finite>
 80090e4:	b9e0      	cbnz	r0, 8009120 <pow+0xac>
 80090e6:	eeb0 0a48 	vmov.f32	s0, s16
 80090ea:	eef0 0a68 	vmov.f32	s1, s17
 80090ee:	f000 f85d 	bl	80091ac <finite>
 80090f2:	b1a8      	cbz	r0, 8009120 <pow+0xac>
 80090f4:	ec45 4b10 	vmov	d0, r4, r5
 80090f8:	f000 f858 	bl	80091ac <finite>
 80090fc:	b180      	cbz	r0, 8009120 <pow+0xac>
 80090fe:	4632      	mov	r2, r6
 8009100:	463b      	mov	r3, r7
 8009102:	4630      	mov	r0, r6
 8009104:	4639      	mov	r1, r7
 8009106:	f7f7 fd11 	bl	8000b2c <__aeabi_dcmpun>
 800910a:	2800      	cmp	r0, #0
 800910c:	d0e2      	beq.n	80090d4 <pow+0x60>
 800910e:	f7fe f84f 	bl	80071b0 <__errno>
 8009112:	2321      	movs	r3, #33	@ 0x21
 8009114:	6003      	str	r3, [r0, #0]
 8009116:	ecbd 8b02 	vpop	{d8}
 800911a:	ec47 6b10 	vmov	d0, r6, r7
 800911e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009120:	2200      	movs	r2, #0
 8009122:	2300      	movs	r3, #0
 8009124:	4630      	mov	r0, r6
 8009126:	4639      	mov	r1, r7
 8009128:	f7f7 fcce 	bl	8000ac8 <__aeabi_dcmpeq>
 800912c:	2800      	cmp	r0, #0
 800912e:	d0f2      	beq.n	8009116 <pow+0xa2>
 8009130:	eeb0 0a48 	vmov.f32	s0, s16
 8009134:	eef0 0a68 	vmov.f32	s1, s17
 8009138:	f000 f838 	bl	80091ac <finite>
 800913c:	2800      	cmp	r0, #0
 800913e:	d0ea      	beq.n	8009116 <pow+0xa2>
 8009140:	ec45 4b10 	vmov	d0, r4, r5
 8009144:	f000 f832 	bl	80091ac <finite>
 8009148:	e7c3      	b.n	80090d2 <pow+0x5e>
 800914a:	4f01      	ldr	r7, [pc, #4]	@ (8009150 <pow+0xdc>)
 800914c:	2600      	movs	r6, #0
 800914e:	e7e2      	b.n	8009116 <pow+0xa2>
 8009150:	3ff00000 	.word	0x3ff00000

08009154 <sqrt>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	ed2d 8b02 	vpush	{d8}
 800915a:	ec55 4b10 	vmov	r4, r5, d0
 800915e:	f000 f831 	bl	80091c4 <__ieee754_sqrt>
 8009162:	4622      	mov	r2, r4
 8009164:	462b      	mov	r3, r5
 8009166:	4620      	mov	r0, r4
 8009168:	4629      	mov	r1, r5
 800916a:	eeb0 8a40 	vmov.f32	s16, s0
 800916e:	eef0 8a60 	vmov.f32	s17, s1
 8009172:	f7f7 fcdb 	bl	8000b2c <__aeabi_dcmpun>
 8009176:	b990      	cbnz	r0, 800919e <sqrt+0x4a>
 8009178:	2200      	movs	r2, #0
 800917a:	2300      	movs	r3, #0
 800917c:	4620      	mov	r0, r4
 800917e:	4629      	mov	r1, r5
 8009180:	f7f7 fcac 	bl	8000adc <__aeabi_dcmplt>
 8009184:	b158      	cbz	r0, 800919e <sqrt+0x4a>
 8009186:	f7fe f813 	bl	80071b0 <__errno>
 800918a:	2321      	movs	r3, #33	@ 0x21
 800918c:	6003      	str	r3, [r0, #0]
 800918e:	2200      	movs	r2, #0
 8009190:	2300      	movs	r3, #0
 8009192:	4610      	mov	r0, r2
 8009194:	4619      	mov	r1, r3
 8009196:	f7f7 fb59 	bl	800084c <__aeabi_ddiv>
 800919a:	ec41 0b18 	vmov	d8, r0, r1
 800919e:	eeb0 0a48 	vmov.f32	s0, s16
 80091a2:	eef0 0a68 	vmov.f32	s1, s17
 80091a6:	ecbd 8b02 	vpop	{d8}
 80091aa:	bd38      	pop	{r3, r4, r5, pc}

080091ac <finite>:
 80091ac:	b082      	sub	sp, #8
 80091ae:	ed8d 0b00 	vstr	d0, [sp]
 80091b2:	9801      	ldr	r0, [sp, #4]
 80091b4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80091b8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80091bc:	0fc0      	lsrs	r0, r0, #31
 80091be:	b002      	add	sp, #8
 80091c0:	4770      	bx	lr
	...

080091c4 <__ieee754_sqrt>:
 80091c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	4a66      	ldr	r2, [pc, #408]	@ (8009364 <__ieee754_sqrt+0x1a0>)
 80091ca:	ec55 4b10 	vmov	r4, r5, d0
 80091ce:	43aa      	bics	r2, r5
 80091d0:	462b      	mov	r3, r5
 80091d2:	4621      	mov	r1, r4
 80091d4:	d110      	bne.n	80091f8 <__ieee754_sqrt+0x34>
 80091d6:	4622      	mov	r2, r4
 80091d8:	4620      	mov	r0, r4
 80091da:	4629      	mov	r1, r5
 80091dc:	f7f7 fa0c 	bl	80005f8 <__aeabi_dmul>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4620      	mov	r0, r4
 80091e6:	4629      	mov	r1, r5
 80091e8:	f7f7 f850 	bl	800028c <__adddf3>
 80091ec:	4604      	mov	r4, r0
 80091ee:	460d      	mov	r5, r1
 80091f0:	ec45 4b10 	vmov	d0, r4, r5
 80091f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f8:	2d00      	cmp	r5, #0
 80091fa:	dc0e      	bgt.n	800921a <__ieee754_sqrt+0x56>
 80091fc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009200:	4322      	orrs	r2, r4
 8009202:	d0f5      	beq.n	80091f0 <__ieee754_sqrt+0x2c>
 8009204:	b19d      	cbz	r5, 800922e <__ieee754_sqrt+0x6a>
 8009206:	4622      	mov	r2, r4
 8009208:	4620      	mov	r0, r4
 800920a:	4629      	mov	r1, r5
 800920c:	f7f7 f83c 	bl	8000288 <__aeabi_dsub>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	f7f7 fb1a 	bl	800084c <__aeabi_ddiv>
 8009218:	e7e8      	b.n	80091ec <__ieee754_sqrt+0x28>
 800921a:	152a      	asrs	r2, r5, #20
 800921c:	d115      	bne.n	800924a <__ieee754_sqrt+0x86>
 800921e:	2000      	movs	r0, #0
 8009220:	e009      	b.n	8009236 <__ieee754_sqrt+0x72>
 8009222:	0acb      	lsrs	r3, r1, #11
 8009224:	3a15      	subs	r2, #21
 8009226:	0549      	lsls	r1, r1, #21
 8009228:	2b00      	cmp	r3, #0
 800922a:	d0fa      	beq.n	8009222 <__ieee754_sqrt+0x5e>
 800922c:	e7f7      	b.n	800921e <__ieee754_sqrt+0x5a>
 800922e:	462a      	mov	r2, r5
 8009230:	e7fa      	b.n	8009228 <__ieee754_sqrt+0x64>
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	3001      	adds	r0, #1
 8009236:	02dc      	lsls	r4, r3, #11
 8009238:	d5fb      	bpl.n	8009232 <__ieee754_sqrt+0x6e>
 800923a:	1e44      	subs	r4, r0, #1
 800923c:	1b12      	subs	r2, r2, r4
 800923e:	f1c0 0420 	rsb	r4, r0, #32
 8009242:	fa21 f404 	lsr.w	r4, r1, r4
 8009246:	4323      	orrs	r3, r4
 8009248:	4081      	lsls	r1, r0
 800924a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800924e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009256:	07d2      	lsls	r2, r2, #31
 8009258:	bf5c      	itt	pl
 800925a:	005b      	lslpl	r3, r3, #1
 800925c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009260:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009264:	bf58      	it	pl
 8009266:	0049      	lslpl	r1, r1, #1
 8009268:	2600      	movs	r6, #0
 800926a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800926e:	107f      	asrs	r7, r7, #1
 8009270:	0049      	lsls	r1, r1, #1
 8009272:	2016      	movs	r0, #22
 8009274:	4632      	mov	r2, r6
 8009276:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800927a:	1915      	adds	r5, r2, r4
 800927c:	429d      	cmp	r5, r3
 800927e:	bfde      	ittt	le
 8009280:	192a      	addle	r2, r5, r4
 8009282:	1b5b      	suble	r3, r3, r5
 8009284:	1936      	addle	r6, r6, r4
 8009286:	0fcd      	lsrs	r5, r1, #31
 8009288:	3801      	subs	r0, #1
 800928a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800928e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009292:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009296:	d1f0      	bne.n	800927a <__ieee754_sqrt+0xb6>
 8009298:	4605      	mov	r5, r0
 800929a:	2420      	movs	r4, #32
 800929c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80092a0:	4293      	cmp	r3, r2
 80092a2:	eb0c 0e00 	add.w	lr, ip, r0
 80092a6:	dc02      	bgt.n	80092ae <__ieee754_sqrt+0xea>
 80092a8:	d113      	bne.n	80092d2 <__ieee754_sqrt+0x10e>
 80092aa:	458e      	cmp	lr, r1
 80092ac:	d811      	bhi.n	80092d2 <__ieee754_sqrt+0x10e>
 80092ae:	f1be 0f00 	cmp.w	lr, #0
 80092b2:	eb0e 000c 	add.w	r0, lr, ip
 80092b6:	da3f      	bge.n	8009338 <__ieee754_sqrt+0x174>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	db3d      	blt.n	8009338 <__ieee754_sqrt+0x174>
 80092bc:	f102 0801 	add.w	r8, r2, #1
 80092c0:	1a9b      	subs	r3, r3, r2
 80092c2:	458e      	cmp	lr, r1
 80092c4:	bf88      	it	hi
 80092c6:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80092ca:	eba1 010e 	sub.w	r1, r1, lr
 80092ce:	4465      	add	r5, ip
 80092d0:	4642      	mov	r2, r8
 80092d2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80092d6:	3c01      	subs	r4, #1
 80092d8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80092dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80092e0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80092e4:	d1dc      	bne.n	80092a0 <__ieee754_sqrt+0xdc>
 80092e6:	4319      	orrs	r1, r3
 80092e8:	d01b      	beq.n	8009322 <__ieee754_sqrt+0x15e>
 80092ea:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8009368 <__ieee754_sqrt+0x1a4>
 80092ee:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800936c <__ieee754_sqrt+0x1a8>
 80092f2:	e9da 0100 	ldrd	r0, r1, [sl]
 80092f6:	e9db 2300 	ldrd	r2, r3, [fp]
 80092fa:	f7f6 ffc5 	bl	8000288 <__aeabi_dsub>
 80092fe:	e9da 8900 	ldrd	r8, r9, [sl]
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4640      	mov	r0, r8
 8009308:	4649      	mov	r1, r9
 800930a:	f7f7 fbf1 	bl	8000af0 <__aeabi_dcmple>
 800930e:	b140      	cbz	r0, 8009322 <__ieee754_sqrt+0x15e>
 8009310:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8009314:	e9da 0100 	ldrd	r0, r1, [sl]
 8009318:	e9db 2300 	ldrd	r2, r3, [fp]
 800931c:	d10e      	bne.n	800933c <__ieee754_sqrt+0x178>
 800931e:	3601      	adds	r6, #1
 8009320:	4625      	mov	r5, r4
 8009322:	1073      	asrs	r3, r6, #1
 8009324:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8009328:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800932c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8009330:	086b      	lsrs	r3, r5, #1
 8009332:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8009336:	e759      	b.n	80091ec <__ieee754_sqrt+0x28>
 8009338:	4690      	mov	r8, r2
 800933a:	e7c1      	b.n	80092c0 <__ieee754_sqrt+0xfc>
 800933c:	f7f6 ffa6 	bl	800028c <__adddf3>
 8009340:	e9da 8900 	ldrd	r8, r9, [sl]
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	4640      	mov	r0, r8
 800934a:	4649      	mov	r1, r9
 800934c:	f7f7 fbc6 	bl	8000adc <__aeabi_dcmplt>
 8009350:	b120      	cbz	r0, 800935c <__ieee754_sqrt+0x198>
 8009352:	1cab      	adds	r3, r5, #2
 8009354:	bf08      	it	eq
 8009356:	3601      	addeq	r6, #1
 8009358:	3502      	adds	r5, #2
 800935a:	e7e2      	b.n	8009322 <__ieee754_sqrt+0x15e>
 800935c:	1c6b      	adds	r3, r5, #1
 800935e:	f023 0501 	bic.w	r5, r3, #1
 8009362:	e7de      	b.n	8009322 <__ieee754_sqrt+0x15e>
 8009364:	7ff00000 	.word	0x7ff00000
 8009368:	0800a360 	.word	0x0800a360
 800936c:	0800a358 	.word	0x0800a358

08009370 <__ieee754_pow>:
 8009370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009374:	b091      	sub	sp, #68	@ 0x44
 8009376:	ed8d 1b00 	vstr	d1, [sp]
 800937a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800937e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009382:	ea5a 0001 	orrs.w	r0, sl, r1
 8009386:	ec57 6b10 	vmov	r6, r7, d0
 800938a:	d113      	bne.n	80093b4 <__ieee754_pow+0x44>
 800938c:	19b3      	adds	r3, r6, r6
 800938e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009392:	4152      	adcs	r2, r2
 8009394:	4298      	cmp	r0, r3
 8009396:	4b9a      	ldr	r3, [pc, #616]	@ (8009600 <__ieee754_pow+0x290>)
 8009398:	4193      	sbcs	r3, r2
 800939a:	f080 84ee 	bcs.w	8009d7a <__ieee754_pow+0xa0a>
 800939e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093a2:	4630      	mov	r0, r6
 80093a4:	4639      	mov	r1, r7
 80093a6:	f7f6 ff71 	bl	800028c <__adddf3>
 80093aa:	ec41 0b10 	vmov	d0, r0, r1
 80093ae:	b011      	add	sp, #68	@ 0x44
 80093b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b4:	4a93      	ldr	r2, [pc, #588]	@ (8009604 <__ieee754_pow+0x294>)
 80093b6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80093ba:	4295      	cmp	r5, r2
 80093bc:	46b8      	mov	r8, r7
 80093be:	4633      	mov	r3, r6
 80093c0:	d80a      	bhi.n	80093d8 <__ieee754_pow+0x68>
 80093c2:	d104      	bne.n	80093ce <__ieee754_pow+0x5e>
 80093c4:	2e00      	cmp	r6, #0
 80093c6:	d1ea      	bne.n	800939e <__ieee754_pow+0x2e>
 80093c8:	45aa      	cmp	sl, r5
 80093ca:	d8e8      	bhi.n	800939e <__ieee754_pow+0x2e>
 80093cc:	e001      	b.n	80093d2 <__ieee754_pow+0x62>
 80093ce:	4592      	cmp	sl, r2
 80093d0:	d802      	bhi.n	80093d8 <__ieee754_pow+0x68>
 80093d2:	4592      	cmp	sl, r2
 80093d4:	d10f      	bne.n	80093f6 <__ieee754_pow+0x86>
 80093d6:	b171      	cbz	r1, 80093f6 <__ieee754_pow+0x86>
 80093d8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80093dc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80093e0:	ea58 0803 	orrs.w	r8, r8, r3
 80093e4:	d1db      	bne.n	800939e <__ieee754_pow+0x2e>
 80093e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80093ea:	18db      	adds	r3, r3, r3
 80093ec:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80093f0:	4152      	adcs	r2, r2
 80093f2:	4598      	cmp	r8, r3
 80093f4:	e7cf      	b.n	8009396 <__ieee754_pow+0x26>
 80093f6:	f1b8 0f00 	cmp.w	r8, #0
 80093fa:	46ab      	mov	fp, r5
 80093fc:	da43      	bge.n	8009486 <__ieee754_pow+0x116>
 80093fe:	4a82      	ldr	r2, [pc, #520]	@ (8009608 <__ieee754_pow+0x298>)
 8009400:	4592      	cmp	sl, r2
 8009402:	d856      	bhi.n	80094b2 <__ieee754_pow+0x142>
 8009404:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009408:	4592      	cmp	sl, r2
 800940a:	f240 84c5 	bls.w	8009d98 <__ieee754_pow+0xa28>
 800940e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009412:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009416:	2a14      	cmp	r2, #20
 8009418:	dd18      	ble.n	800944c <__ieee754_pow+0xdc>
 800941a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800941e:	fa21 f402 	lsr.w	r4, r1, r2
 8009422:	fa04 f202 	lsl.w	r2, r4, r2
 8009426:	428a      	cmp	r2, r1
 8009428:	f040 84b6 	bne.w	8009d98 <__ieee754_pow+0xa28>
 800942c:	f004 0401 	and.w	r4, r4, #1
 8009430:	f1c4 0402 	rsb	r4, r4, #2
 8009434:	2900      	cmp	r1, #0
 8009436:	d159      	bne.n	80094ec <__ieee754_pow+0x17c>
 8009438:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800943c:	d148      	bne.n	80094d0 <__ieee754_pow+0x160>
 800943e:	4632      	mov	r2, r6
 8009440:	463b      	mov	r3, r7
 8009442:	4630      	mov	r0, r6
 8009444:	4639      	mov	r1, r7
 8009446:	f7f7 f8d7 	bl	80005f8 <__aeabi_dmul>
 800944a:	e7ae      	b.n	80093aa <__ieee754_pow+0x3a>
 800944c:	2900      	cmp	r1, #0
 800944e:	d14c      	bne.n	80094ea <__ieee754_pow+0x17a>
 8009450:	f1c2 0214 	rsb	r2, r2, #20
 8009454:	fa4a f402 	asr.w	r4, sl, r2
 8009458:	fa04 f202 	lsl.w	r2, r4, r2
 800945c:	4552      	cmp	r2, sl
 800945e:	f040 8498 	bne.w	8009d92 <__ieee754_pow+0xa22>
 8009462:	f004 0401 	and.w	r4, r4, #1
 8009466:	f1c4 0402 	rsb	r4, r4, #2
 800946a:	4a68      	ldr	r2, [pc, #416]	@ (800960c <__ieee754_pow+0x29c>)
 800946c:	4592      	cmp	sl, r2
 800946e:	d1e3      	bne.n	8009438 <__ieee754_pow+0xc8>
 8009470:	f1b9 0f00 	cmp.w	r9, #0
 8009474:	f280 8489 	bge.w	8009d8a <__ieee754_pow+0xa1a>
 8009478:	4964      	ldr	r1, [pc, #400]	@ (800960c <__ieee754_pow+0x29c>)
 800947a:	4632      	mov	r2, r6
 800947c:	463b      	mov	r3, r7
 800947e:	2000      	movs	r0, #0
 8009480:	f7f7 f9e4 	bl	800084c <__aeabi_ddiv>
 8009484:	e791      	b.n	80093aa <__ieee754_pow+0x3a>
 8009486:	2400      	movs	r4, #0
 8009488:	bb81      	cbnz	r1, 80094ec <__ieee754_pow+0x17c>
 800948a:	4a5e      	ldr	r2, [pc, #376]	@ (8009604 <__ieee754_pow+0x294>)
 800948c:	4592      	cmp	sl, r2
 800948e:	d1ec      	bne.n	800946a <__ieee754_pow+0xfa>
 8009490:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8009494:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009498:	431a      	orrs	r2, r3
 800949a:	f000 846e 	beq.w	8009d7a <__ieee754_pow+0xa0a>
 800949e:	4b5c      	ldr	r3, [pc, #368]	@ (8009610 <__ieee754_pow+0x2a0>)
 80094a0:	429d      	cmp	r5, r3
 80094a2:	d908      	bls.n	80094b6 <__ieee754_pow+0x146>
 80094a4:	f1b9 0f00 	cmp.w	r9, #0
 80094a8:	f280 846b 	bge.w	8009d82 <__ieee754_pow+0xa12>
 80094ac:	2000      	movs	r0, #0
 80094ae:	2100      	movs	r1, #0
 80094b0:	e77b      	b.n	80093aa <__ieee754_pow+0x3a>
 80094b2:	2402      	movs	r4, #2
 80094b4:	e7e8      	b.n	8009488 <__ieee754_pow+0x118>
 80094b6:	f1b9 0f00 	cmp.w	r9, #0
 80094ba:	f04f 0000 	mov.w	r0, #0
 80094be:	f04f 0100 	mov.w	r1, #0
 80094c2:	f6bf af72 	bge.w	80093aa <__ieee754_pow+0x3a>
 80094c6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80094ca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80094ce:	e76c      	b.n	80093aa <__ieee754_pow+0x3a>
 80094d0:	4a50      	ldr	r2, [pc, #320]	@ (8009614 <__ieee754_pow+0x2a4>)
 80094d2:	4591      	cmp	r9, r2
 80094d4:	d10a      	bne.n	80094ec <__ieee754_pow+0x17c>
 80094d6:	f1b8 0f00 	cmp.w	r8, #0
 80094da:	db07      	blt.n	80094ec <__ieee754_pow+0x17c>
 80094dc:	ec47 6b10 	vmov	d0, r6, r7
 80094e0:	b011      	add	sp, #68	@ 0x44
 80094e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e6:	f7ff be6d 	b.w	80091c4 <__ieee754_sqrt>
 80094ea:	2400      	movs	r4, #0
 80094ec:	ec47 6b10 	vmov	d0, r6, r7
 80094f0:	9302      	str	r3, [sp, #8]
 80094f2:	f000 fcc5 	bl	8009e80 <fabs>
 80094f6:	9b02      	ldr	r3, [sp, #8]
 80094f8:	ec51 0b10 	vmov	r0, r1, d0
 80094fc:	bb43      	cbnz	r3, 8009550 <__ieee754_pow+0x1e0>
 80094fe:	4b43      	ldr	r3, [pc, #268]	@ (800960c <__ieee754_pow+0x29c>)
 8009500:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8009504:	429a      	cmp	r2, r3
 8009506:	d000      	beq.n	800950a <__ieee754_pow+0x19a>
 8009508:	bb15      	cbnz	r5, 8009550 <__ieee754_pow+0x1e0>
 800950a:	f1b9 0f00 	cmp.w	r9, #0
 800950e:	da05      	bge.n	800951c <__ieee754_pow+0x1ac>
 8009510:	4602      	mov	r2, r0
 8009512:	460b      	mov	r3, r1
 8009514:	2000      	movs	r0, #0
 8009516:	493d      	ldr	r1, [pc, #244]	@ (800960c <__ieee754_pow+0x29c>)
 8009518:	f7f7 f998 	bl	800084c <__aeabi_ddiv>
 800951c:	f1b8 0f00 	cmp.w	r8, #0
 8009520:	f6bf af43 	bge.w	80093aa <__ieee754_pow+0x3a>
 8009524:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009528:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800952c:	4325      	orrs	r5, r4
 800952e:	d108      	bne.n	8009542 <__ieee754_pow+0x1d2>
 8009530:	4602      	mov	r2, r0
 8009532:	460b      	mov	r3, r1
 8009534:	4610      	mov	r0, r2
 8009536:	4619      	mov	r1, r3
 8009538:	f7f6 fea6 	bl	8000288 <__aeabi_dsub>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	e79e      	b.n	8009480 <__ieee754_pow+0x110>
 8009542:	2c01      	cmp	r4, #1
 8009544:	f47f af31 	bne.w	80093aa <__ieee754_pow+0x3a>
 8009548:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800954c:	4619      	mov	r1, r3
 800954e:	e72c      	b.n	80093aa <__ieee754_pow+0x3a>
 8009550:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8009554:	3b01      	subs	r3, #1
 8009556:	ea53 0204 	orrs.w	r2, r3, r4
 800955a:	d102      	bne.n	8009562 <__ieee754_pow+0x1f2>
 800955c:	4632      	mov	r2, r6
 800955e:	463b      	mov	r3, r7
 8009560:	e7e8      	b.n	8009534 <__ieee754_pow+0x1c4>
 8009562:	3c01      	subs	r4, #1
 8009564:	431c      	orrs	r4, r3
 8009566:	d016      	beq.n	8009596 <__ieee754_pow+0x226>
 8009568:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80095f0 <__ieee754_pow+0x280>
 800956c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009570:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009574:	f240 8110 	bls.w	8009798 <__ieee754_pow+0x428>
 8009578:	4b27      	ldr	r3, [pc, #156]	@ (8009618 <__ieee754_pow+0x2a8>)
 800957a:	459a      	cmp	sl, r3
 800957c:	4b24      	ldr	r3, [pc, #144]	@ (8009610 <__ieee754_pow+0x2a0>)
 800957e:	d916      	bls.n	80095ae <__ieee754_pow+0x23e>
 8009580:	429d      	cmp	r5, r3
 8009582:	d80b      	bhi.n	800959c <__ieee754_pow+0x22c>
 8009584:	f1b9 0f00 	cmp.w	r9, #0
 8009588:	da0b      	bge.n	80095a2 <__ieee754_pow+0x232>
 800958a:	2000      	movs	r0, #0
 800958c:	b011      	add	sp, #68	@ 0x44
 800958e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009592:	f000 bc6d 	b.w	8009e70 <__math_oflow>
 8009596:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 80095f8 <__ieee754_pow+0x288>
 800959a:	e7e7      	b.n	800956c <__ieee754_pow+0x1fc>
 800959c:	f1b9 0f00 	cmp.w	r9, #0
 80095a0:	dcf3      	bgt.n	800958a <__ieee754_pow+0x21a>
 80095a2:	2000      	movs	r0, #0
 80095a4:	b011      	add	sp, #68	@ 0x44
 80095a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095aa:	f000 bc59 	b.w	8009e60 <__math_uflow>
 80095ae:	429d      	cmp	r5, r3
 80095b0:	d20c      	bcs.n	80095cc <__ieee754_pow+0x25c>
 80095b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095b6:	2200      	movs	r2, #0
 80095b8:	2300      	movs	r3, #0
 80095ba:	f7f7 fa8f 	bl	8000adc <__aeabi_dcmplt>
 80095be:	3800      	subs	r0, #0
 80095c0:	bf18      	it	ne
 80095c2:	2001      	movne	r0, #1
 80095c4:	f1b9 0f00 	cmp.w	r9, #0
 80095c8:	daec      	bge.n	80095a4 <__ieee754_pow+0x234>
 80095ca:	e7df      	b.n	800958c <__ieee754_pow+0x21c>
 80095cc:	4b0f      	ldr	r3, [pc, #60]	@ (800960c <__ieee754_pow+0x29c>)
 80095ce:	429d      	cmp	r5, r3
 80095d0:	f04f 0200 	mov.w	r2, #0
 80095d4:	d922      	bls.n	800961c <__ieee754_pow+0x2ac>
 80095d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095da:	2300      	movs	r3, #0
 80095dc:	f7f7 fa7e 	bl	8000adc <__aeabi_dcmplt>
 80095e0:	3800      	subs	r0, #0
 80095e2:	bf18      	it	ne
 80095e4:	2001      	movne	r0, #1
 80095e6:	f1b9 0f00 	cmp.w	r9, #0
 80095ea:	dccf      	bgt.n	800958c <__ieee754_pow+0x21c>
 80095ec:	e7da      	b.n	80095a4 <__ieee754_pow+0x234>
 80095ee:	bf00      	nop
 80095f0:	00000000 	.word	0x00000000
 80095f4:	3ff00000 	.word	0x3ff00000
 80095f8:	00000000 	.word	0x00000000
 80095fc:	bff00000 	.word	0xbff00000
 8009600:	fff00000 	.word	0xfff00000
 8009604:	7ff00000 	.word	0x7ff00000
 8009608:	433fffff 	.word	0x433fffff
 800960c:	3ff00000 	.word	0x3ff00000
 8009610:	3fefffff 	.word	0x3fefffff
 8009614:	3fe00000 	.word	0x3fe00000
 8009618:	43f00000 	.word	0x43f00000
 800961c:	4b5a      	ldr	r3, [pc, #360]	@ (8009788 <__ieee754_pow+0x418>)
 800961e:	f7f6 fe33 	bl	8000288 <__aeabi_dsub>
 8009622:	a351      	add	r3, pc, #324	@ (adr r3, 8009768 <__ieee754_pow+0x3f8>)
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	4604      	mov	r4, r0
 800962a:	460d      	mov	r5, r1
 800962c:	f7f6 ffe4 	bl	80005f8 <__aeabi_dmul>
 8009630:	a34f      	add	r3, pc, #316	@ (adr r3, 8009770 <__ieee754_pow+0x400>)
 8009632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009636:	4606      	mov	r6, r0
 8009638:	460f      	mov	r7, r1
 800963a:	4620      	mov	r0, r4
 800963c:	4629      	mov	r1, r5
 800963e:	f7f6 ffdb 	bl	80005f8 <__aeabi_dmul>
 8009642:	4b52      	ldr	r3, [pc, #328]	@ (800978c <__ieee754_pow+0x41c>)
 8009644:	4682      	mov	sl, r0
 8009646:	468b      	mov	fp, r1
 8009648:	2200      	movs	r2, #0
 800964a:	4620      	mov	r0, r4
 800964c:	4629      	mov	r1, r5
 800964e:	f7f6 ffd3 	bl	80005f8 <__aeabi_dmul>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	a148      	add	r1, pc, #288	@ (adr r1, 8009778 <__ieee754_pow+0x408>)
 8009658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800965c:	f7f6 fe14 	bl	8000288 <__aeabi_dsub>
 8009660:	4622      	mov	r2, r4
 8009662:	462b      	mov	r3, r5
 8009664:	f7f6 ffc8 	bl	80005f8 <__aeabi_dmul>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	2000      	movs	r0, #0
 800966e:	4948      	ldr	r1, [pc, #288]	@ (8009790 <__ieee754_pow+0x420>)
 8009670:	f7f6 fe0a 	bl	8000288 <__aeabi_dsub>
 8009674:	4622      	mov	r2, r4
 8009676:	4680      	mov	r8, r0
 8009678:	4689      	mov	r9, r1
 800967a:	462b      	mov	r3, r5
 800967c:	4620      	mov	r0, r4
 800967e:	4629      	mov	r1, r5
 8009680:	f7f6 ffba 	bl	80005f8 <__aeabi_dmul>
 8009684:	4602      	mov	r2, r0
 8009686:	460b      	mov	r3, r1
 8009688:	4640      	mov	r0, r8
 800968a:	4649      	mov	r1, r9
 800968c:	f7f6 ffb4 	bl	80005f8 <__aeabi_dmul>
 8009690:	a33b      	add	r3, pc, #236	@ (adr r3, 8009780 <__ieee754_pow+0x410>)
 8009692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009696:	f7f6 ffaf 	bl	80005f8 <__aeabi_dmul>
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	4650      	mov	r0, sl
 80096a0:	4659      	mov	r1, fp
 80096a2:	f7f6 fdf1 	bl	8000288 <__aeabi_dsub>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4680      	mov	r8, r0
 80096ac:	4689      	mov	r9, r1
 80096ae:	4630      	mov	r0, r6
 80096b0:	4639      	mov	r1, r7
 80096b2:	f7f6 fdeb 	bl	800028c <__adddf3>
 80096b6:	2400      	movs	r4, #0
 80096b8:	4632      	mov	r2, r6
 80096ba:	463b      	mov	r3, r7
 80096bc:	4620      	mov	r0, r4
 80096be:	460d      	mov	r5, r1
 80096c0:	f7f6 fde2 	bl	8000288 <__aeabi_dsub>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	4640      	mov	r0, r8
 80096ca:	4649      	mov	r1, r9
 80096cc:	f7f6 fddc 	bl	8000288 <__aeabi_dsub>
 80096d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80096d8:	2300      	movs	r3, #0
 80096da:	9304      	str	r3, [sp, #16]
 80096dc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80096e0:	4606      	mov	r6, r0
 80096e2:	460f      	mov	r7, r1
 80096e4:	465b      	mov	r3, fp
 80096e6:	4652      	mov	r2, sl
 80096e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096ec:	f7f6 fdcc 	bl	8000288 <__aeabi_dsub>
 80096f0:	4622      	mov	r2, r4
 80096f2:	462b      	mov	r3, r5
 80096f4:	f7f6 ff80 	bl	80005f8 <__aeabi_dmul>
 80096f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096fc:	4680      	mov	r8, r0
 80096fe:	4689      	mov	r9, r1
 8009700:	4630      	mov	r0, r6
 8009702:	4639      	mov	r1, r7
 8009704:	f7f6 ff78 	bl	80005f8 <__aeabi_dmul>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	4640      	mov	r0, r8
 800970e:	4649      	mov	r1, r9
 8009710:	f7f6 fdbc 	bl	800028c <__adddf3>
 8009714:	465b      	mov	r3, fp
 8009716:	4606      	mov	r6, r0
 8009718:	460f      	mov	r7, r1
 800971a:	4652      	mov	r2, sl
 800971c:	4620      	mov	r0, r4
 800971e:	4629      	mov	r1, r5
 8009720:	f7f6 ff6a 	bl	80005f8 <__aeabi_dmul>
 8009724:	460b      	mov	r3, r1
 8009726:	4602      	mov	r2, r0
 8009728:	4680      	mov	r8, r0
 800972a:	4689      	mov	r9, r1
 800972c:	4630      	mov	r0, r6
 800972e:	4639      	mov	r1, r7
 8009730:	f7f6 fdac 	bl	800028c <__adddf3>
 8009734:	4b17      	ldr	r3, [pc, #92]	@ (8009794 <__ieee754_pow+0x424>)
 8009736:	4299      	cmp	r1, r3
 8009738:	4604      	mov	r4, r0
 800973a:	460d      	mov	r5, r1
 800973c:	468b      	mov	fp, r1
 800973e:	f340 820b 	ble.w	8009b58 <__ieee754_pow+0x7e8>
 8009742:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009746:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800974a:	4303      	orrs	r3, r0
 800974c:	f000 81ea 	beq.w	8009b24 <__ieee754_pow+0x7b4>
 8009750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009754:	2200      	movs	r2, #0
 8009756:	2300      	movs	r3, #0
 8009758:	f7f7 f9c0 	bl	8000adc <__aeabi_dcmplt>
 800975c:	3800      	subs	r0, #0
 800975e:	bf18      	it	ne
 8009760:	2001      	movne	r0, #1
 8009762:	e713      	b.n	800958c <__ieee754_pow+0x21c>
 8009764:	f3af 8000 	nop.w
 8009768:	60000000 	.word	0x60000000
 800976c:	3ff71547 	.word	0x3ff71547
 8009770:	f85ddf44 	.word	0xf85ddf44
 8009774:	3e54ae0b 	.word	0x3e54ae0b
 8009778:	55555555 	.word	0x55555555
 800977c:	3fd55555 	.word	0x3fd55555
 8009780:	652b82fe 	.word	0x652b82fe
 8009784:	3ff71547 	.word	0x3ff71547
 8009788:	3ff00000 	.word	0x3ff00000
 800978c:	3fd00000 	.word	0x3fd00000
 8009790:	3fe00000 	.word	0x3fe00000
 8009794:	408fffff 	.word	0x408fffff
 8009798:	4bd5      	ldr	r3, [pc, #852]	@ (8009af0 <__ieee754_pow+0x780>)
 800979a:	ea08 0303 	and.w	r3, r8, r3
 800979e:	2200      	movs	r2, #0
 80097a0:	b92b      	cbnz	r3, 80097ae <__ieee754_pow+0x43e>
 80097a2:	4bd4      	ldr	r3, [pc, #848]	@ (8009af4 <__ieee754_pow+0x784>)
 80097a4:	f7f6 ff28 	bl	80005f8 <__aeabi_dmul>
 80097a8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80097ac:	468b      	mov	fp, r1
 80097ae:	ea4f 532b 	mov.w	r3, fp, asr #20
 80097b2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80097b6:	4413      	add	r3, r2
 80097b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80097ba:	4bcf      	ldr	r3, [pc, #828]	@ (8009af8 <__ieee754_pow+0x788>)
 80097bc:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80097c0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80097c4:	459b      	cmp	fp, r3
 80097c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80097ca:	dd08      	ble.n	80097de <__ieee754_pow+0x46e>
 80097cc:	4bcb      	ldr	r3, [pc, #812]	@ (8009afc <__ieee754_pow+0x78c>)
 80097ce:	459b      	cmp	fp, r3
 80097d0:	f340 81a5 	ble.w	8009b1e <__ieee754_pow+0x7ae>
 80097d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097d6:	3301      	adds	r3, #1
 80097d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80097da:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80097de:	f04f 0a00 	mov.w	sl, #0
 80097e2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80097e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097e8:	4bc5      	ldr	r3, [pc, #788]	@ (8009b00 <__ieee754_pow+0x790>)
 80097ea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80097ee:	ed93 7b00 	vldr	d7, [r3]
 80097f2:	4629      	mov	r1, r5
 80097f4:	ec53 2b17 	vmov	r2, r3, d7
 80097f8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80097fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009800:	f7f6 fd42 	bl	8000288 <__aeabi_dsub>
 8009804:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009808:	4606      	mov	r6, r0
 800980a:	460f      	mov	r7, r1
 800980c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009810:	f7f6 fd3c 	bl	800028c <__adddf3>
 8009814:	4602      	mov	r2, r0
 8009816:	460b      	mov	r3, r1
 8009818:	2000      	movs	r0, #0
 800981a:	49ba      	ldr	r1, [pc, #744]	@ (8009b04 <__ieee754_pow+0x794>)
 800981c:	f7f7 f816 	bl	800084c <__aeabi_ddiv>
 8009820:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009824:	4602      	mov	r2, r0
 8009826:	460b      	mov	r3, r1
 8009828:	4630      	mov	r0, r6
 800982a:	4639      	mov	r1, r7
 800982c:	f7f6 fee4 	bl	80005f8 <__aeabi_dmul>
 8009830:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009834:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009838:	106d      	asrs	r5, r5, #1
 800983a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800983e:	f04f 0b00 	mov.w	fp, #0
 8009842:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009846:	4661      	mov	r1, ip
 8009848:	2200      	movs	r2, #0
 800984a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800984e:	4658      	mov	r0, fp
 8009850:	46e1      	mov	r9, ip
 8009852:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009856:	4614      	mov	r4, r2
 8009858:	461d      	mov	r5, r3
 800985a:	f7f6 fecd 	bl	80005f8 <__aeabi_dmul>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	4630      	mov	r0, r6
 8009864:	4639      	mov	r1, r7
 8009866:	f7f6 fd0f 	bl	8000288 <__aeabi_dsub>
 800986a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800986e:	4606      	mov	r6, r0
 8009870:	460f      	mov	r7, r1
 8009872:	4620      	mov	r0, r4
 8009874:	4629      	mov	r1, r5
 8009876:	f7f6 fd07 	bl	8000288 <__aeabi_dsub>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009882:	f7f6 fd01 	bl	8000288 <__aeabi_dsub>
 8009886:	465a      	mov	r2, fp
 8009888:	464b      	mov	r3, r9
 800988a:	f7f6 feb5 	bl	80005f8 <__aeabi_dmul>
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	4630      	mov	r0, r6
 8009894:	4639      	mov	r1, r7
 8009896:	f7f6 fcf7 	bl	8000288 <__aeabi_dsub>
 800989a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800989e:	f7f6 feab 	bl	80005f8 <__aeabi_dmul>
 80098a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80098aa:	4610      	mov	r0, r2
 80098ac:	4619      	mov	r1, r3
 80098ae:	f7f6 fea3 	bl	80005f8 <__aeabi_dmul>
 80098b2:	a37d      	add	r3, pc, #500	@ (adr r3, 8009aa8 <__ieee754_pow+0x738>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	4604      	mov	r4, r0
 80098ba:	460d      	mov	r5, r1
 80098bc:	f7f6 fe9c 	bl	80005f8 <__aeabi_dmul>
 80098c0:	a37b      	add	r3, pc, #492	@ (adr r3, 8009ab0 <__ieee754_pow+0x740>)
 80098c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c6:	f7f6 fce1 	bl	800028c <__adddf3>
 80098ca:	4622      	mov	r2, r4
 80098cc:	462b      	mov	r3, r5
 80098ce:	f7f6 fe93 	bl	80005f8 <__aeabi_dmul>
 80098d2:	a379      	add	r3, pc, #484	@ (adr r3, 8009ab8 <__ieee754_pow+0x748>)
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	f7f6 fcd8 	bl	800028c <__adddf3>
 80098dc:	4622      	mov	r2, r4
 80098de:	462b      	mov	r3, r5
 80098e0:	f7f6 fe8a 	bl	80005f8 <__aeabi_dmul>
 80098e4:	a376      	add	r3, pc, #472	@ (adr r3, 8009ac0 <__ieee754_pow+0x750>)
 80098e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ea:	f7f6 fccf 	bl	800028c <__adddf3>
 80098ee:	4622      	mov	r2, r4
 80098f0:	462b      	mov	r3, r5
 80098f2:	f7f6 fe81 	bl	80005f8 <__aeabi_dmul>
 80098f6:	a374      	add	r3, pc, #464	@ (adr r3, 8009ac8 <__ieee754_pow+0x758>)
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f7f6 fcc6 	bl	800028c <__adddf3>
 8009900:	4622      	mov	r2, r4
 8009902:	462b      	mov	r3, r5
 8009904:	f7f6 fe78 	bl	80005f8 <__aeabi_dmul>
 8009908:	a371      	add	r3, pc, #452	@ (adr r3, 8009ad0 <__ieee754_pow+0x760>)
 800990a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990e:	f7f6 fcbd 	bl	800028c <__adddf3>
 8009912:	4622      	mov	r2, r4
 8009914:	4606      	mov	r6, r0
 8009916:	460f      	mov	r7, r1
 8009918:	462b      	mov	r3, r5
 800991a:	4620      	mov	r0, r4
 800991c:	4629      	mov	r1, r5
 800991e:	f7f6 fe6b 	bl	80005f8 <__aeabi_dmul>
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	4630      	mov	r0, r6
 8009928:	4639      	mov	r1, r7
 800992a:	f7f6 fe65 	bl	80005f8 <__aeabi_dmul>
 800992e:	465a      	mov	r2, fp
 8009930:	4604      	mov	r4, r0
 8009932:	460d      	mov	r5, r1
 8009934:	464b      	mov	r3, r9
 8009936:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800993a:	f7f6 fca7 	bl	800028c <__adddf3>
 800993e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009942:	f7f6 fe59 	bl	80005f8 <__aeabi_dmul>
 8009946:	4622      	mov	r2, r4
 8009948:	462b      	mov	r3, r5
 800994a:	f7f6 fc9f 	bl	800028c <__adddf3>
 800994e:	465a      	mov	r2, fp
 8009950:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009954:	464b      	mov	r3, r9
 8009956:	4658      	mov	r0, fp
 8009958:	4649      	mov	r1, r9
 800995a:	f7f6 fe4d 	bl	80005f8 <__aeabi_dmul>
 800995e:	4b6a      	ldr	r3, [pc, #424]	@ (8009b08 <__ieee754_pow+0x798>)
 8009960:	2200      	movs	r2, #0
 8009962:	4606      	mov	r6, r0
 8009964:	460f      	mov	r7, r1
 8009966:	f7f6 fc91 	bl	800028c <__adddf3>
 800996a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800996e:	f7f6 fc8d 	bl	800028c <__adddf3>
 8009972:	46d8      	mov	r8, fp
 8009974:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009978:	460d      	mov	r5, r1
 800997a:	465a      	mov	r2, fp
 800997c:	460b      	mov	r3, r1
 800997e:	4640      	mov	r0, r8
 8009980:	4649      	mov	r1, r9
 8009982:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009986:	f7f6 fe37 	bl	80005f8 <__aeabi_dmul>
 800998a:	465c      	mov	r4, fp
 800998c:	4680      	mov	r8, r0
 800998e:	4689      	mov	r9, r1
 8009990:	4b5d      	ldr	r3, [pc, #372]	@ (8009b08 <__ieee754_pow+0x798>)
 8009992:	2200      	movs	r2, #0
 8009994:	4620      	mov	r0, r4
 8009996:	4629      	mov	r1, r5
 8009998:	f7f6 fc76 	bl	8000288 <__aeabi_dsub>
 800999c:	4632      	mov	r2, r6
 800999e:	463b      	mov	r3, r7
 80099a0:	f7f6 fc72 	bl	8000288 <__aeabi_dsub>
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099ac:	f7f6 fc6c 	bl	8000288 <__aeabi_dsub>
 80099b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099b4:	f7f6 fe20 	bl	80005f8 <__aeabi_dmul>
 80099b8:	4622      	mov	r2, r4
 80099ba:	4606      	mov	r6, r0
 80099bc:	460f      	mov	r7, r1
 80099be:	462b      	mov	r3, r5
 80099c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099c4:	f7f6 fe18 	bl	80005f8 <__aeabi_dmul>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4630      	mov	r0, r6
 80099ce:	4639      	mov	r1, r7
 80099d0:	f7f6 fc5c 	bl	800028c <__adddf3>
 80099d4:	4606      	mov	r6, r0
 80099d6:	460f      	mov	r7, r1
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	4640      	mov	r0, r8
 80099de:	4649      	mov	r1, r9
 80099e0:	f7f6 fc54 	bl	800028c <__adddf3>
 80099e4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80099e8:	a33b      	add	r3, pc, #236	@ (adr r3, 8009ad8 <__ieee754_pow+0x768>)
 80099ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ee:	4658      	mov	r0, fp
 80099f0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80099f4:	460d      	mov	r5, r1
 80099f6:	f7f6 fdff 	bl	80005f8 <__aeabi_dmul>
 80099fa:	465c      	mov	r4, fp
 80099fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a00:	4642      	mov	r2, r8
 8009a02:	464b      	mov	r3, r9
 8009a04:	4620      	mov	r0, r4
 8009a06:	4629      	mov	r1, r5
 8009a08:	f7f6 fc3e 	bl	8000288 <__aeabi_dsub>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4630      	mov	r0, r6
 8009a12:	4639      	mov	r1, r7
 8009a14:	f7f6 fc38 	bl	8000288 <__aeabi_dsub>
 8009a18:	a331      	add	r3, pc, #196	@ (adr r3, 8009ae0 <__ieee754_pow+0x770>)
 8009a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1e:	f7f6 fdeb 	bl	80005f8 <__aeabi_dmul>
 8009a22:	a331      	add	r3, pc, #196	@ (adr r3, 8009ae8 <__ieee754_pow+0x778>)
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	4606      	mov	r6, r0
 8009a2a:	460f      	mov	r7, r1
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	4629      	mov	r1, r5
 8009a30:	f7f6 fde2 	bl	80005f8 <__aeabi_dmul>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4630      	mov	r0, r6
 8009a3a:	4639      	mov	r1, r7
 8009a3c:	f7f6 fc26 	bl	800028c <__adddf3>
 8009a40:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a42:	4b32      	ldr	r3, [pc, #200]	@ (8009b0c <__ieee754_pow+0x79c>)
 8009a44:	4413      	add	r3, r2
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	f7f6 fc1f 	bl	800028c <__adddf3>
 8009a4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009a54:	f7f6 fd66 	bl	8000524 <__aeabi_i2d>
 8009a58:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8009b10 <__ieee754_pow+0x7a0>)
 8009a5c:	4413      	add	r3, r2
 8009a5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a62:	4606      	mov	r6, r0
 8009a64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a68:	460f      	mov	r7, r1
 8009a6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a6e:	f7f6 fc0d 	bl	800028c <__adddf3>
 8009a72:	4642      	mov	r2, r8
 8009a74:	464b      	mov	r3, r9
 8009a76:	f7f6 fc09 	bl	800028c <__adddf3>
 8009a7a:	4632      	mov	r2, r6
 8009a7c:	463b      	mov	r3, r7
 8009a7e:	f7f6 fc05 	bl	800028c <__adddf3>
 8009a82:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009a86:	4632      	mov	r2, r6
 8009a88:	463b      	mov	r3, r7
 8009a8a:	4658      	mov	r0, fp
 8009a8c:	460d      	mov	r5, r1
 8009a8e:	f7f6 fbfb 	bl	8000288 <__aeabi_dsub>
 8009a92:	4642      	mov	r2, r8
 8009a94:	464b      	mov	r3, r9
 8009a96:	f7f6 fbf7 	bl	8000288 <__aeabi_dsub>
 8009a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a9e:	f7f6 fbf3 	bl	8000288 <__aeabi_dsub>
 8009aa2:	465c      	mov	r4, fp
 8009aa4:	e036      	b.n	8009b14 <__ieee754_pow+0x7a4>
 8009aa6:	bf00      	nop
 8009aa8:	4a454eef 	.word	0x4a454eef
 8009aac:	3fca7e28 	.word	0x3fca7e28
 8009ab0:	93c9db65 	.word	0x93c9db65
 8009ab4:	3fcd864a 	.word	0x3fcd864a
 8009ab8:	a91d4101 	.word	0xa91d4101
 8009abc:	3fd17460 	.word	0x3fd17460
 8009ac0:	518f264d 	.word	0x518f264d
 8009ac4:	3fd55555 	.word	0x3fd55555
 8009ac8:	db6fabff 	.word	0xdb6fabff
 8009acc:	3fdb6db6 	.word	0x3fdb6db6
 8009ad0:	33333303 	.word	0x33333303
 8009ad4:	3fe33333 	.word	0x3fe33333
 8009ad8:	e0000000 	.word	0xe0000000
 8009adc:	3feec709 	.word	0x3feec709
 8009ae0:	dc3a03fd 	.word	0xdc3a03fd
 8009ae4:	3feec709 	.word	0x3feec709
 8009ae8:	145b01f5 	.word	0x145b01f5
 8009aec:	be3e2fe0 	.word	0xbe3e2fe0
 8009af0:	7ff00000 	.word	0x7ff00000
 8009af4:	43400000 	.word	0x43400000
 8009af8:	0003988e 	.word	0x0003988e
 8009afc:	000bb679 	.word	0x000bb679
 8009b00:	0800a388 	.word	0x0800a388
 8009b04:	3ff00000 	.word	0x3ff00000
 8009b08:	40080000 	.word	0x40080000
 8009b0c:	0800a368 	.word	0x0800a368
 8009b10:	0800a378 	.word	0x0800a378
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b1c:	e5d6      	b.n	80096cc <__ieee754_pow+0x35c>
 8009b1e:	f04f 0a01 	mov.w	sl, #1
 8009b22:	e65e      	b.n	80097e2 <__ieee754_pow+0x472>
 8009b24:	a3b5      	add	r3, pc, #724	@ (adr r3, 8009dfc <__ieee754_pow+0xa8c>)
 8009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	f7f6 fbad 	bl	800028c <__adddf3>
 8009b32:	4642      	mov	r2, r8
 8009b34:	e9cd 0100 	strd	r0, r1, [sp]
 8009b38:	464b      	mov	r3, r9
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	4629      	mov	r1, r5
 8009b3e:	f7f6 fba3 	bl	8000288 <__aeabi_dsub>
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b4a:	f7f6 ffe5 	bl	8000b18 <__aeabi_dcmpgt>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	f47f adfe 	bne.w	8009750 <__ieee754_pow+0x3e0>
 8009b54:	4ba2      	ldr	r3, [pc, #648]	@ (8009de0 <__ieee754_pow+0xa70>)
 8009b56:	e022      	b.n	8009b9e <__ieee754_pow+0x82e>
 8009b58:	4ca2      	ldr	r4, [pc, #648]	@ (8009de4 <__ieee754_pow+0xa74>)
 8009b5a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009b5e:	42a3      	cmp	r3, r4
 8009b60:	d919      	bls.n	8009b96 <__ieee754_pow+0x826>
 8009b62:	4ba1      	ldr	r3, [pc, #644]	@ (8009de8 <__ieee754_pow+0xa78>)
 8009b64:	440b      	add	r3, r1
 8009b66:	4303      	orrs	r3, r0
 8009b68:	d009      	beq.n	8009b7e <__ieee754_pow+0x80e>
 8009b6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	2300      	movs	r3, #0
 8009b72:	f7f6 ffb3 	bl	8000adc <__aeabi_dcmplt>
 8009b76:	3800      	subs	r0, #0
 8009b78:	bf18      	it	ne
 8009b7a:	2001      	movne	r0, #1
 8009b7c:	e512      	b.n	80095a4 <__ieee754_pow+0x234>
 8009b7e:	4642      	mov	r2, r8
 8009b80:	464b      	mov	r3, r9
 8009b82:	f7f6 fb81 	bl	8000288 <__aeabi_dsub>
 8009b86:	4632      	mov	r2, r6
 8009b88:	463b      	mov	r3, r7
 8009b8a:	f7f6 ffbb 	bl	8000b04 <__aeabi_dcmpge>
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d1eb      	bne.n	8009b6a <__ieee754_pow+0x7fa>
 8009b92:	4b96      	ldr	r3, [pc, #600]	@ (8009dec <__ieee754_pow+0xa7c>)
 8009b94:	e003      	b.n	8009b9e <__ieee754_pow+0x82e>
 8009b96:	4a96      	ldr	r2, [pc, #600]	@ (8009df0 <__ieee754_pow+0xa80>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	f240 80e7 	bls.w	8009d6c <__ieee754_pow+0x9fc>
 8009b9e:	151b      	asrs	r3, r3, #20
 8009ba0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8009ba4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8009ba8:	fa4a fa03 	asr.w	sl, sl, r3
 8009bac:	44da      	add	sl, fp
 8009bae:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009bb2:	4890      	ldr	r0, [pc, #576]	@ (8009df4 <__ieee754_pow+0xa84>)
 8009bb4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009bb8:	4108      	asrs	r0, r1
 8009bba:	ea00 030a 	and.w	r3, r0, sl
 8009bbe:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009bc2:	f1c1 0114 	rsb	r1, r1, #20
 8009bc6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009bca:	fa4a fa01 	asr.w	sl, sl, r1
 8009bce:	f1bb 0f00 	cmp.w	fp, #0
 8009bd2:	4640      	mov	r0, r8
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	f04f 0200 	mov.w	r2, #0
 8009bda:	bfb8      	it	lt
 8009bdc:	f1ca 0a00 	rsblt	sl, sl, #0
 8009be0:	f7f6 fb52 	bl	8000288 <__aeabi_dsub>
 8009be4:	4680      	mov	r8, r0
 8009be6:	4689      	mov	r9, r1
 8009be8:	4632      	mov	r2, r6
 8009bea:	463b      	mov	r3, r7
 8009bec:	4640      	mov	r0, r8
 8009bee:	4649      	mov	r1, r9
 8009bf0:	f7f6 fb4c 	bl	800028c <__adddf3>
 8009bf4:	2400      	movs	r4, #0
 8009bf6:	a36a      	add	r3, pc, #424	@ (adr r3, 8009da0 <__ieee754_pow+0xa30>)
 8009bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	460d      	mov	r5, r1
 8009c00:	f7f6 fcfa 	bl	80005f8 <__aeabi_dmul>
 8009c04:	4642      	mov	r2, r8
 8009c06:	e9cd 0100 	strd	r0, r1, [sp]
 8009c0a:	464b      	mov	r3, r9
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	4629      	mov	r1, r5
 8009c10:	f7f6 fb3a 	bl	8000288 <__aeabi_dsub>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4630      	mov	r0, r6
 8009c1a:	4639      	mov	r1, r7
 8009c1c:	f7f6 fb34 	bl	8000288 <__aeabi_dsub>
 8009c20:	a361      	add	r3, pc, #388	@ (adr r3, 8009da8 <__ieee754_pow+0xa38>)
 8009c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c26:	f7f6 fce7 	bl	80005f8 <__aeabi_dmul>
 8009c2a:	a361      	add	r3, pc, #388	@ (adr r3, 8009db0 <__ieee754_pow+0xa40>)
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	4680      	mov	r8, r0
 8009c32:	4689      	mov	r9, r1
 8009c34:	4620      	mov	r0, r4
 8009c36:	4629      	mov	r1, r5
 8009c38:	f7f6 fcde 	bl	80005f8 <__aeabi_dmul>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	4640      	mov	r0, r8
 8009c42:	4649      	mov	r1, r9
 8009c44:	f7f6 fb22 	bl	800028c <__adddf3>
 8009c48:	4604      	mov	r4, r0
 8009c4a:	460d      	mov	r5, r1
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c54:	f7f6 fb1a 	bl	800028c <__adddf3>
 8009c58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c5c:	4680      	mov	r8, r0
 8009c5e:	4689      	mov	r9, r1
 8009c60:	f7f6 fb12 	bl	8000288 <__aeabi_dsub>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	4620      	mov	r0, r4
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	f7f6 fb0c 	bl	8000288 <__aeabi_dsub>
 8009c70:	4642      	mov	r2, r8
 8009c72:	4606      	mov	r6, r0
 8009c74:	460f      	mov	r7, r1
 8009c76:	464b      	mov	r3, r9
 8009c78:	4640      	mov	r0, r8
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	f7f6 fcbc 	bl	80005f8 <__aeabi_dmul>
 8009c80:	a34d      	add	r3, pc, #308	@ (adr r3, 8009db8 <__ieee754_pow+0xa48>)
 8009c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c86:	4604      	mov	r4, r0
 8009c88:	460d      	mov	r5, r1
 8009c8a:	f7f6 fcb5 	bl	80005f8 <__aeabi_dmul>
 8009c8e:	a34c      	add	r3, pc, #304	@ (adr r3, 8009dc0 <__ieee754_pow+0xa50>)
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	f7f6 faf8 	bl	8000288 <__aeabi_dsub>
 8009c98:	4622      	mov	r2, r4
 8009c9a:	462b      	mov	r3, r5
 8009c9c:	f7f6 fcac 	bl	80005f8 <__aeabi_dmul>
 8009ca0:	a349      	add	r3, pc, #292	@ (adr r3, 8009dc8 <__ieee754_pow+0xa58>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f7f6 faf1 	bl	800028c <__adddf3>
 8009caa:	4622      	mov	r2, r4
 8009cac:	462b      	mov	r3, r5
 8009cae:	f7f6 fca3 	bl	80005f8 <__aeabi_dmul>
 8009cb2:	a347      	add	r3, pc, #284	@ (adr r3, 8009dd0 <__ieee754_pow+0xa60>)
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	f7f6 fae6 	bl	8000288 <__aeabi_dsub>
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	462b      	mov	r3, r5
 8009cc0:	f7f6 fc9a 	bl	80005f8 <__aeabi_dmul>
 8009cc4:	a344      	add	r3, pc, #272	@ (adr r3, 8009dd8 <__ieee754_pow+0xa68>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f7f6 fadf 	bl	800028c <__adddf3>
 8009cce:	4622      	mov	r2, r4
 8009cd0:	462b      	mov	r3, r5
 8009cd2:	f7f6 fc91 	bl	80005f8 <__aeabi_dmul>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4640      	mov	r0, r8
 8009cdc:	4649      	mov	r1, r9
 8009cde:	f7f6 fad3 	bl	8000288 <__aeabi_dsub>
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	460d      	mov	r5, r1
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4640      	mov	r0, r8
 8009cec:	4649      	mov	r1, r9
 8009cee:	f7f6 fc83 	bl	80005f8 <__aeabi_dmul>
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	e9cd 0100 	strd	r0, r1, [sp]
 8009cf8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	4629      	mov	r1, r5
 8009d00:	f7f6 fac2 	bl	8000288 <__aeabi_dsub>
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d0c:	f7f6 fd9e 	bl	800084c <__aeabi_ddiv>
 8009d10:	4632      	mov	r2, r6
 8009d12:	4604      	mov	r4, r0
 8009d14:	460d      	mov	r5, r1
 8009d16:	463b      	mov	r3, r7
 8009d18:	4640      	mov	r0, r8
 8009d1a:	4649      	mov	r1, r9
 8009d1c:	f7f6 fc6c 	bl	80005f8 <__aeabi_dmul>
 8009d20:	4632      	mov	r2, r6
 8009d22:	463b      	mov	r3, r7
 8009d24:	f7f6 fab2 	bl	800028c <__adddf3>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	4629      	mov	r1, r5
 8009d30:	f7f6 faaa 	bl	8000288 <__aeabi_dsub>
 8009d34:	4642      	mov	r2, r8
 8009d36:	464b      	mov	r3, r9
 8009d38:	f7f6 faa6 	bl	8000288 <__aeabi_dsub>
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4602      	mov	r2, r0
 8009d40:	492d      	ldr	r1, [pc, #180]	@ (8009df8 <__ieee754_pow+0xa88>)
 8009d42:	2000      	movs	r0, #0
 8009d44:	f7f6 faa0 	bl	8000288 <__aeabi_dsub>
 8009d48:	ec41 0b10 	vmov	d0, r0, r1
 8009d4c:	ee10 3a90 	vmov	r3, s1
 8009d50:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009d54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d58:	da0b      	bge.n	8009d72 <__ieee754_pow+0xa02>
 8009d5a:	4650      	mov	r0, sl
 8009d5c:	f000 f898 	bl	8009e90 <scalbn>
 8009d60:	ec51 0b10 	vmov	r0, r1, d0
 8009d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d68:	f7ff bb6d 	b.w	8009446 <__ieee754_pow+0xd6>
 8009d6c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009d70:	e73a      	b.n	8009be8 <__ieee754_pow+0x878>
 8009d72:	ec51 0b10 	vmov	r0, r1, d0
 8009d76:	4619      	mov	r1, r3
 8009d78:	e7f4      	b.n	8009d64 <__ieee754_pow+0x9f4>
 8009d7a:	491f      	ldr	r1, [pc, #124]	@ (8009df8 <__ieee754_pow+0xa88>)
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	f7ff bb14 	b.w	80093aa <__ieee754_pow+0x3a>
 8009d82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d86:	f7ff bb10 	b.w	80093aa <__ieee754_pow+0x3a>
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	4639      	mov	r1, r7
 8009d8e:	f7ff bb0c 	b.w	80093aa <__ieee754_pow+0x3a>
 8009d92:	460c      	mov	r4, r1
 8009d94:	f7ff bb69 	b.w	800946a <__ieee754_pow+0xfa>
 8009d98:	2400      	movs	r4, #0
 8009d9a:	f7ff bb4b 	b.w	8009434 <__ieee754_pow+0xc4>
 8009d9e:	bf00      	nop
 8009da0:	00000000 	.word	0x00000000
 8009da4:	3fe62e43 	.word	0x3fe62e43
 8009da8:	fefa39ef 	.word	0xfefa39ef
 8009dac:	3fe62e42 	.word	0x3fe62e42
 8009db0:	0ca86c39 	.word	0x0ca86c39
 8009db4:	be205c61 	.word	0xbe205c61
 8009db8:	72bea4d0 	.word	0x72bea4d0
 8009dbc:	3e663769 	.word	0x3e663769
 8009dc0:	c5d26bf1 	.word	0xc5d26bf1
 8009dc4:	3ebbbd41 	.word	0x3ebbbd41
 8009dc8:	af25de2c 	.word	0xaf25de2c
 8009dcc:	3f11566a 	.word	0x3f11566a
 8009dd0:	16bebd93 	.word	0x16bebd93
 8009dd4:	3f66c16c 	.word	0x3f66c16c
 8009dd8:	5555553e 	.word	0x5555553e
 8009ddc:	3fc55555 	.word	0x3fc55555
 8009de0:	40900000 	.word	0x40900000
 8009de4:	4090cbff 	.word	0x4090cbff
 8009de8:	3f6f3400 	.word	0x3f6f3400
 8009dec:	4090cc00 	.word	0x4090cc00
 8009df0:	3fe00000 	.word	0x3fe00000
 8009df4:	fff00000 	.word	0xfff00000
 8009df8:	3ff00000 	.word	0x3ff00000
 8009dfc:	652b82fe 	.word	0x652b82fe
 8009e00:	3c971547 	.word	0x3c971547

08009e04 <with_errno>:
 8009e04:	b510      	push	{r4, lr}
 8009e06:	ed2d 8b02 	vpush	{d8}
 8009e0a:	eeb0 8a40 	vmov.f32	s16, s0
 8009e0e:	eef0 8a60 	vmov.f32	s17, s1
 8009e12:	4604      	mov	r4, r0
 8009e14:	f7fd f9cc 	bl	80071b0 <__errno>
 8009e18:	eeb0 0a48 	vmov.f32	s0, s16
 8009e1c:	eef0 0a68 	vmov.f32	s1, s17
 8009e20:	ecbd 8b02 	vpop	{d8}
 8009e24:	6004      	str	r4, [r0, #0]
 8009e26:	bd10      	pop	{r4, pc}

08009e28 <xflow>:
 8009e28:	4603      	mov	r3, r0
 8009e2a:	b507      	push	{r0, r1, r2, lr}
 8009e2c:	ec51 0b10 	vmov	r0, r1, d0
 8009e30:	b183      	cbz	r3, 8009e54 <xflow+0x2c>
 8009e32:	4602      	mov	r2, r0
 8009e34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e38:	e9cd 2300 	strd	r2, r3, [sp]
 8009e3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e40:	f7f6 fbda 	bl	80005f8 <__aeabi_dmul>
 8009e44:	ec41 0b10 	vmov	d0, r0, r1
 8009e48:	2022      	movs	r0, #34	@ 0x22
 8009e4a:	b003      	add	sp, #12
 8009e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e50:	f7ff bfd8 	b.w	8009e04 <with_errno>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	e7ee      	b.n	8009e38 <xflow+0x10>
 8009e5a:	0000      	movs	r0, r0
 8009e5c:	0000      	movs	r0, r0
	...

08009e60 <__math_uflow>:
 8009e60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009e68 <__math_uflow+0x8>
 8009e64:	f7ff bfe0 	b.w	8009e28 <xflow>
 8009e68:	00000000 	.word	0x00000000
 8009e6c:	10000000 	.word	0x10000000

08009e70 <__math_oflow>:
 8009e70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009e78 <__math_oflow+0x8>
 8009e74:	f7ff bfd8 	b.w	8009e28 <xflow>
 8009e78:	00000000 	.word	0x00000000
 8009e7c:	70000000 	.word	0x70000000

08009e80 <fabs>:
 8009e80:	ec51 0b10 	vmov	r0, r1, d0
 8009e84:	4602      	mov	r2, r0
 8009e86:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009e8a:	ec43 2b10 	vmov	d0, r2, r3
 8009e8e:	4770      	bx	lr

08009e90 <scalbn>:
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	ec55 4b10 	vmov	r4, r5, d0
 8009e96:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009e9a:	4606      	mov	r6, r0
 8009e9c:	462b      	mov	r3, r5
 8009e9e:	b991      	cbnz	r1, 8009ec6 <scalbn+0x36>
 8009ea0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009ea4:	4323      	orrs	r3, r4
 8009ea6:	d03b      	beq.n	8009f20 <scalbn+0x90>
 8009ea8:	4b33      	ldr	r3, [pc, #204]	@ (8009f78 <scalbn+0xe8>)
 8009eaa:	4620      	mov	r0, r4
 8009eac:	4629      	mov	r1, r5
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f7f6 fba2 	bl	80005f8 <__aeabi_dmul>
 8009eb4:	4b31      	ldr	r3, [pc, #196]	@ (8009f7c <scalbn+0xec>)
 8009eb6:	429e      	cmp	r6, r3
 8009eb8:	4604      	mov	r4, r0
 8009eba:	460d      	mov	r5, r1
 8009ebc:	da0f      	bge.n	8009ede <scalbn+0x4e>
 8009ebe:	a326      	add	r3, pc, #152	@ (adr r3, 8009f58 <scalbn+0xc8>)
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	e01e      	b.n	8009f04 <scalbn+0x74>
 8009ec6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009eca:	4291      	cmp	r1, r2
 8009ecc:	d10b      	bne.n	8009ee6 <scalbn+0x56>
 8009ece:	4622      	mov	r2, r4
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	f7f6 f9da 	bl	800028c <__adddf3>
 8009ed8:	4604      	mov	r4, r0
 8009eda:	460d      	mov	r5, r1
 8009edc:	e020      	b.n	8009f20 <scalbn+0x90>
 8009ede:	460b      	mov	r3, r1
 8009ee0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009ee4:	3936      	subs	r1, #54	@ 0x36
 8009ee6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009eea:	4296      	cmp	r6, r2
 8009eec:	dd0d      	ble.n	8009f0a <scalbn+0x7a>
 8009eee:	2d00      	cmp	r5, #0
 8009ef0:	a11b      	add	r1, pc, #108	@ (adr r1, 8009f60 <scalbn+0xd0>)
 8009ef2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ef6:	da02      	bge.n	8009efe <scalbn+0x6e>
 8009ef8:	a11b      	add	r1, pc, #108	@ (adr r1, 8009f68 <scalbn+0xd8>)
 8009efa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009efe:	a318      	add	r3, pc, #96	@ (adr r3, 8009f60 <scalbn+0xd0>)
 8009f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f04:	f7f6 fb78 	bl	80005f8 <__aeabi_dmul>
 8009f08:	e7e6      	b.n	8009ed8 <scalbn+0x48>
 8009f0a:	1872      	adds	r2, r6, r1
 8009f0c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009f10:	428a      	cmp	r2, r1
 8009f12:	dcec      	bgt.n	8009eee <scalbn+0x5e>
 8009f14:	2a00      	cmp	r2, #0
 8009f16:	dd06      	ble.n	8009f26 <scalbn+0x96>
 8009f18:	f36f 531e 	bfc	r3, #20, #11
 8009f1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009f20:	ec45 4b10 	vmov	d0, r4, r5
 8009f24:	bd70      	pop	{r4, r5, r6, pc}
 8009f26:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009f2a:	da08      	bge.n	8009f3e <scalbn+0xae>
 8009f2c:	2d00      	cmp	r5, #0
 8009f2e:	a10a      	add	r1, pc, #40	@ (adr r1, 8009f58 <scalbn+0xc8>)
 8009f30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f34:	dac3      	bge.n	8009ebe <scalbn+0x2e>
 8009f36:	a10e      	add	r1, pc, #56	@ (adr r1, 8009f70 <scalbn+0xe0>)
 8009f38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f3c:	e7bf      	b.n	8009ebe <scalbn+0x2e>
 8009f3e:	3236      	adds	r2, #54	@ 0x36
 8009f40:	f36f 531e 	bfc	r3, #20, #11
 8009f44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009f48:	4620      	mov	r0, r4
 8009f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f80 <scalbn+0xf0>)
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	2200      	movs	r2, #0
 8009f50:	e7d8      	b.n	8009f04 <scalbn+0x74>
 8009f52:	bf00      	nop
 8009f54:	f3af 8000 	nop.w
 8009f58:	c2f8f359 	.word	0xc2f8f359
 8009f5c:	01a56e1f 	.word	0x01a56e1f
 8009f60:	8800759c 	.word	0x8800759c
 8009f64:	7e37e43c 	.word	0x7e37e43c
 8009f68:	8800759c 	.word	0x8800759c
 8009f6c:	fe37e43c 	.word	0xfe37e43c
 8009f70:	c2f8f359 	.word	0xc2f8f359
 8009f74:	81a56e1f 	.word	0x81a56e1f
 8009f78:	43500000 	.word	0x43500000
 8009f7c:	ffff3cb0 	.word	0xffff3cb0
 8009f80:	3c900000 	.word	0x3c900000

08009f84 <_init>:
 8009f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f86:	bf00      	nop
 8009f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f8a:	bc08      	pop	{r3}
 8009f8c:	469e      	mov	lr, r3
 8009f8e:	4770      	bx	lr

08009f90 <_fini>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	bf00      	nop
 8009f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f96:	bc08      	pop	{r3}
 8009f98:	469e      	mov	lr, r3
 8009f9a:	4770      	bx	lr
